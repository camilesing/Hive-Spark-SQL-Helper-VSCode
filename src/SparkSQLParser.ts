// Generated from gen/SparkSQL.g4 by ANTLR 4.13.1

import * as antlr from "antlr4ng";
import { Token } from "antlr4ng";

import { SparkSQLListener } from "./SparkSQLListener";
import { SparkSQLVisitor } from "./SparkSQLVisitor";

// for running tests with parameters, TODO: discuss strategy for typed parameters in CI
// eslint-disable-next-line no-unused-vars
type int = number;


export class SparkSQLParser extends antlr.Parser {
    public static readonly CHINESE_SIGN = 1;
    public static readonly CHINESE_STR = 2;
    public static readonly SPACE = 3;
    public static readonly COMMENT_INPUT = 4;
    public static readonly LINE_COMMENT = 5;
    public static readonly KW_ADD = 6;
    public static readonly KW_ADMIN = 7;
    public static readonly KW_AFTER = 8;
    public static readonly KW_ANALYZE = 9;
    public static readonly KW_ASC = 10;
    public static readonly KW_BEFORE = 11;
    public static readonly KW_BYTE = 12;
    public static readonly KW_BYTES = 13;
    public static readonly KW_CACHE = 14;
    public static readonly KW_CASCADE = 15;
    public static readonly KW_CATALOG = 16;
    public static readonly KW_CATALOGS = 17;
    public static readonly KW_CLEAR = 18;
    public static readonly KW_CENTURY = 19;
    public static readonly KW_CHAIN = 20;
    public static readonly KW_CHANGELOG_MODE = 21;
    public static readonly KW_CHARACTERS = 22;
    public static readonly KW_COMMENT = 23;
    public static readonly KW_COMPACT = 24;
    public static readonly KW_COLUMNS = 25;
    public static readonly KW_CONSTRAINTS = 26;
    public static readonly KW_CONSTRUCTOR = 27;
    public static readonly KW_COMPUTE = 28;
    public static readonly KW_CUMULATE = 29;
    public static readonly KW_DATA = 30;
    public static readonly KW_DATABASE = 31;
    public static readonly KW_DATABASES = 32;
    public static readonly KW_DAYS = 33;
    public static readonly KW_DBPROPERTIES = 34;
    public static readonly KW_DECADE = 35;
    public static readonly KW_DEFINED = 36;
    public static readonly KW_DESC = 37;
    public static readonly KW_DESCRIPTOR = 38;
    public static readonly KW_DIV = 39;
    public static readonly KW_ENCODING = 40;
    public static readonly KW_ENFORCED = 41;
    public static readonly KW_ENGINE = 42;
    public static readonly KW_EPOCH = 43;
    public static readonly KW_ERROR = 44;
    public static readonly KW_ESTIMATED_COST = 45;
    public static readonly KW_EXCEPTION = 46;
    public static readonly KW_EXCLUDE = 47;
    public static readonly KW_EXCLUDING = 48;
    public static readonly KW_EXTENDED = 49;
    public static readonly KW_FILTER = 50;
    public static readonly KW_FILE = 51;
    public static readonly KW_FILES = 52;
    public static readonly KW_FINAL = 53;
    public static readonly KW_FIRST = 54;
    public static readonly KW_FOLLOWING = 55;
    public static readonly KW_FORMAT = 56;
    public static readonly KW_FORTRAN = 57;
    public static readonly KW_FOUND = 58;
    public static readonly KW_FRAC_SECOND = 59;
    public static readonly KW_FUNCTIONS = 60;
    public static readonly KW_GENERAL = 61;
    public static readonly KW_GENERATED = 62;
    public static readonly KW_GO = 63;
    public static readonly KW_GOTO = 64;
    public static readonly KW_GRANTED = 65;
    public static readonly KW_HOP = 66;
    public static readonly KW_HOURS = 67;
    public static readonly KW_IF = 68;
    public static readonly KW_IGNORE = 69;
    public static readonly KW_INCLUDE = 70;
    public static readonly KW_INCREMENT = 71;
    public static readonly KW_INPUT = 72;
    public static readonly KW_INVOKER = 73;
    public static readonly KW_JAR = 74;
    public static readonly KW_JARS = 75;
    public static readonly KW_JAVA = 76;
    public static readonly KW_JSON = 77;
    public static readonly KW_JSON_EXECUTION_PLAN = 78;
    public static readonly KW_KEY = 79;
    public static readonly KW_KEYS = 80;
    public static readonly KW_KEY_MEMBER = 81;
    public static readonly KW_KEY_TYPE = 82;
    public static readonly KW_LABEL = 83;
    public static readonly KW_LAST = 84;
    public static readonly KW_LENGTH = 85;
    public static readonly KW_LEVEL = 86;
    public static readonly KW_LIST = 87;
    public static readonly KW_LOAD = 88;
    public static readonly KW_LOCATION = 89;
    public static readonly KW_LONG = 90;
    public static readonly KW_MAP = 91;
    public static readonly KW_MICROSECOND = 92;
    public static readonly KW_MILLENNIUM = 93;
    public static readonly KW_MILLISECOND = 94;
    public static readonly KW_MINUTES = 95;
    public static readonly KW_MINVALUE = 96;
    public static readonly KW_MODIFY = 97;
    public static readonly KW_MODULES = 98;
    public static readonly KW_MONTHS = 99;
    public static readonly KW_NANOSECOND = 100;
    public static readonly KW_NOSCAN = 101;
    public static readonly KW_NULLS = 102;
    public static readonly KW_NUMBER = 103;
    public static readonly KW_OPTION = 104;
    public static readonly KW_OPTIONS = 105;
    public static readonly KW_ORDERING = 106;
    public static readonly KW_OUTPUT = 107;
    public static readonly KW_OVERWRITE = 108;
    public static readonly KW_OVERWRITING = 109;
    public static readonly KW_PARTITIONED = 110;
    public static readonly KW_PARTITIONS = 111;
    public static readonly KW_PASSING = 112;
    public static readonly KW_PAST = 113;
    public static readonly KW_PATH = 114;
    public static readonly KW_PLACING = 115;
    public static readonly KW_PLAN = 116;
    public static readonly KW_PRECEDING = 117;
    public static readonly KW_PRESERVE = 118;
    public static readonly KW_PRIOR = 119;
    public static readonly KW_PRIVILEGES = 120;
    public static readonly KW_PUBLIC = 121;
    public static readonly KW_PYTHON = 122;
    public static readonly KW_PYTHON_FILES = 123;
    public static readonly KW_PYTHON_REQUIREMENTS = 124;
    public static readonly KW_PYTHON_DEPENDENCIES = 125;
    public static readonly KW_PYTHON_JAR = 126;
    public static readonly KW_PYTHON_ARCHIVES = 127;
    public static readonly KW_PYTHON_PARAMETER = 128;
    public static readonly KW_QUARTER = 129;
    public static readonly KW_QUERY = 130;
    public static readonly KW_RAW = 131;
    public static readonly KW_READ = 132;
    public static readonly KW_REAL = 133;
    public static readonly KW_RECORDREADER = 134;
    public static readonly KW_RELATIVE = 135;
    public static readonly KW_REMOVE = 136;
    public static readonly KW_RENAME = 137;
    public static readonly KW_REPLACE = 138;
    public static readonly KW_RESPECT = 139;
    public static readonly KW_RESTART = 140;
    public static readonly KW_RESTRICT = 141;
    public static readonly KW_ROLE = 142;
    public static readonly KW_ROW_COUNT = 143;
    public static readonly KW_SCALA = 144;
    public static readonly KW_SCALAR = 145;
    public static readonly KW_SCALE = 146;
    public static readonly KW_SCHEMA = 147;
    public static readonly KW_SCHEMAS = 148;
    public static readonly KW_SECONDS = 149;
    public static readonly KW_SECTION = 150;
    public static readonly KW_SECURITY = 151;
    public static readonly KW_SELF = 152;
    public static readonly KW_SERVER = 153;
    public static readonly KW_SERVER_NAME = 154;
    public static readonly KW_SESSION = 155;
    public static readonly KW_SETS = 156;
    public static readonly KW_SHORT = 157;
    public static readonly KW_SIMPLE = 158;
    public static readonly KW_SIZE = 159;
    public static readonly KW_SLIDE = 160;
    public static readonly KW_SOURCE = 161;
    public static readonly KW_SPACE = 162;
    public static readonly KW_SERDEPROPERTIES = 163;
    public static readonly KW_STATE = 164;
    public static readonly KW_STATISTICS = 165;
    public static readonly KW_STATEMENT = 166;
    public static readonly KW_STEP = 167;
    public static readonly KW_STRING = 168;
    public static readonly KW_STRUCTURE = 169;
    public static readonly KW_STYLE = 170;
    public static readonly KW_TABLES = 171;
    public static readonly KW_TEMPORARY = 172;
    public static readonly KW_TIMECOL = 173;
    public static readonly KW_FLOOR = 174;
    public static readonly KW_TIMESTAMP_LTZ = 175;
    public static readonly KW_TIMESTAMP_NTZ = 176;
    public static readonly KW_TIMESTAMPADD = 177;
    public static readonly KW_TIMESTAMPDIFF = 178;
    public static readonly KW_TOTIMESTAMP = 179;
    public static readonly KW_TRANSFORM = 180;
    public static readonly KW_TUMBLE = 181;
    public static readonly KW_TYPE = 182;
    public static readonly KW_UNCACHE = 183;
    public static readonly KW_UNDER = 184;
    public static readonly KW_UNBOUNDED = 185;
    public static readonly KW_UNLOAD = 186;
    public static readonly KW_USAGE = 187;
    public static readonly KW_USE = 188;
    public static readonly KW_UTF16 = 189;
    public static readonly KW_UTF32 = 190;
    public static readonly KW_UTF8 = 191;
    public static readonly KW_VERSION = 192;
    public static readonly KW_VIEW = 193;
    public static readonly KW_VIEWS = 194;
    public static readonly KW_VIRTUAL = 195;
    public static readonly KW_WATERMARK = 196;
    public static readonly KW_WATERMARKS = 197;
    public static readonly KW_WEEK = 198;
    public static readonly KW_WEEKS = 199;
    public static readonly KW_WORK = 200;
    public static readonly KW_WRAPPER = 201;
    public static readonly KW_YEARS = 202;
    public static readonly KW_ZONE = 203;
    public static readonly KW_ABS = 204;
    public static readonly KW_ALL = 205;
    public static readonly KW_ALLOW = 206;
    public static readonly KW_ALTER = 207;
    public static readonly KW_AND = 208;
    public static readonly KW_ANY = 209;
    public static readonly KW_ARE = 210;
    public static readonly KW_ARRAY = 211;
    public static readonly KW_AS = 212;
    public static readonly KW_ASYMMETRIC = 213;
    public static readonly KW_AT = 214;
    public static readonly KW_AVG = 215;
    public static readonly KW_BEGIN = 216;
    public static readonly KW_BETWEEN = 217;
    public static readonly KW_BIGINT = 218;
    public static readonly KW_BINARY = 219;
    public static readonly KW_BIT = 220;
    public static readonly KW_BLOB = 221;
    public static readonly KW_BOOLEAN = 222;
    public static readonly KW_BOTH = 223;
    public static readonly KW_BUCKET = 224;
    public static readonly KW_BUCKETS = 225;
    public static readonly KW_BY = 226;
    public static readonly KW_CALL = 227;
    public static readonly KW_CALLED = 228;
    public static readonly KW_CASCADED = 229;
    public static readonly KW_CASE = 230;
    public static readonly KW_CAST = 231;
    public static readonly KW_CEIL = 232;
    public static readonly KW_CHAR = 233;
    public static readonly KW_CHARACTER = 234;
    public static readonly KW_CHECK = 235;
    public static readonly KW_CLOB = 236;
    public static readonly KW_CLOSE = 237;
    public static readonly KW_CLUSTER = 238;
    public static readonly KW_CLUSTERED = 239;
    public static readonly KW_COALESCE = 240;
    public static readonly KW_COLLATE = 241;
    public static readonly KW_COLLECT = 242;
    public static readonly KW_COLUMN = 243;
    public static readonly KW_COMMIT = 244;
    public static readonly KW_CONNECT = 245;
    public static readonly KW_CONSTRAINT = 246;
    public static readonly KW_CONTAINS = 247;
    public static readonly KW_CONVERT = 248;
    public static readonly KW_COUNT = 249;
    public static readonly KW_CURRENT_TIMESTAMP = 250;
    public static readonly KW_CREATE = 251;
    public static readonly KW_CROSS = 252;
    public static readonly KW_CUBE = 253;
    public static readonly KW_CUME_DIST = 254;
    public static readonly KW_CURRENT = 255;
    public static readonly KW_CURSOR = 256;
    public static readonly KW_CYCLE = 257;
    public static readonly KW_COLLECTION = 258;
    public static readonly KW_DATE = 259;
    public static readonly KW_DATETIME = 260;
    public static readonly KW_DAY = 261;
    public static readonly KW_DEC = 262;
    public static readonly KW_DECIMAL = 263;
    public static readonly KW_DECLARE = 264;
    public static readonly KW_DEFAULT = 265;
    public static readonly KW_DEFINE = 266;
    public static readonly KW_DELETE = 267;
    public static readonly KW_DELIMITED = 268;
    public static readonly KW_DESCRIBE = 269;
    public static readonly KW_DENSE_RANK = 270;
    public static readonly KW_DISTINCT = 271;
    public static readonly KW_DIRECTORY = 272;
    public static readonly KW_DISTRIBUTED = 273;
    public static readonly KW_DISTRIBUTE = 274;
    public static readonly KW_DOUBLE = 275;
    public static readonly KW_DROP = 276;
    public static readonly KW_EACH = 277;
    public static readonly KW_ELSE = 278;
    public static readonly KW_END = 279;
    public static readonly KW_EQUALS = 280;
    public static readonly KW_ESCAPE = 281;
    public static readonly KW_ESCAPED = 282;
    public static readonly KW_EXCEPT = 283;
    public static readonly KW_EXECUTE = 284;
    public static readonly KW_EXISTS = 285;
    public static readonly KW_EXPLAIN = 286;
    public static readonly KW_EXPLODE = 287;
    public static readonly KW_EXPLODE_OUTER = 288;
    public static readonly KW_EXTERNAL = 289;
    public static readonly KW_EXTRACT = 290;
    public static readonly KW_FIRST_VALUE = 291;
    public static readonly KW_FALSE = 292;
    public static readonly KW_FLOAT = 293;
    public static readonly KW_FIELDS = 294;
    public static readonly KW_FOR = 295;
    public static readonly KW_FROM = 296;
    public static readonly KW_FROM_UNIXTIME = 297;
    public static readonly KW_FULL = 298;
    public static readonly KW_FUNCTION = 299;
    public static readonly KW_GLOBAL = 300;
    public static readonly KW_GRANT = 301;
    public static readonly KW_GROUP = 302;
    public static readonly KW_GROUPING = 303;
    public static readonly KW_GROUPS = 304;
    public static readonly KW_HASH = 305;
    public static readonly KW_HAVING = 306;
    public static readonly KW_HOUR = 307;
    public static readonly KW_IMPORT = 308;
    public static readonly KW_IN = 309;
    public static readonly KW_INCLUDING = 310;
    public static readonly KW_INPUTFORMAT = 311;
    public static readonly KW_INNER = 312;
    public static readonly KW_INOUT = 313;
    public static readonly KW_INSERT = 314;
    public static readonly KW_INT = 315;
    public static readonly KW_INTEGER = 316;
    public static readonly KW_INTERSECT = 317;
    public static readonly KW_INTERVAL = 318;
    public static readonly KW_INTO = 319;
    public static readonly KW_INPATH = 320;
    public static readonly KW_INLINE = 321;
    public static readonly KW_INLINE_OUTER = 322;
    public static readonly KW_ITEMS = 323;
    public static readonly KW_IS = 324;
    public static readonly KW_JOIN = 325;
    public static readonly KW_JSON_TUPLE = 326;
    public static readonly KW_LAG = 327;
    public static readonly KW_LANGUAGE = 328;
    public static readonly KW_LATERAL = 329;
    public static readonly KW_LAST_VALUE = 330;
    public static readonly KW_LEAD = 331;
    public static readonly KW_LEADING = 332;
    public static readonly KW_LEFT = 333;
    public static readonly KW_LIKE = 334;
    public static readonly KW_LINES = 335;
    public static readonly KW_LIMIT = 336;
    public static readonly KW_LOCAL = 337;
    public static readonly KW_LOCALTIMESTAMP = 338;
    public static readonly KW_MATCH = 339;
    public static readonly KW_MATCH_RECOGNIZE = 340;
    public static readonly KW_MEASURES = 341;
    public static readonly KW_MERGE = 342;
    public static readonly KW_METADATA = 343;
    public static readonly KW_MINUS = 344;
    public static readonly KW_MINUTE = 345;
    public static readonly KW_MODIFIES = 346;
    public static readonly KW_MODULE = 347;
    public static readonly KW_MONTH = 348;
    public static readonly KW_MULTISET = 349;
    public static readonly KW_NATURAL = 350;
    public static readonly KW_NEXT = 351;
    public static readonly KW_NO = 352;
    public static readonly KW_NONE = 353;
    public static readonly KW_NOT = 354;
    public static readonly KW_NTILE = 355;
    public static readonly KW_NTH_VALUE = 356;
    public static readonly KW_NULL = 357;
    public static readonly KW_NUMERIC = 358;
    public static readonly KW_OF = 359;
    public static readonly KW_OFFSET = 360;
    public static readonly KW_ON = 361;
    public static readonly KW_ONE = 362;
    public static readonly KW_OR = 363;
    public static readonly KW_ORDER = 364;
    public static readonly KW_OUT = 365;
    public static readonly KW_OUTER = 366;
    public static readonly KW_OUTPUTFORMAT = 367;
    public static readonly KW_OVER = 368;
    public static readonly KW_OVERLAY = 369;
    public static readonly KW_PARSE_URL = 370;
    public static readonly KW_PARTITION = 371;
    public static readonly KW_PATTERN = 372;
    public static readonly KW_PER = 373;
    public static readonly KW_PERCENT = 374;
    public static readonly KW_PERCENT_RANK = 375;
    public static readonly KW_PERCENTILE_CONT = 376;
    public static readonly KW_PERCENTILE_DISC = 377;
    public static readonly KW_PERIOD = 378;
    public static readonly KW_PIVOT = 379;
    public static readonly KW_POSITION = 380;
    public static readonly KW_POWER = 381;
    public static readonly KW_POSEXPLODE = 382;
    public static readonly KW_POSEXPLODE_OUTER = 383;
    public static readonly KW_PRIMARY = 384;
    public static readonly KW_PURGE = 385;
    public static readonly KW_RANGE = 386;
    public static readonly KW_RECORDWRITER = 387;
    public static readonly KW_ROW_NUMBER = 388;
    public static readonly KW_RANK = 389;
    public static readonly KW_REGEXP = 390;
    public static readonly KW_RESET = 391;
    public static readonly KW_REVOKE = 392;
    public static readonly KW_REPAIR = 393;
    public static readonly KW_RIGHT = 394;
    public static readonly KW_RLIKE = 395;
    public static readonly KW_ROLLBACK = 396;
    public static readonly KW_ROLLUP = 397;
    public static readonly KW_ROW = 398;
    public static readonly KW_ROWS = 399;
    public static readonly KW_SECOND = 400;
    public static readonly KW_SELECT = 401;
    public static readonly KW_SEMI = 402;
    public static readonly KW_SET = 403;
    public static readonly KW_SERDE = 404;
    public static readonly KW_SHOW = 405;
    public static readonly KW_SIMILAR = 406;
    public static readonly KW_SKIP = 407;
    public static readonly KW_STORED = 408;
    public static readonly KW_SORTED = 409;
    public static readonly KW_SMALLINT = 410;
    public static readonly KW_STACK = 411;
    public static readonly KW_START = 412;
    public static readonly KW_STATIC = 413;
    public static readonly KW_STRUCT = 414;
    public static readonly KW_SORT = 415;
    public static readonly KW_SUBSTRING = 416;
    public static readonly KW_SUM = 417;
    public static readonly KW_SYMMETRIC = 418;
    public static readonly KW_SYSTEM = 419;
    public static readonly KW_SYSTEM_TIME = 420;
    public static readonly KW_SYSTEM_USER = 421;
    public static readonly KW_TABLE = 422;
    public static readonly KW_TBLPROPERTIES = 423;
    public static readonly KW_TABLESAMPLE = 424;
    public static readonly KW_TERMINATED = 425;
    public static readonly KW_THEN = 426;
    public static readonly KW_TIME = 427;
    public static readonly KW_TIMESTAMP = 428;
    public static readonly KW_TIMESTAMP_3 = 429;
    public static readonly KW_TIMESTAMP_6 = 430;
    public static readonly KW_TIMESTAMP_9 = 431;
    public static readonly KW_TINYINT = 432;
    public static readonly KW_TO = 433;
    public static readonly KW_TRAILING = 434;
    public static readonly KW_TRUE = 435;
    public static readonly KW_TRUNCATE = 436;
    public static readonly KW_UNION = 437;
    public static readonly KW_UNIQUE = 438;
    public static readonly KW_UNKNOWN = 439;
    public static readonly KW_UNSET = 440;
    public static readonly KW_UNPIVOT = 441;
    public static readonly KW_UPPER = 442;
    public static readonly KW_UPSERT = 443;
    public static readonly KW_USER = 444;
    public static readonly KW_USING = 445;
    public static readonly KW_VALUE = 446;
    public static readonly KW_VALUES = 447;
    public static readonly KW_VARBINARY = 448;
    public static readonly KW_VARCHAR = 449;
    public static readonly KW_WHEN = 450;
    public static readonly KW_WHERE = 451;
    public static readonly KW_WINDOW = 452;
    public static readonly KW_WITH = 453;
    public static readonly KW_WITHIN = 454;
    public static readonly KW_WITHOUT = 455;
    public static readonly KW_YEAR = 456;
    public static readonly KW_MATERIALIZED = 457;
    public static readonly KW_FRESHNESS = 458;
    public static readonly KW_REFRESH_MODE = 459;
    public static readonly KW_RECOVER = 460;
    public static readonly KW_CONTINUOUS = 461;
    public static readonly KW_SUSPEND = 462;
    public static readonly KW_RESUME = 463;
    public static readonly KW_REFRESH = 464;
    public static readonly BIT_NOT_OP = 465;
    public static readonly BIT_OR_OP = 466;
    public static readonly BIT_AND_OP = 467;
    public static readonly BIT_XOR_OP = 468;
    public static readonly EQUAL_SYMBOL = 469;
    public static readonly GREATER_SYMBOL = 470;
    public static readonly LESS_SYMBOL = 471;
    public static readonly EXCLAMATION_SYMBOL = 472;
    public static readonly DOT = 473;
    public static readonly LS_BRACKET = 474;
    public static readonly RS_BRACKET = 475;
    public static readonly LR_BRACKET = 476;
    public static readonly RR_BRACKET = 477;
    public static readonly LB_BRACKET = 478;
    public static readonly RB_BRACKET = 479;
    public static readonly COMMA = 480;
    public static readonly SEMICOLON = 481;
    public static readonly AT_SIGN = 482;
    public static readonly DOLLAR = 483;
    public static readonly SINGLE_QUOTE_SYMB = 484;
    public static readonly DOUBLE_QUOTE_SYMB = 485;
    public static readonly REVERSE_QUOTE_SYMB = 486;
    public static readonly COLON_SYMB = 487;
    public static readonly ASTERISK_SIGN = 488;
    public static readonly UNDERLINE_SIGN = 489;
    public static readonly HYPNEN_SIGN = 490;
    public static readonly ADD_SIGN = 491;
    public static readonly PENCENT_SIGN = 492;
    public static readonly DOUBLE_VERTICAL_SIGN = 493;
    public static readonly DOUBLE_HYPNEN_SIGN = 494;
    public static readonly SLASH_SIGN = 495;
    public static readonly QUESTION_MARK_SIGN = 496;
    public static readonly DOUBLE_RIGHT_ARROW = 497;
    public static readonly STRING_LITERAL = 498;
    public static readonly DIG_LITERAL = 499;
    public static readonly REAL_LITERAL = 500;
    public static readonly ID_LITERAL = 501;
    public static readonly RULE_statement = 0;
    public static readonly RULE_sqlStatements = 1;
    public static readonly RULE_emptyStatement = 2;
    public static readonly RULE_createStatement = 3;
    public static readonly RULE_createTable = 4;
    public static readonly RULE_simpleCreateTable = 5;
    public static readonly RULE_simpleCreateTableNoSortElement = 6;
    public static readonly RULE_location = 7;
    public static readonly RULE_sortedBy = 8;
    public static readonly RULE_usingCreate = 9;
    public static readonly RULE_tblProperties = 10;
    public static readonly RULE_defaultColumnUsing = 11;
    public static readonly RULE_defaultColumnUsingNoSortElement = 12;
    public static readonly RULE_columnUsing = 13;
    public static readonly RULE_columnUsingNoSortElement = 14;
    public static readonly RULE_usingByQuery = 15;
    public static readonly RULE_usingByQueryNoSortElement = 16;
    public static readonly RULE_intoBuckets = 17;
    public static readonly RULE_hiveFormatpartitionDefinition = 18;
    public static readonly RULE_rowFormatSerde = 19;
    public static readonly RULE_fieldsTerminatedBy = 20;
    public static readonly RULE_storedAs = 21;
    public static readonly RULE_storedAsInputformat = 22;
    public static readonly RULE_outputformat = 23;
    public static readonly RULE_rowFormatDelimted = 24;
    public static readonly RULE_columnsBody = 25;
    public static readonly RULE_createCustomSerde = 26;
    public static readonly RULE_createCustomSerdeNoSortElement = 27;
    public static readonly RULE_createCustomSerdeExternal = 28;
    public static readonly RULE_createCustomSerdeExternalNoSortElement = 29;
    public static readonly RULE_createTableAsSelect = 30;
    public static readonly RULE_createMaterializedTableAsSelect = 31;
    public static readonly RULE_createMaterializedTableAsSelectNoSortElement = 32;
    public static readonly RULE_usingClause = 33;
    public static readonly RULE_jarFileName = 34;
    public static readonly RULE_filePath = 35;
    public static readonly RULE_ifExistsPart = 36;
    public static readonly RULE_columnPosition = 37;
    public static readonly RULE_renameDefinition = 38;
    public static readonly RULE_setKeyValueDefinition = 39;
    public static readonly RULE_addConstraint = 40;
    public static readonly RULE_dropConstraint = 41;
    public static readonly RULE_addUnique = 42;
    public static readonly RULE_notForced = 43;
    public static readonly RULE_insertStatement = 44;
    public static readonly RULE_insertSimpleStatement = 45;
    public static readonly RULE_insertPartitionDefinition = 46;
    public static readonly RULE_queryStatement = 47;
    public static readonly RULE_withClause = 48;
    public static readonly RULE_valuesCaluse = 49;
    public static readonly RULE_inlineBody = 50;
    public static readonly RULE_withItem = 51;
    public static readonly RULE_withItemName = 52;
    public static readonly RULE_selectClause = 53;
    public static readonly RULE_filterPart = 54;
    public static readonly RULE_overWindowItem = 55;
    public static readonly RULE_overClause = 56;
    public static readonly RULE_windowFunctioPart = 57;
    public static readonly RULE_windowFunctionName = 58;
    public static readonly RULE_analyticFunction = 59;
    public static readonly RULE_rangkingFunction = 60;
    public static readonly RULE_fromClause = 61;
    public static readonly RULE_windowFrameForWindowsQuery = 62;
    public static readonly RULE_frameExpession = 63;
    public static readonly RULE_tableExpression = 64;
    public static readonly RULE_tvfClause = 65;
    public static readonly RULE_rangeClause = 66;
    public static readonly RULE_viewReference = 67;
    public static readonly RULE_pivotReference = 68;
    public static readonly RULE_tableReference = 69;
    public static readonly RULE_tablePrimary = 70;
    public static readonly RULE_funtionBody = 71;
    public static readonly RULE_unpivotBody = 72;
    public static readonly RULE_pivotBody = 73;
    public static readonly RULE_expressionAsAlias = 74;
    public static readonly RULE_expressionAsAliasList = 75;
    public static readonly RULE_systemTimePeriod = 76;
    public static readonly RULE_dateTimeExpression = 77;
    public static readonly RULE_inlineDataValueClause = 78;
    public static readonly RULE_windowTVFClause = 79;
    public static readonly RULE_windowTVFExpression = 80;
    public static readonly RULE_windowTVFName = 81;
    public static readonly RULE_rowFormatDelimited = 82;
    public static readonly RULE_hiveSerde = 83;
    public static readonly RULE_usingAsColumnPart = 84;
    public static readonly RULE_hiveSerdePart = 85;
    public static readonly RULE_tableCanHasKeyPropertyList = 86;
    public static readonly RULE_sparkRecordWriterPart = 87;
    public static readonly RULE_windowTVFParam = 88;
    public static readonly RULE_timeIntervalParamName = 89;
    public static readonly RULE_columnDescriptor = 90;
    public static readonly RULE_joinCondition = 91;
    public static readonly RULE_whereClause = 92;
    public static readonly RULE_samplingQueries = 93;
    public static readonly RULE_someByClause = 94;
    public static readonly RULE_clusterByClause = 95;
    public static readonly RULE_clusteredByClause = 96;
    public static readonly RULE_distributeByClause = 97;
    public static readonly RULE_groupByClause = 98;
    public static readonly RULE_groupItemDefinition = 99;
    public static readonly RULE_groupingSet = 100;
    public static readonly RULE_groupingSets = 101;
    public static readonly RULE_groupingSetsNotionName = 102;
    public static readonly RULE_groupWindowFunction = 103;
    public static readonly RULE_groupWindowFunctionName = 104;
    public static readonly RULE_timeAttrColumn = 105;
    public static readonly RULE_havingClause = 106;
    public static readonly RULE_windowClause = 107;
    public static readonly RULE_namedWindow = 108;
    public static readonly RULE_windowSpec = 109;
    public static readonly RULE_matchRecognizeClause = 110;
    public static readonly RULE_orderByCaluse = 111;
    public static readonly RULE_sortByCaluse = 112;
    public static readonly RULE_orderItemDefinition = 113;
    public static readonly RULE_limitClause = 114;
    public static readonly RULE_offsetClause = 115;
    public static readonly RULE_partitionByClause = 116;
    public static readonly RULE_quantifiers = 117;
    public static readonly RULE_measuresClause = 118;
    public static readonly RULE_patternDefinition = 119;
    public static readonly RULE_patternVariable = 120;
    public static readonly RULE_outputMode = 121;
    public static readonly RULE_afterMatchStrategy = 122;
    public static readonly RULE_patternVariablesDefinition = 123;
    public static readonly RULE_windowFrame = 124;
    public static readonly RULE_frameBound = 125;
    public static readonly RULE_withinClause = 126;
    public static readonly RULE_selfDefinitionClause = 127;
    public static readonly RULE_partitionDefinition = 128;
    public static readonly RULE_transformList = 129;
    public static readonly RULE_transform = 130;
    public static readonly RULE_transformArgument = 131;
    public static readonly RULE_likeDefinition = 132;
    public static readonly RULE_distribution = 133;
    public static readonly RULE_using = 134;
    public static readonly RULE_likeOption = 135;
    public static readonly RULE_columnOptionDefinition = 136;
    public static readonly RULE_physicalColumnDefinitionList = 137;
    public static readonly RULE_physicalColumnDefinition = 138;
    public static readonly RULE_computedColumnExpression = 139;
    public static readonly RULE_watermarkDefinition = 140;
    public static readonly RULE_tableConstraint = 141;
    public static readonly RULE_constraintName = 142;
    public static readonly RULE_valuesDefinition = 143;
    public static readonly RULE_valuesRowDefinition = 144;
    public static readonly RULE_lengthOneDimension = 145;
    public static readonly RULE_lengthTwoOptionalDimension = 146;
    public static readonly RULE_lengthTwoStringDimension = 147;
    public static readonly RULE_lengthOneTypeDimension = 148;
    public static readonly RULE_mapTypeDimension = 149;
    public static readonly RULE_rowTypeDimension = 150;
    public static readonly RULE_structTypeDimension = 151;
    public static readonly RULE_columnConstraint = 152;
    public static readonly RULE_commentSpec = 153;
    public static readonly RULE_metadataColumnDefinition = 154;
    public static readonly RULE_metadataKey = 155;
    public static readonly RULE_computedColumnDefinition = 156;
    public static readonly RULE_columnName = 157;
    public static readonly RULE_columnNameList = 158;
    public static readonly RULE_columnType = 159;
    public static readonly RULE_expression = 160;
    public static readonly RULE_booleanExpression = 161;
    public static readonly RULE_predicate = 162;
    public static readonly RULE_likePredicate = 163;
    public static readonly RULE_valueExpression = 164;
    public static readonly RULE_primaryExpression = 165;
    public static readonly RULE_complexDataTypeExpression = 166;
    public static readonly RULE_arrayExpression = 167;
    public static readonly RULE_structExpression = 168;
    public static readonly RULE_rowExpression = 169;
    public static readonly RULE_mapExpression = 170;
    public static readonly RULE_dataTypeExpression = 171;
    public static readonly RULE_sqlSimpleType = 172;
    public static readonly RULE_functionName = 173;
    public static readonly RULE_functionParam = 174;
    public static readonly RULE_filterClause = 175;
    public static readonly RULE_correlationName = 176;
    public static readonly RULE_qualifiedName = 177;
    public static readonly RULE_timeIntervalExpression = 178;
    public static readonly RULE_errorCapturingMultiUnitsInterval = 179;
    public static readonly RULE_multiUnitsInterval = 180;
    public static readonly RULE_errorCapturingUnitToUnitInterval = 181;
    public static readonly RULE_unitToUnitInterval = 182;
    public static readonly RULE_intervalValue = 183;
    public static readonly RULE_columnAlias = 184;
    public static readonly RULE_tableAlias = 185;
    public static readonly RULE_anyAlias = 186;
    public static readonly RULE_errorCapturingIdentifier = 187;
    public static readonly RULE_errorCapturingIdentifierExtra = 188;
    public static readonly RULE_identifierList = 189;
    public static readonly RULE_identifierSeq = 190;
    public static readonly RULE_identifier = 191;
    public static readonly RULE_unquotedAnyString = 192;
    public static readonly RULE_refVar = 193;
    public static readonly RULE_unquotedIdentifier = 194;
    public static readonly RULE_whenClause = 195;
    public static readonly RULE_catalogPath = 196;
    public static readonly RULE_databasePath = 197;
    public static readonly RULE_databasePathCreate = 198;
    public static readonly RULE_tablePathCreate = 199;
    public static readonly RULE_tablePath = 200;
    public static readonly RULE_anonymousWindowsName = 201;
    public static readonly RULE_uid = 202;
    public static readonly RULE_withOption = 203;
    public static readonly RULE_ifNotExists = 204;
    public static readonly RULE_ifExists = 205;
    public static readonly RULE_tablePropertyList = 206;
    public static readonly RULE_tableProperty = 207;
    public static readonly RULE_tablePropertyKey = 208;
    public static readonly RULE_propertyName = 209;
    public static readonly RULE_tablePropertyValue = 210;
    public static readonly RULE_comparisonOperator = 211;
    public static readonly RULE_constant = 212;
    public static readonly RULE_timePointLiteral = 213;
    public static readonly RULE_stringLiteral = 214;
    public static readonly RULE_decimalLiteral = 215;
    public static readonly RULE_booleanLiteral = 216;
    public static readonly RULE_setQuantifier = 217;
    public static readonly RULE_timePointUnit = 218;
    public static readonly RULE_timeIntervalUnit = 219;
    public static readonly RULE_reservedKeywordsUsedAsFuncParam = 220;
    public static readonly RULE_reservedKeywordsUsedAsFuncName = 221;
    public static readonly RULE_nonReservedKeywords = 222;
    public static readonly RULE_sqlStatement = 223;
    public static readonly RULE_selectStatement = 224;
    public static readonly RULE_projectItemDefinition = 225;
    public static readonly RULE_hiveOverWindowItem = 226;
    public static readonly RULE_selectStatementPlus = 227;
    public static readonly RULE_plusStatement = 228;
    public static readonly RULE_describeStatement = 229;
    public static readonly RULE_explainStatement = 230;
    public static readonly RULE_explainDetails = 231;
    public static readonly RULE_explainDetail = 232;
    public static readonly RULE_useStatement = 233;
    public static readonly RULE_useModuleStatement = 234;
    public static readonly RULE_showStatement = 235;
    public static readonly RULE_loadStatement = 236;
    public static readonly RULE_unloadStatement = 237;
    public static readonly RULE_setStatement = 238;
    public static readonly RULE_resetStatement = 239;
    public static readonly RULE_fileStatement = 240;
    public static readonly RULE_refreshStatement = 241;
    public static readonly RULE_analyzeStatement = 242;
    public static readonly RULE_analyzePartitionDefinition = 243;
    public static readonly RULE_createCatalog = 244;
    public static readonly RULE_createDatabase = 245;
    public static readonly RULE_createView = 246;
    public static readonly RULE_createFunction = 247;
    public static readonly RULE_replaceTable = 248;
    public static readonly RULE_cacheStatement = 249;
    public static readonly RULE_alterMaterializedTable = 250;
    public static readonly RULE_alterTable = 251;
    public static readonly RULE_alterTableBody = 252;
    public static readonly RULE_setPart = 253;
    public static readonly RULE_dropCatalog = 254;
    public static readonly RULE_dropTable = 255;
    public static readonly RULE_dropDatabase = 256;
    public static readonly RULE_dropView = 257;
    public static readonly RULE_dropFunction = 258;
    public static readonly RULE_truncateTable = 259;
    public static readonly RULE_repairTable = 260;
    public static readonly RULE_alertView = 261;
    public static readonly RULE_alterDatabase = 262;
    public static readonly RULE_alterFunction = 263;
    public static readonly RULE_inlineTableClause = 264;
    public static readonly RULE_showTableStatementBody = 265;
    public static readonly RULE_showFunctionStatementBody = 266;
    public static readonly RULE_transformClause = 267;
    public static readonly RULE_insertSparkDirectoryStatement = 268;
    public static readonly RULE_insertSparkDirectoryBody = 269;
    public static readonly RULE_insertHiveDirectoryStatement = 270;
    public static readonly RULE_hiveRowFormatPart = 271;
    public static readonly RULE_insertMulStatementCompatibility = 272;
    public static readonly RULE_insertMulStatement = 273;
    public static readonly RULE_insertFromTable = 274;
    public static readonly RULE_createExternalTable = 275;
    public static readonly RULE_createExternalTableNoSortElement = 276;
    public static readonly RULE_hiveFormatCreate = 277;
    public static readonly RULE_hiveFormatCreateNoSortElement = 278;

    public static readonly literalNames = [
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, "'~'", "'|'", "'&'", "'^'", "'='", "'>'", "'<'", 
        "'!'", "'.'", "'['", "']'", "'('", "')'", "'{'", "'}'", "','", "';'", 
        "'@'", "'$'", "'''", "'\"'", "'`'", "':'", "'*'", "'_'", "'-'", 
        "'+'", "'%'", null, null, "'/'", "'?'"
    ];

    public static readonly symbolicNames = [
        null, "CHINESE_SIGN", "CHINESE_STR", "SPACE", "COMMENT_INPUT", "LINE_COMMENT", 
        "KW_ADD", "KW_ADMIN", "KW_AFTER", "KW_ANALYZE", "KW_ASC", "KW_BEFORE", 
        "KW_BYTE", "KW_BYTES", "KW_CACHE", "KW_CASCADE", "KW_CATALOG", "KW_CATALOGS", 
        "KW_CLEAR", "KW_CENTURY", "KW_CHAIN", "KW_CHANGELOG_MODE", "KW_CHARACTERS", 
        "KW_COMMENT", "KW_COMPACT", "KW_COLUMNS", "KW_CONSTRAINTS", "KW_CONSTRUCTOR", 
        "KW_COMPUTE", "KW_CUMULATE", "KW_DATA", "KW_DATABASE", "KW_DATABASES", 
        "KW_DAYS", "KW_DBPROPERTIES", "KW_DECADE", "KW_DEFINED", "KW_DESC", 
        "KW_DESCRIPTOR", "KW_DIV", "KW_ENCODING", "KW_ENFORCED", "KW_ENGINE", 
        "KW_EPOCH", "KW_ERROR", "KW_ESTIMATED_COST", "KW_EXCEPTION", "KW_EXCLUDE", 
        "KW_EXCLUDING", "KW_EXTENDED", "KW_FILTER", "KW_FILE", "KW_FILES", 
        "KW_FINAL", "KW_FIRST", "KW_FOLLOWING", "KW_FORMAT", "KW_FORTRAN", 
        "KW_FOUND", "KW_FRAC_SECOND", "KW_FUNCTIONS", "KW_GENERAL", "KW_GENERATED", 
        "KW_GO", "KW_GOTO", "KW_GRANTED", "KW_HOP", "KW_HOURS", "KW_IF", 
        "KW_IGNORE", "KW_INCLUDE", "KW_INCREMENT", "KW_INPUT", "KW_INVOKER", 
        "KW_JAR", "KW_JARS", "KW_JAVA", "KW_JSON", "KW_JSON_EXECUTION_PLAN", 
        "KW_KEY", "KW_KEYS", "KW_KEY_MEMBER", "KW_KEY_TYPE", "KW_LABEL", 
        "KW_LAST", "KW_LENGTH", "KW_LEVEL", "KW_LIST", "KW_LOAD", "KW_LOCATION", 
        "KW_LONG", "KW_MAP", "KW_MICROSECOND", "KW_MILLENNIUM", "KW_MILLISECOND", 
        "KW_MINUTES", "KW_MINVALUE", "KW_MODIFY", "KW_MODULES", "KW_MONTHS", 
        "KW_NANOSECOND", "KW_NOSCAN", "KW_NULLS", "KW_NUMBER", "KW_OPTION", 
        "KW_OPTIONS", "KW_ORDERING", "KW_OUTPUT", "KW_OVERWRITE", "KW_OVERWRITING", 
        "KW_PARTITIONED", "KW_PARTITIONS", "KW_PASSING", "KW_PAST", "KW_PATH", 
        "KW_PLACING", "KW_PLAN", "KW_PRECEDING", "KW_PRESERVE", "KW_PRIOR", 
        "KW_PRIVILEGES", "KW_PUBLIC", "KW_PYTHON", "KW_PYTHON_FILES", "KW_PYTHON_REQUIREMENTS", 
        "KW_PYTHON_DEPENDENCIES", "KW_PYTHON_JAR", "KW_PYTHON_ARCHIVES", 
        "KW_PYTHON_PARAMETER", "KW_QUARTER", "KW_QUERY", "KW_RAW", "KW_READ", 
        "KW_REAL", "KW_RECORDREADER", "KW_RELATIVE", "KW_REMOVE", "KW_RENAME", 
        "KW_REPLACE", "KW_RESPECT", "KW_RESTART", "KW_RESTRICT", "KW_ROLE", 
        "KW_ROW_COUNT", "KW_SCALA", "KW_SCALAR", "KW_SCALE", "KW_SCHEMA", 
        "KW_SCHEMAS", "KW_SECONDS", "KW_SECTION", "KW_SECURITY", "KW_SELF", 
        "KW_SERVER", "KW_SERVER_NAME", "KW_SESSION", "KW_SETS", "KW_SHORT", 
        "KW_SIMPLE", "KW_SIZE", "KW_SLIDE", "KW_SOURCE", "KW_SPACE", "KW_SERDEPROPERTIES", 
        "KW_STATE", "KW_STATISTICS", "KW_STATEMENT", "KW_STEP", "KW_STRING", 
        "KW_STRUCTURE", "KW_STYLE", "KW_TABLES", "KW_TEMPORARY", "KW_TIMECOL", 
        "KW_FLOOR", "KW_TIMESTAMP_LTZ", "KW_TIMESTAMP_NTZ", "KW_TIMESTAMPADD", 
        "KW_TIMESTAMPDIFF", "KW_TOTIMESTAMP", "KW_TRANSFORM", "KW_TUMBLE", 
        "KW_TYPE", "KW_UNCACHE", "KW_UNDER", "KW_UNBOUNDED", "KW_UNLOAD", 
        "KW_USAGE", "KW_USE", "KW_UTF16", "KW_UTF32", "KW_UTF8", "KW_VERSION", 
        "KW_VIEW", "KW_VIEWS", "KW_VIRTUAL", "KW_WATERMARK", "KW_WATERMARKS", 
        "KW_WEEK", "KW_WEEKS", "KW_WORK", "KW_WRAPPER", "KW_YEARS", "KW_ZONE", 
        "KW_ABS", "KW_ALL", "KW_ALLOW", "KW_ALTER", "KW_AND", "KW_ANY", 
        "KW_ARE", "KW_ARRAY", "KW_AS", "KW_ASYMMETRIC", "KW_AT", "KW_AVG", 
        "KW_BEGIN", "KW_BETWEEN", "KW_BIGINT", "KW_BINARY", "KW_BIT", "KW_BLOB", 
        "KW_BOOLEAN", "KW_BOTH", "KW_BUCKET", "KW_BUCKETS", "KW_BY", "KW_CALL", 
        "KW_CALLED", "KW_CASCADED", "KW_CASE", "KW_CAST", "KW_CEIL", "KW_CHAR", 
        "KW_CHARACTER", "KW_CHECK", "KW_CLOB", "KW_CLOSE", "KW_CLUSTER", 
        "KW_CLUSTERED", "KW_COALESCE", "KW_COLLATE", "KW_COLLECT", "KW_COLUMN", 
        "KW_COMMIT", "KW_CONNECT", "KW_CONSTRAINT", "KW_CONTAINS", "KW_CONVERT", 
        "KW_COUNT", "KW_CURRENT_TIMESTAMP", "KW_CREATE", "KW_CROSS", "KW_CUBE", 
        "KW_CUME_DIST", "KW_CURRENT", "KW_CURSOR", "KW_CYCLE", "KW_COLLECTION", 
        "KW_DATE", "KW_DATETIME", "KW_DAY", "KW_DEC", "KW_DECIMAL", "KW_DECLARE", 
        "KW_DEFAULT", "KW_DEFINE", "KW_DELETE", "KW_DELIMITED", "KW_DESCRIBE", 
        "KW_DENSE_RANK", "KW_DISTINCT", "KW_DIRECTORY", "KW_DISTRIBUTED", 
        "KW_DISTRIBUTE", "KW_DOUBLE", "KW_DROP", "KW_EACH", "KW_ELSE", "KW_END", 
        "KW_EQUALS", "KW_ESCAPE", "KW_ESCAPED", "KW_EXCEPT", "KW_EXECUTE", 
        "KW_EXISTS", "KW_EXPLAIN", "KW_EXPLODE", "KW_EXPLODE_OUTER", "KW_EXTERNAL", 
        "KW_EXTRACT", "KW_FIRST_VALUE", "KW_FALSE", "KW_FLOAT", "KW_FIELDS", 
        "KW_FOR", "KW_FROM", "KW_FROM_UNIXTIME", "KW_FULL", "KW_FUNCTION", 
        "KW_GLOBAL", "KW_GRANT", "KW_GROUP", "KW_GROUPING", "KW_GROUPS", 
        "KW_HASH", "KW_HAVING", "KW_HOUR", "KW_IMPORT", "KW_IN", "KW_INCLUDING", 
        "KW_INPUTFORMAT", "KW_INNER", "KW_INOUT", "KW_INSERT", "KW_INT", 
        "KW_INTEGER", "KW_INTERSECT", "KW_INTERVAL", "KW_INTO", "KW_INPATH", 
        "KW_INLINE", "KW_INLINE_OUTER", "KW_ITEMS", "KW_IS", "KW_JOIN", 
        "KW_JSON_TUPLE", "KW_LAG", "KW_LANGUAGE", "KW_LATERAL", "KW_LAST_VALUE", 
        "KW_LEAD", "KW_LEADING", "KW_LEFT", "KW_LIKE", "KW_LINES", "KW_LIMIT", 
        "KW_LOCAL", "KW_LOCALTIMESTAMP", "KW_MATCH", "KW_MATCH_RECOGNIZE", 
        "KW_MEASURES", "KW_MERGE", "KW_METADATA", "KW_MINUS", "KW_MINUTE", 
        "KW_MODIFIES", "KW_MODULE", "KW_MONTH", "KW_MULTISET", "KW_NATURAL", 
        "KW_NEXT", "KW_NO", "KW_NONE", "KW_NOT", "KW_NTILE", "KW_NTH_VALUE", 
        "KW_NULL", "KW_NUMERIC", "KW_OF", "KW_OFFSET", "KW_ON", "KW_ONE", 
        "KW_OR", "KW_ORDER", "KW_OUT", "KW_OUTER", "KW_OUTPUTFORMAT", "KW_OVER", 
        "KW_OVERLAY", "KW_PARSE_URL", "KW_PARTITION", "KW_PATTERN", "KW_PER", 
        "KW_PERCENT", "KW_PERCENT_RANK", "KW_PERCENTILE_CONT", "KW_PERCENTILE_DISC", 
        "KW_PERIOD", "KW_PIVOT", "KW_POSITION", "KW_POWER", "KW_POSEXPLODE", 
        "KW_POSEXPLODE_OUTER", "KW_PRIMARY", "KW_PURGE", "KW_RANGE", "KW_RECORDWRITER", 
        "KW_ROW_NUMBER", "KW_RANK", "KW_REGEXP", "KW_RESET", "KW_REVOKE", 
        "KW_REPAIR", "KW_RIGHT", "KW_RLIKE", "KW_ROLLBACK", "KW_ROLLUP", 
        "KW_ROW", "KW_ROWS", "KW_SECOND", "KW_SELECT", "KW_SEMI", "KW_SET", 
        "KW_SERDE", "KW_SHOW", "KW_SIMILAR", "KW_SKIP", "KW_STORED", "KW_SORTED", 
        "KW_SMALLINT", "KW_STACK", "KW_START", "KW_STATIC", "KW_STRUCT", 
        "KW_SORT", "KW_SUBSTRING", "KW_SUM", "KW_SYMMETRIC", "KW_SYSTEM", 
        "KW_SYSTEM_TIME", "KW_SYSTEM_USER", "KW_TABLE", "KW_TBLPROPERTIES", 
        "KW_TABLESAMPLE", "KW_TERMINATED", "KW_THEN", "KW_TIME", "KW_TIMESTAMP", 
        "KW_TIMESTAMP_3", "KW_TIMESTAMP_6", "KW_TIMESTAMP_9", "KW_TINYINT", 
        "KW_TO", "KW_TRAILING", "KW_TRUE", "KW_TRUNCATE", "KW_UNION", "KW_UNIQUE", 
        "KW_UNKNOWN", "KW_UNSET", "KW_UNPIVOT", "KW_UPPER", "KW_UPSERT", 
        "KW_USER", "KW_USING", "KW_VALUE", "KW_VALUES", "KW_VARBINARY", 
        "KW_VARCHAR", "KW_WHEN", "KW_WHERE", "KW_WINDOW", "KW_WITH", "KW_WITHIN", 
        "KW_WITHOUT", "KW_YEAR", "KW_MATERIALIZED", "KW_FRESHNESS", "KW_REFRESH_MODE", 
        "KW_RECOVER", "KW_CONTINUOUS", "KW_SUSPEND", "KW_RESUME", "KW_REFRESH", 
        "BIT_NOT_OP", "BIT_OR_OP", "BIT_AND_OP", "BIT_XOR_OP", "EQUAL_SYMBOL", 
        "GREATER_SYMBOL", "LESS_SYMBOL", "EXCLAMATION_SYMBOL", "DOT", "LS_BRACKET", 
        "RS_BRACKET", "LR_BRACKET", "RR_BRACKET", "LB_BRACKET", "RB_BRACKET", 
        "COMMA", "SEMICOLON", "AT_SIGN", "DOLLAR", "SINGLE_QUOTE_SYMB", 
        "DOUBLE_QUOTE_SYMB", "REVERSE_QUOTE_SYMB", "COLON_SYMB", "ASTERISK_SIGN", 
        "UNDERLINE_SIGN", "HYPNEN_SIGN", "ADD_SIGN", "PENCENT_SIGN", "DOUBLE_VERTICAL_SIGN", 
        "DOUBLE_HYPNEN_SIGN", "SLASH_SIGN", "QUESTION_MARK_SIGN", "DOUBLE_RIGHT_ARROW", 
        "STRING_LITERAL", "DIG_LITERAL", "REAL_LITERAL", "ID_LITERAL"
    ];
    public static readonly ruleNames = [
        "statement", "sqlStatements", "emptyStatement", "createStatement", 
        "createTable", "simpleCreateTable", "simpleCreateTableNoSortElement", 
        "location", "sortedBy", "usingCreate", "tblProperties", "defaultColumnUsing", 
        "defaultColumnUsingNoSortElement", "columnUsing", "columnUsingNoSortElement", 
        "usingByQuery", "usingByQueryNoSortElement", "intoBuckets", "hiveFormatpartitionDefinition", 
        "rowFormatSerde", "fieldsTerminatedBy", "storedAs", "storedAsInputformat", 
        "outputformat", "rowFormatDelimted", "columnsBody", "createCustomSerde", 
        "createCustomSerdeNoSortElement", "createCustomSerdeExternal", "createCustomSerdeExternalNoSortElement", 
        "createTableAsSelect", "createMaterializedTableAsSelect", "createMaterializedTableAsSelectNoSortElement", 
        "usingClause", "jarFileName", "filePath", "ifExistsPart", "columnPosition", 
        "renameDefinition", "setKeyValueDefinition", "addConstraint", "dropConstraint", 
        "addUnique", "notForced", "insertStatement", "insertSimpleStatement", 
        "insertPartitionDefinition", "queryStatement", "withClause", "valuesCaluse", 
        "inlineBody", "withItem", "withItemName", "selectClause", "filterPart", 
        "overWindowItem", "overClause", "windowFunctioPart", "windowFunctionName", 
        "analyticFunction", "rangkingFunction", "fromClause", "windowFrameForWindowsQuery", 
        "frameExpession", "tableExpression", "tvfClause", "rangeClause", 
        "viewReference", "pivotReference", "tableReference", "tablePrimary", 
        "funtionBody", "unpivotBody", "pivotBody", "expressionAsAlias", 
        "expressionAsAliasList", "systemTimePeriod", "dateTimeExpression", 
        "inlineDataValueClause", "windowTVFClause", "windowTVFExpression", 
        "windowTVFName", "rowFormatDelimited", "hiveSerde", "usingAsColumnPart", 
        "hiveSerdePart", "tableCanHasKeyPropertyList", "sparkRecordWriterPart", 
        "windowTVFParam", "timeIntervalParamName", "columnDescriptor", "joinCondition", 
        "whereClause", "samplingQueries", "someByClause", "clusterByClause", 
        "clusteredByClause", "distributeByClause", "groupByClause", "groupItemDefinition", 
        "groupingSet", "groupingSets", "groupingSetsNotionName", "groupWindowFunction", 
        "groupWindowFunctionName", "timeAttrColumn", "havingClause", "windowClause", 
        "namedWindow", "windowSpec", "matchRecognizeClause", "orderByCaluse", 
        "sortByCaluse", "orderItemDefinition", "limitClause", "offsetClause", 
        "partitionByClause", "quantifiers", "measuresClause", "patternDefinition", 
        "patternVariable", "outputMode", "afterMatchStrategy", "patternVariablesDefinition", 
        "windowFrame", "frameBound", "withinClause", "selfDefinitionClause", 
        "partitionDefinition", "transformList", "transform", "transformArgument", 
        "likeDefinition", "distribution", "using", "likeOption", "columnOptionDefinition", 
        "physicalColumnDefinitionList", "physicalColumnDefinition", "computedColumnExpression", 
        "watermarkDefinition", "tableConstraint", "constraintName", "valuesDefinition", 
        "valuesRowDefinition", "lengthOneDimension", "lengthTwoOptionalDimension", 
        "lengthTwoStringDimension", "lengthOneTypeDimension", "mapTypeDimension", 
        "rowTypeDimension", "structTypeDimension", "columnConstraint", "commentSpec", 
        "metadataColumnDefinition", "metadataKey", "computedColumnDefinition", 
        "columnName", "columnNameList", "columnType", "expression", "booleanExpression", 
        "predicate", "likePredicate", "valueExpression", "primaryExpression", 
        "complexDataTypeExpression", "arrayExpression", "structExpression", 
        "rowExpression", "mapExpression", "dataTypeExpression", "sqlSimpleType", 
        "functionName", "functionParam", "filterClause", "correlationName", 
        "qualifiedName", "timeIntervalExpression", "errorCapturingMultiUnitsInterval", 
        "multiUnitsInterval", "errorCapturingUnitToUnitInterval", "unitToUnitInterval", 
        "intervalValue", "columnAlias", "tableAlias", "anyAlias", "errorCapturingIdentifier", 
        "errorCapturingIdentifierExtra", "identifierList", "identifierSeq", 
        "identifier", "unquotedAnyString", "refVar", "unquotedIdentifier", 
        "whenClause", "catalogPath", "databasePath", "databasePathCreate", 
        "tablePathCreate", "tablePath", "anonymousWindowsName", "uid", "withOption", 
        "ifNotExists", "ifExists", "tablePropertyList", "tableProperty", 
        "tablePropertyKey", "propertyName", "tablePropertyValue", "comparisonOperator", 
        "constant", "timePointLiteral", "stringLiteral", "decimalLiteral", 
        "booleanLiteral", "setQuantifier", "timePointUnit", "timeIntervalUnit", 
        "reservedKeywordsUsedAsFuncParam", "reservedKeywordsUsedAsFuncName", 
        "nonReservedKeywords", "sqlStatement", "selectStatement", "projectItemDefinition", 
        "hiveOverWindowItem", "selectStatementPlus", "plusStatement", "describeStatement", 
        "explainStatement", "explainDetails", "explainDetail", "useStatement", 
        "useModuleStatement", "showStatement", "loadStatement", "unloadStatement", 
        "setStatement", "resetStatement", "fileStatement", "refreshStatement", 
        "analyzeStatement", "analyzePartitionDefinition", "createCatalog", 
        "createDatabase", "createView", "createFunction", "replaceTable", 
        "cacheStatement", "alterMaterializedTable", "alterTable", "alterTableBody", 
        "setPart", "dropCatalog", "dropTable", "dropDatabase", "dropView", 
        "dropFunction", "truncateTable", "repairTable", "alertView", "alterDatabase", 
        "alterFunction", "inlineTableClause", "showTableStatementBody", 
        "showFunctionStatementBody", "transformClause", "insertSparkDirectoryStatement", 
        "insertSparkDirectoryBody", "insertHiveDirectoryStatement", "hiveRowFormatPart", 
        "insertMulStatementCompatibility", "insertMulStatement", "insertFromTable", 
        "createExternalTable", "createExternalTableNoSortElement", "hiveFormatCreate", 
        "hiveFormatCreateNoSortElement",
    ];

    public get grammarFileName(): string { return "SparkSQL.g4"; }
    public get literalNames(): (string | null)[] { return SparkSQLParser.literalNames; }
    public get symbolicNames(): (string | null)[] { return SparkSQLParser.symbolicNames; }
    public get ruleNames(): string[] { return SparkSQLParser.ruleNames; }
    public get serializedATN(): number[] { return SparkSQLParser._serializedATN; }

    protected createFailedPredicateException(predicate?: string, message?: string): antlr.FailedPredicateException {
        return new antlr.FailedPredicateException(this, predicate, message);
    }

    public constructor(input: antlr.TokenStream) {
        super(input);
        this.interpreter = new antlr.ParserATNSimulator(this, SparkSQLParser._ATN, SparkSQLParser.decisionsToDFA, new antlr.PredictionContextCache());
    }
    public statement(): StatementContext {
        let localContext = new StatementContext(this.context, this.state);
        this.enterRule(localContext, 0, SparkSQLParser.RULE_statement);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 558;
            this.sqlStatements();
            this.state = 559;
            this.match(SparkSQLParser.EOF);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public sqlStatements(): SqlStatementsContext {
        let localContext = new SqlStatementsContext(this.context, this.state);
        this.enterRule(localContext, 2, SparkSQLParser.RULE_sqlStatements);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 565;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (((((_la - 6)) & ~0x1F) === 0 && ((1 << (_la - 6)) & 2147488009) !== 0) || _la === 87 || _la === 88 || _la === 136 || _la === 138 || ((((_la - 183)) & ~0x1F) === 0 && ((1 << (_la - 183)) & 16777257) !== 0) || ((((_la - 251)) & ~0x1F) === 0 && ((1 << (_la - 251)) & 33816577) !== 0) || ((((_la - 284)) & ~0x1F) === 0 && ((1 << (_la - 284)) & 1073745925) !== 0) || ((((_la - 391)) & ~0x1F) === 0 && ((1 << (_la - 391)) & 21509) !== 0) || ((((_la - 436)) & ~0x1F) === 0 && ((1 << (_la - 436)) & 268566529) !== 0) || _la === 476 || _la === 481) {
                {
                this.state = 563;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 0, this.context) ) {
                case 1:
                    {
                    this.state = 561;
                    this.sqlStatement();
                    }
                    break;
                case 2:
                    {
                    this.state = 562;
                    this.emptyStatement();
                    }
                    break;
                }
                }
                this.state = 567;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public emptyStatement(): EmptyStatementContext {
        let localContext = new EmptyStatementContext(this.context, this.state);
        this.enterRule(localContext, 4, SparkSQLParser.RULE_emptyStatement);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 568;
            this.match(SparkSQLParser.SEMICOLON);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createStatement(): CreateStatementContext {
        let localContext = new CreateStatementContext(this.context, this.state);
        this.enterRule(localContext, 6, SparkSQLParser.RULE_createStatement);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 570;
            this.createTable();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createTable(): CreateTableContext {
        let localContext = new CreateTableContext(this.context, this.state);
        this.enterRule(localContext, 8, SparkSQLParser.RULE_createTable);
        try {
            this.state = 578;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 2, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 572;
                this.simpleCreateTable();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 573;
                this.createTableAsSelect();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 574;
                this.createMaterializedTableAsSelect();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 575;
                this.createCustomSerde();
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 576;
                this.createCustomSerdeExternal();
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 577;
                this.usingCreate();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public simpleCreateTable(): SimpleCreateTableContext {
        let localContext = new SimpleCreateTableContext(this.context, this.state);
        this.enterRule(localContext, 10, SparkSQLParser.RULE_simpleCreateTable);
        let _la: number;
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 580;
            this.match(SparkSQLParser.KW_CREATE);
            this.state = 582;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 172) {
                {
                this.state = 581;
                this.match(SparkSQLParser.KW_TEMPORARY);
                }
            }

            this.state = 584;
            this.match(SparkSQLParser.KW_TABLE);
            this.state = 586;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 4, this.context) ) {
            case 1:
                {
                this.state = 585;
                this.ifNotExists();
                }
                break;
            }
            this.state = 588;
            this.tablePathCreate();
            this.state = 592;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 5, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 589;
                    this.simpleCreateTableNoSortElement();
                    }
                    }
                }
                this.state = 594;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 5, this.context);
            }
            this.state = 598;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case SparkSQLParser.LR_BRACKET:
                {
                this.state = 595;
                this.columnsBody();
                }
                break;
            case SparkSQLParser.KW_LIKE:
                {
                {
                this.state = 596;
                this.match(SparkSQLParser.KW_LIKE);
                this.state = 597;
                this.tablePath();
                }
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            this.state = 603;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 89 || _la === 110 || _la === 238 || _la === 239 || ((((_la - 273)) & ~0x1F) === 0 && ((1 << (_la - 273)) & 538968067) !== 0) || ((((_la - 319)) & ~0x1F) === 0 && ((1 << (_la - 319)) & 98305) !== 0) || _la === 357 || ((((_la - 398)) & ~0x1F) === 0 && ((1 << (_la - 398)) & 33557505) !== 0) || _la === 445 || _la === 453) {
                {
                {
                this.state = 600;
                this.simpleCreateTableNoSortElement();
                }
                }
                this.state = 605;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public simpleCreateTableNoSortElement(): SimpleCreateTableNoSortElementContext {
        let localContext = new SimpleCreateTableNoSortElementContext(this.context, this.state);
        this.enterRule(localContext, 12, SparkSQLParser.RULE_simpleCreateTableNoSortElement);
        try {
            this.state = 620;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 8, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 606;
                this.partitionDefinition();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 607;
                this.withOption();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 608;
                this.likeDefinition();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 609;
                this.distribution();
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 610;
                this.someByClause();
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 611;
                this.intoBuckets();
                }
                break;
            case 7:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 612;
                this.storedAs();
                }
                break;
            case 8:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 613;
                this.hiveFormatpartitionDefinition();
                }
                break;
            case 9:
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 614;
                this.sortedBy();
                }
                break;
            case 10:
                this.enterOuterAlt(localContext, 10);
                {
                this.state = 615;
                this.rowFormatDelimited();
                }
                break;
            case 11:
                this.enterOuterAlt(localContext, 11);
                {
                this.state = 616;
                this.fieldsTerminatedBy();
                }
                break;
            case 12:
                this.enterOuterAlt(localContext, 12);
                {
                this.state = 617;
                this.using();
                }
                break;
            case 13:
                this.enterOuterAlt(localContext, 13);
                {
                this.state = 618;
                this.location();
                }
                break;
            case 14:
                this.enterOuterAlt(localContext, 14);
                {
                this.state = 619;
                this.tblProperties();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public location(): LocationContext {
        let localContext = new LocationContext(this.context, this.state);
        this.enterRule(localContext, 14, SparkSQLParser.RULE_location);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 622;
            this.match(SparkSQLParser.KW_LOCATION);
            this.state = 623;
            this.filePath();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public sortedBy(): SortedByContext {
        let localContext = new SortedByContext(this.context, this.state);
        this.enterRule(localContext, 16, SparkSQLParser.RULE_sortedBy);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 625;
            this.match(SparkSQLParser.KW_SORTED);
            this.state = 626;
            this.match(SparkSQLParser.KW_BY);
            this.state = 627;
            this.match(SparkSQLParser.LR_BRACKET);
            this.state = 628;
            this.identifier();
            this.state = 630;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 10 || _la === 37) {
                {
                this.state = 629;
                _la = this.tokenStream.LA(1);
                if(!(_la === 10 || _la === 37)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
            }

            this.state = 632;
            this.match(SparkSQLParser.RR_BRACKET);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public usingCreate(): UsingCreateContext {
        let localContext = new UsingCreateContext(this.context, this.state);
        this.enterRule(localContext, 18, SparkSQLParser.RULE_usingCreate);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 634;
            this.match(SparkSQLParser.KW_CREATE);
            this.state = 635;
            this.match(SparkSQLParser.KW_TABLE);
            this.state = 637;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 10, this.context) ) {
            case 1:
                {
                this.state = 636;
                this.ifNotExists();
                }
                break;
            }
            this.state = 639;
            this.tablePathCreate();
            this.state = 643;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 11, this.context) ) {
            case 1:
                {
                this.state = 640;
                this.columnUsing();
                }
                break;
            case 2:
                {
                this.state = 641;
                this.usingByQuery();
                }
                break;
            case 3:
                {
                this.state = 642;
                this.defaultColumnUsing();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tblProperties(): TblPropertiesContext {
        let localContext = new TblPropertiesContext(this.context, this.state);
        this.enterRule(localContext, 20, SparkSQLParser.RULE_tblProperties);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 645;
            this.match(SparkSQLParser.KW_TBLPROPERTIES);
            this.state = 646;
            this.tablePropertyList();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public defaultColumnUsing(): DefaultColumnUsingContext {
        let localContext = new DefaultColumnUsingContext(this.context, this.state);
        this.enterRule(localContext, 22, SparkSQLParser.RULE_defaultColumnUsing);
        let _la: number;
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 648;
            this.using();
            this.state = 652;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 12, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 649;
                    this.defaultColumnUsingNoSortElement();
                    }
                    }
                }
                this.state = 654;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 12, this.context);
            }
            {
            this.state = 656;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 212) {
                {
                this.state = 655;
                this.match(SparkSQLParser.KW_AS);
                }
            }

            this.state = 658;
            this.queryStatement(0);
            }
            this.state = 663;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 23 || _la === 105 || _la === 110 || _la === 238 || _la === 239 || _la === 274 || _la === 302 || _la === 319 || _la === 423 || _la === 453) {
                {
                {
                this.state = 660;
                this.defaultColumnUsingNoSortElement();
                }
                }
                this.state = 665;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public defaultColumnUsingNoSortElement(): DefaultColumnUsingNoSortElementContext {
        let localContext = new DefaultColumnUsingNoSortElementContext(this.context, this.state);
        this.enterRule(localContext, 24, SparkSQLParser.RULE_defaultColumnUsingNoSortElement);
        try {
            this.state = 679;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case SparkSQLParser.KW_PARTITIONED:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 666;
                this.partitionDefinition();
                }
                break;
            case SparkSQLParser.KW_OPTIONS:
                this.enterOuterAlt(localContext, 2);
                {
                {
                this.state = 667;
                this.match(SparkSQLParser.KW_OPTIONS);
                this.state = 668;
                this.tablePropertyList();
                }
                }
                break;
            case SparkSQLParser.KW_TBLPROPERTIES:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 669;
                this.tblProperties();
                }
                break;
            case SparkSQLParser.KW_CLUSTER:
            case SparkSQLParser.KW_CLUSTERED:
            case SparkSQLParser.KW_DISTRIBUTE:
            case SparkSQLParser.KW_GROUP:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 670;
                this.someByClause();
                }
                break;
            case SparkSQLParser.KW_INTO:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 671;
                this.intoBuckets();
                }
                break;
            case SparkSQLParser.KW_WITH:
                this.enterOuterAlt(localContext, 6);
                {
                {
                this.state = 672;
                this.match(SparkSQLParser.KW_WITH);
                this.state = 673;
                this.tableAlias();
                this.state = 674;
                this.match(SparkSQLParser.LB_BRACKET);
                this.state = 675;
                this.queryStatement(0);
                this.state = 676;
                this.match(SparkSQLParser.RR_BRACKET);
                }
                }
                break;
            case SparkSQLParser.KW_COMMENT:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 678;
                this.commentSpec();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public columnUsing(): ColumnUsingContext {
        let localContext = new ColumnUsingContext(this.context, this.state);
        this.enterRule(localContext, 26, SparkSQLParser.RULE_columnUsing);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            {
            this.state = 681;
            this.columnsBody();
            this.state = 682;
            this.using();
            }
            this.state = 687;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 23 || _la === 105 || _la === 110 || _la === 238 || _la === 239 || _la === 274 || _la === 302 || _la === 319 || _la === 423) {
                {
                {
                this.state = 684;
                this.columnUsingNoSortElement();
                }
                }
                this.state = 689;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public columnUsingNoSortElement(): ColumnUsingNoSortElementContext {
        let localContext = new ColumnUsingNoSortElementContext(this.context, this.state);
        this.enterRule(localContext, 28, SparkSQLParser.RULE_columnUsingNoSortElement);
        try {
            this.state = 697;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case SparkSQLParser.KW_PARTITIONED:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 690;
                this.partitionDefinition();
                }
                break;
            case SparkSQLParser.KW_OPTIONS:
                this.enterOuterAlt(localContext, 2);
                {
                {
                this.state = 691;
                this.match(SparkSQLParser.KW_OPTIONS);
                this.state = 692;
                this.tablePropertyList();
                }
                }
                break;
            case SparkSQLParser.KW_TBLPROPERTIES:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 693;
                this.tblProperties();
                }
                break;
            case SparkSQLParser.KW_CLUSTER:
            case SparkSQLParser.KW_CLUSTERED:
            case SparkSQLParser.KW_DISTRIBUTE:
            case SparkSQLParser.KW_GROUP:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 694;
                this.someByClause();
                }
                break;
            case SparkSQLParser.KW_INTO:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 695;
                this.intoBuckets();
                }
                break;
            case SparkSQLParser.KW_COMMENT:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 696;
                this.commentSpec();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public usingByQuery(): UsingByQueryContext {
        let localContext = new UsingByQueryContext(this.context, this.state);
        this.enterRule(localContext, 30, SparkSQLParser.RULE_usingByQuery);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            {
            this.state = 699;
            this.using();
            this.state = 700;
            this.match(SparkSQLParser.KW_AS);
            this.state = 701;
            this.queryStatement(0);
            }
            this.state = 706;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 23 || _la === 105 || _la === 110 || _la === 238 || _la === 239 || _la === 274 || _la === 302 || _la === 319 || _la === 423) {
                {
                {
                this.state = 703;
                this.usingByQueryNoSortElement();
                }
                }
                this.state = 708;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public usingByQueryNoSortElement(): UsingByQueryNoSortElementContext {
        let localContext = new UsingByQueryNoSortElementContext(this.context, this.state);
        this.enterRule(localContext, 32, SparkSQLParser.RULE_usingByQueryNoSortElement);
        try {
            this.state = 716;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case SparkSQLParser.KW_PARTITIONED:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 709;
                this.partitionDefinition();
                }
                break;
            case SparkSQLParser.KW_OPTIONS:
                this.enterOuterAlt(localContext, 2);
                {
                {
                this.state = 710;
                this.match(SparkSQLParser.KW_OPTIONS);
                this.state = 711;
                this.tablePropertyList();
                }
                }
                break;
            case SparkSQLParser.KW_TBLPROPERTIES:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 712;
                this.tblProperties();
                }
                break;
            case SparkSQLParser.KW_CLUSTER:
            case SparkSQLParser.KW_CLUSTERED:
            case SparkSQLParser.KW_DISTRIBUTE:
            case SparkSQLParser.KW_GROUP:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 713;
                this.someByClause();
                }
                break;
            case SparkSQLParser.KW_INTO:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 714;
                this.intoBuckets();
                }
                break;
            case SparkSQLParser.KW_COMMENT:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 715;
                this.commentSpec();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public intoBuckets(): IntoBucketsContext {
        let localContext = new IntoBucketsContext(this.context, this.state);
        this.enterRule(localContext, 34, SparkSQLParser.RULE_intoBuckets);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 718;
            this.match(SparkSQLParser.KW_INTO);
            this.state = 719;
            this.match(SparkSQLParser.DIG_LITERAL);
            this.state = 720;
            this.match(SparkSQLParser.KW_BUCKETS);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public hiveFormatpartitionDefinition(): HiveFormatpartitionDefinitionContext {
        let localContext = new HiveFormatpartitionDefinitionContext(this.context, this.state);
        this.enterRule(localContext, 36, SparkSQLParser.RULE_hiveFormatpartitionDefinition);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 722;
            this.match(SparkSQLParser.KW_PARTITIONED);
            this.state = 723;
            this.match(SparkSQLParser.KW_BY);
            this.state = 724;
            this.match(SparkSQLParser.LR_BRACKET);
            this.state = 725;
            this.match(SparkSQLParser.ID_LITERAL);
            this.state = 727;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 12 || _la === 90 || _la === 133 || _la === 157 || _la === 175 || _la === 176 || _la === 218 || _la === 222 || ((((_la - 259)) & ~0x1F) === 0 && ((1 << (_la - 259)) & 65553) !== 0) || ((((_la - 293)) & ~0x1F) === 0 && ((1 << (_la - 293)) & 12582913) !== 0) || _la === 358 || ((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & 4587521) !== 0)) {
                {
                this.state = 726;
                this.sqlSimpleType();
                }
            }

            this.state = 736;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 480) {
                {
                {
                this.state = 729;
                this.match(SparkSQLParser.COMMA);
                this.state = 730;
                this.match(SparkSQLParser.ID_LITERAL);
                this.state = 732;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 12 || _la === 90 || _la === 133 || _la === 157 || _la === 175 || _la === 176 || _la === 218 || _la === 222 || ((((_la - 259)) & ~0x1F) === 0 && ((1 << (_la - 259)) & 65553) !== 0) || ((((_la - 293)) & ~0x1F) === 0 && ((1 << (_la - 293)) & 12582913) !== 0) || _la === 358 || ((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & 4587521) !== 0)) {
                    {
                    this.state = 731;
                    this.sqlSimpleType();
                    }
                }

                }
                }
                this.state = 738;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 739;
            this.match(SparkSQLParser.RR_BRACKET);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public rowFormatSerde(): RowFormatSerdeContext {
        let localContext = new RowFormatSerdeContext(this.context, this.state);
        this.enterRule(localContext, 38, SparkSQLParser.RULE_rowFormatSerde);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 741;
            this.match(SparkSQLParser.KW_ROW);
            this.state = 742;
            this.match(SparkSQLParser.KW_FORMAT);
            this.state = 743;
            this.match(SparkSQLParser.KW_SERDE);
            this.state = 744;
            this.stringLiteral();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public fieldsTerminatedBy(): FieldsTerminatedByContext {
        let localContext = new FieldsTerminatedByContext(this.context, this.state);
        this.enterRule(localContext, 40, SparkSQLParser.RULE_fieldsTerminatedBy);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 746;
            this.match(SparkSQLParser.KW_FIELDS);
            this.state = 747;
            this.match(SparkSQLParser.KW_TERMINATED);
            this.state = 748;
            this.match(SparkSQLParser.KW_BY);
            this.state = 749;
            this.stringLiteral();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public storedAs(): StoredAsContext {
        let localContext = new StoredAsContext(this.context, this.state);
        this.enterRule(localContext, 42, SparkSQLParser.RULE_storedAs);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 751;
            this.match(SparkSQLParser.KW_STORED);
            this.state = 752;
            this.match(SparkSQLParser.KW_AS);
            this.state = 754;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 23, this.context) ) {
            case 1:
                {
                this.state = 753;
                this.identifier();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public storedAsInputformat(): StoredAsInputformatContext {
        let localContext = new StoredAsInputformatContext(this.context, this.state);
        this.enterRule(localContext, 44, SparkSQLParser.RULE_storedAsInputformat);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 756;
            this.match(SparkSQLParser.KW_STORED);
            this.state = 757;
            this.match(SparkSQLParser.KW_AS);
            this.state = 758;
            this.match(SparkSQLParser.KW_INPUTFORMAT);
            this.state = 760;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 24, this.context) ) {
            case 1:
                {
                this.state = 759;
                this.identifier();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public outputformat(): OutputformatContext {
        let localContext = new OutputformatContext(this.context, this.state);
        this.enterRule(localContext, 46, SparkSQLParser.RULE_outputformat);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 762;
            this.match(SparkSQLParser.KW_OUTPUTFORMAT);
            this.state = 764;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 25, this.context) ) {
            case 1:
                {
                this.state = 763;
                this.identifier();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public rowFormatDelimted(): RowFormatDelimtedContext {
        let localContext = new RowFormatDelimtedContext(this.context, this.state);
        this.enterRule(localContext, 48, SparkSQLParser.RULE_rowFormatDelimted);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 766;
            this.match(SparkSQLParser.KW_ROW);
            this.state = 767;
            this.match(SparkSQLParser.KW_FORMAT);
            this.state = 768;
            this.match(SparkSQLParser.KW_DELIMITED);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public columnsBody(): ColumnsBodyContext {
        let localContext = new ColumnsBodyContext(this.context, this.state);
        this.enterRule(localContext, 50, SparkSQLParser.RULE_columnsBody);
        let _la: number;
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 770;
            this.match(SparkSQLParser.LR_BRACKET);
            this.state = 771;
            this.columnOptionDefinition();
            this.state = 773;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 23) {
                {
                this.state = 772;
                this.commentSpec();
                }
            }

            this.state = 782;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 28, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 775;
                    this.match(SparkSQLParser.COMMA);
                    this.state = 776;
                    this.columnOptionDefinition();
                    this.state = 778;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 23) {
                        {
                        this.state = 777;
                        this.commentSpec();
                        }
                    }

                    }
                    }
                }
                this.state = 784;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 28, this.context);
            }
            this.state = 790;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 30, this.context) ) {
            case 1:
                {
                this.state = 785;
                this.match(SparkSQLParser.COMMA);
                this.state = 786;
                this.watermarkDefinition();
                this.state = 788;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 23) {
                    {
                    this.state = 787;
                    this.commentSpec();
                    }
                }

                }
                break;
            }
            this.state = 797;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 32, this.context) ) {
            case 1:
                {
                this.state = 792;
                this.match(SparkSQLParser.COMMA);
                this.state = 793;
                this.tableConstraint();
                this.state = 795;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 23) {
                    {
                    this.state = 794;
                    this.commentSpec();
                    }
                }

                }
                break;
            }
            this.state = 804;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 480) {
                {
                this.state = 799;
                this.match(SparkSQLParser.COMMA);
                this.state = 800;
                this.selfDefinitionClause();
                this.state = 802;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 23) {
                    {
                    this.state = 801;
                    this.commentSpec();
                    }
                }

                }
            }

            this.state = 806;
            this.match(SparkSQLParser.RR_BRACKET);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createCustomSerde(): CreateCustomSerdeContext {
        let localContext = new CreateCustomSerdeContext(this.context, this.state);
        this.enterRule(localContext, 52, SparkSQLParser.RULE_createCustomSerde);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 808;
            this.match(SparkSQLParser.KW_CREATE);
            this.state = 810;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 172) {
                {
                this.state = 809;
                this.match(SparkSQLParser.KW_TEMPORARY);
                }
            }

            this.state = 812;
            this.match(SparkSQLParser.KW_TABLE);
            this.state = 814;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 36, this.context) ) {
            case 1:
                {
                this.state = 813;
                this.ifNotExists();
                }
                break;
            }
            this.state = 816;
            this.tablePathCreate();
            this.state = 820;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 23 || _la === 110 || _la === 273 || _la === 334 || _la === 453 || _la === 476) {
                {
                {
                this.state = 817;
                this.createCustomSerdeNoSortElement();
                }
                }
                this.state = 822;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 823;
            this.match(SparkSQLParser.KW_ROW);
            this.state = 824;
            this.match(SparkSQLParser.KW_FORMAT);
            this.state = 825;
            this.match(SparkSQLParser.KW_SERDE);
            this.state = 826;
            this.tablePropertyKey();
            this.state = 830;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 23 || _la === 110 || _la === 273 || _la === 334 || _la === 453 || _la === 476) {
                {
                {
                this.state = 827;
                this.createCustomSerdeNoSortElement();
                }
                }
                this.state = 832;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 833;
            this.match(SparkSQLParser.KW_SORTED);
            this.state = 834;
            this.match(SparkSQLParser.KW_AS);
            this.state = 835;
            this.match(SparkSQLParser.KW_INPUTFORMAT);
            this.state = 836;
            this.tablePropertyKey();
            this.state = 840;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 23 || _la === 110 || _la === 273 || _la === 334 || _la === 453 || _la === 476) {
                {
                {
                this.state = 837;
                this.createCustomSerdeNoSortElement();
                }
                }
                this.state = 842;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 843;
            this.match(SparkSQLParser.KW_OUTPUTFORMAT);
            this.state = 844;
            this.tablePropertyKey();
            this.state = 848;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 23 || _la === 110 || _la === 273 || _la === 334 || _la === 453 || _la === 476) {
                {
                {
                this.state = 845;
                this.createCustomSerdeNoSortElement();
                }
                }
                this.state = 850;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 851;
            this.tblProperties();
            this.state = 855;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 23 || _la === 110 || _la === 273 || _la === 334 || _la === 453 || _la === 476) {
                {
                {
                this.state = 852;
                this.createCustomSerdeNoSortElement();
                }
                }
                this.state = 857;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createCustomSerdeNoSortElement(): CreateCustomSerdeNoSortElementContext {
        let localContext = new CreateCustomSerdeNoSortElementContext(this.context, this.state);
        this.enterRule(localContext, 54, SparkSQLParser.RULE_createCustomSerdeNoSortElement);
        try {
            this.state = 864;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case SparkSQLParser.LR_BRACKET:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 858;
                this.columnsBody();
                }
                break;
            case SparkSQLParser.KW_COMMENT:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 859;
                this.commentSpec();
                }
                break;
            case SparkSQLParser.KW_PARTITIONED:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 860;
                this.partitionDefinition();
                }
                break;
            case SparkSQLParser.KW_WITH:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 861;
                this.withOption();
                }
                break;
            case SparkSQLParser.KW_LIKE:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 862;
                this.likeDefinition();
                }
                break;
            case SparkSQLParser.KW_DISTRIBUTED:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 863;
                this.distribution();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createCustomSerdeExternal(): CreateCustomSerdeExternalContext {
        let localContext = new CreateCustomSerdeExternalContext(this.context, this.state);
        this.enterRule(localContext, 56, SparkSQLParser.RULE_createCustomSerdeExternal);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 866;
            this.match(SparkSQLParser.KW_CREATE);
            this.state = 867;
            this.match(SparkSQLParser.KW_EXTERNAL);
            this.state = 868;
            this.match(SparkSQLParser.KW_TABLE);
            this.state = 870;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 43, this.context) ) {
            case 1:
                {
                this.state = 869;
                this.ifNotExists();
                }
                break;
            }
            this.state = 872;
            this.tablePathCreate();
            this.state = 876;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 23 || _la === 110 || _la === 273 || _la === 334 || _la === 423 || _la === 453) {
                {
                {
                this.state = 873;
                this.createCustomSerdeExternalNoSortElement();
                }
                }
                this.state = 878;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 879;
            this.columnsBody();
            this.state = 883;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 23 || _la === 110 || _la === 273 || _la === 334 || _la === 423 || _la === 453) {
                {
                {
                this.state = 880;
                this.createCustomSerdeExternalNoSortElement();
                }
                }
                this.state = 885;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 886;
            this.match(SparkSQLParser.KW_ROW);
            this.state = 887;
            this.match(SparkSQLParser.KW_FORMAT);
            this.state = 888;
            this.match(SparkSQLParser.KW_SERDE);
            this.state = 889;
            this.tablePropertyKey();
            this.state = 893;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 23 || _la === 110 || _la === 273 || _la === 334 || _la === 423 || _la === 453) {
                {
                {
                this.state = 890;
                this.createCustomSerdeExternalNoSortElement();
                }
                }
                this.state = 895;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 896;
            this.match(SparkSQLParser.KW_SORTED);
            this.state = 897;
            this.match(SparkSQLParser.KW_AS);
            this.state = 898;
            this.match(SparkSQLParser.KW_INPUTFORMAT);
            this.state = 899;
            this.tablePropertyKey();
            this.state = 903;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 23 || _la === 110 || _la === 273 || _la === 334 || _la === 423 || _la === 453) {
                {
                {
                this.state = 900;
                this.createCustomSerdeExternalNoSortElement();
                }
                }
                this.state = 905;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 906;
            this.match(SparkSQLParser.KW_OUTPUTFORMAT);
            this.state = 907;
            this.tablePropertyKey();
            this.state = 911;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 23 || _la === 110 || _la === 273 || _la === 334 || _la === 423 || _la === 453) {
                {
                {
                this.state = 908;
                this.createCustomSerdeExternalNoSortElement();
                }
                }
                this.state = 913;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 914;
            this.match(SparkSQLParser.KW_LOCATION);
            this.state = 915;
            this.filePath();
            this.state = 919;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 23 || _la === 110 || _la === 273 || _la === 334 || _la === 423 || _la === 453) {
                {
                {
                this.state = 916;
                this.createCustomSerdeExternalNoSortElement();
                }
                }
                this.state = 921;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createCustomSerdeExternalNoSortElement(): CreateCustomSerdeExternalNoSortElementContext {
        let localContext = new CreateCustomSerdeExternalNoSortElementContext(this.context, this.state);
        this.enterRule(localContext, 58, SparkSQLParser.RULE_createCustomSerdeExternalNoSortElement);
        try {
            this.state = 928;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case SparkSQLParser.KW_COMMENT:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 922;
                this.commentSpec();
                }
                break;
            case SparkSQLParser.KW_PARTITIONED:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 923;
                this.partitionDefinition();
                }
                break;
            case SparkSQLParser.KW_WITH:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 924;
                this.withOption();
                }
                break;
            case SparkSQLParser.KW_LIKE:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 925;
                this.likeDefinition();
                }
                break;
            case SparkSQLParser.KW_DISTRIBUTED:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 926;
                this.distribution();
                }
                break;
            case SparkSQLParser.KW_TBLPROPERTIES:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 927;
                this.tblProperties();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createTableAsSelect(): CreateTableAsSelectContext {
        let localContext = new CreateTableAsSelectContext(this.context, this.state);
        this.enterRule(localContext, 60, SparkSQLParser.RULE_createTableAsSelect);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 930;
            this.match(SparkSQLParser.KW_CREATE);
            this.state = 931;
            this.match(SparkSQLParser.KW_TABLE);
            this.state = 933;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 51, this.context) ) {
            case 1:
                {
                this.state = 932;
                this.ifNotExists();
                }
                break;
            }
            this.state = 935;
            this.tablePathCreate();
            this.state = 936;
            this.withOption();
            this.state = 939;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 212) {
                {
                this.state = 937;
                this.match(SparkSQLParser.KW_AS);
                this.state = 938;
                this.queryStatement(0);
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createMaterializedTableAsSelect(): CreateMaterializedTableAsSelectContext {
        let localContext = new CreateMaterializedTableAsSelectContext(this.context, this.state);
        this.enterRule(localContext, 62, SparkSQLParser.RULE_createMaterializedTableAsSelect);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 941;
            this.match(SparkSQLParser.KW_CREATE);
            this.state = 942;
            this.match(SparkSQLParser.KW_MATERIALIZED);
            this.state = 943;
            this.match(SparkSQLParser.KW_TABLE);
            this.state = 944;
            this.tablePathCreate();
            this.state = 948;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 110 || _la === 212 || _la === 453 || _la === 459) {
                {
                {
                this.state = 945;
                this.createMaterializedTableAsSelectNoSortElement();
                }
                }
                this.state = 950;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 951;
            this.match(SparkSQLParser.LR_BRACKET);
            this.state = 952;
            this.match(SparkSQLParser.KW_PRIMARY);
            this.state = 953;
            this.match(SparkSQLParser.KW_KEY);
            this.state = 954;
            this.match(SparkSQLParser.LR_BRACKET);
            this.state = 955;
            this.identifier();
            this.state = 960;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 480) {
                {
                {
                this.state = 956;
                this.match(SparkSQLParser.COMMA);
                this.state = 957;
                this.identifier();
                }
                }
                this.state = 962;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 963;
            this.match(SparkSQLParser.RR_BRACKET);
            this.state = 966;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 354) {
                {
                this.state = 964;
                this.match(SparkSQLParser.KW_NOT);
                this.state = 965;
                this.match(SparkSQLParser.KW_ENFORCED);
                }
            }

            this.state = 968;
            this.match(SparkSQLParser.RR_BRACKET);
            this.state = 972;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 110 || _la === 212 || _la === 453 || _la === 459) {
                {
                {
                this.state = 969;
                this.createMaterializedTableAsSelectNoSortElement();
                }
                }
                this.state = 974;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            {
            this.state = 975;
            this.match(SparkSQLParser.KW_FRESHNESS);
            this.state = 976;
            this.match(SparkSQLParser.EQUAL_SYMBOL);
            this.state = 977;
            this.match(SparkSQLParser.KW_INTERVAL);
            this.state = 978;
            this.identifier();
            this.state = 979;
            _la = this.tokenStream.LA(1);
            if(!(_la === 261 || _la === 307 || _la === 345 || _la === 400)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
            this.state = 984;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 110 || _la === 212 || _la === 453 || _la === 459) {
                {
                {
                this.state = 981;
                this.createMaterializedTableAsSelectNoSortElement();
                }
                }
                this.state = 986;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createMaterializedTableAsSelectNoSortElement(): CreateMaterializedTableAsSelectNoSortElementContext {
        let localContext = new CreateMaterializedTableAsSelectNoSortElementContext(this.context, this.state);
        this.enterRule(localContext, 64, SparkSQLParser.RULE_createMaterializedTableAsSelectNoSortElement);
        let _la: number;
        try {
            this.state = 994;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case SparkSQLParser.KW_PARTITIONED:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 987;
                this.partitionDefinition();
                }
                break;
            case SparkSQLParser.KW_WITH:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 988;
                this.withOption();
                }
                break;
            case SparkSQLParser.KW_REFRESH_MODE:
                this.enterOuterAlt(localContext, 3);
                {
                {
                this.state = 989;
                this.match(SparkSQLParser.KW_REFRESH_MODE);
                this.state = 990;
                this.match(SparkSQLParser.EQUAL_SYMBOL);
                this.state = 991;
                _la = this.tokenStream.LA(1);
                if(!(_la === 298 || _la === 461)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                }
                break;
            case SparkSQLParser.KW_AS:
                this.enterOuterAlt(localContext, 4);
                {
                {
                this.state = 992;
                this.match(SparkSQLParser.KW_AS);
                this.state = 993;
                this.queryStatement(0);
                }
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public usingClause(): UsingClauseContext {
        let localContext = new UsingClauseContext(this.context, this.state);
        this.enterRule(localContext, 66, SparkSQLParser.RULE_usingClause);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 996;
            this.match(SparkSQLParser.KW_USING);
            this.state = 997;
            this.match(SparkSQLParser.KW_JAR);
            this.state = 998;
            this.jarFileName();
            this.state = 1004;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 480) {
                {
                {
                this.state = 999;
                this.match(SparkSQLParser.COMMA);
                this.state = 1000;
                this.match(SparkSQLParser.KW_JAR);
                this.state = 1001;
                this.jarFileName();
                }
                }
                this.state = 1006;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public jarFileName(): JarFileNameContext {
        let localContext = new JarFileNameContext(this.context, this.state);
        this.enterRule(localContext, 68, SparkSQLParser.RULE_jarFileName);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1007;
            this.filePath();
            this.state = 1010;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 473) {
                {
                this.state = 1008;
                this.match(SparkSQLParser.DOT);
                this.state = 1009;
                this.match(SparkSQLParser.KW_JAR);
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public filePath(): FilePathContext {
        let localContext = new FilePathContext(this.context, this.state);
        this.enterRule(localContext, 70, SparkSQLParser.RULE_filePath);
        let _la: number;
        try {
            let alternative: number;
            this.state = 1021;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case SparkSQLParser.STRING_LITERAL:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1012;
                this.match(SparkSQLParser.STRING_LITERAL);
                }
                break;
            case SparkSQLParser.SLASH_SIGN:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1017;
                this.errorHandler.sync(this);
                alternative = 1;
                do {
                    switch (alternative) {
                    case 1:
                        {
                        {
                        this.state = 1013;
                        this.match(SparkSQLParser.SLASH_SIGN);
                        this.state = 1015;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                        if (_la === 501) {
                            {
                            this.state = 1014;
                            this.match(SparkSQLParser.ID_LITERAL);
                            }
                        }

                        }
                        }
                        break;
                    default:
                        throw new antlr.NoViableAltException(this);
                    }
                    this.state = 1019;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 62, this.context);
                } while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public ifExistsPart(): IfExistsPartContext {
        let localContext = new IfExistsPartContext(this.context, this.state);
        this.enterRule(localContext, 72, SparkSQLParser.RULE_ifExistsPart);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1023;
            this.match(SparkSQLParser.KW_IF);
            this.state = 1025;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 354) {
                {
                this.state = 1024;
                this.match(SparkSQLParser.KW_NOT);
                }
            }

            this.state = 1027;
            this.match(SparkSQLParser.KW_EXISTS);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public columnPosition(): ColumnPositionContext {
        let localContext = new ColumnPositionContext(this.context, this.state);
        this.enterRule(localContext, 74, SparkSQLParser.RULE_columnPosition);
        let _la: number;
        try {
            this.state = 1032;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case SparkSQLParser.KW_FIRST:
            case SparkSQLParser.KW_LAST:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1029;
                _la = this.tokenStream.LA(1);
                if(!(_la === 54 || _la === 84)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            case SparkSQLParser.KW_AFTER:
            case SparkSQLParser.KW_BEFORE:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1030;
                _la = this.tokenStream.LA(1);
                if(!(_la === 8 || _la === 11)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 1031;
                this.uid();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public renameDefinition(): RenameDefinitionContext {
        let localContext = new RenameDefinitionContext(this.context, this.state);
        this.enterRule(localContext, 76, SparkSQLParser.RULE_renameDefinition);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1034;
            this.match(SparkSQLParser.KW_RENAME);
            this.state = 1036;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 4294684608) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & 4293654523) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & 4185849791) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & 4294967263) !== 0) || ((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & 3757047707) !== 0) || ((((_la - 160)) & ~0x1F) === 0 && ((1 << (_la - 160)) & 4252958679) !== 0) || ((((_la - 192)) & ~0x1F) === 0 && ((1 << (_la - 192)) & 3967) !== 0) || _la === 338 || ((((_la - 483)) & ~0x1F) === 0 && ((1 << (_la - 483)) & 360449) !== 0)) {
                {
                this.state = 1035;
                this.uid();
                }
            }

            this.state = 1038;
            this.match(SparkSQLParser.KW_TO);
            this.state = 1039;
            this.uid();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public setKeyValueDefinition(): SetKeyValueDefinitionContext {
        let localContext = new SetKeyValueDefinitionContext(this.context, this.state);
        this.enterRule(localContext, 78, SparkSQLParser.RULE_setKeyValueDefinition);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1041;
            this.match(SparkSQLParser.KW_SET);
            this.state = 1042;
            this.tablePropertyList();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public addConstraint(): AddConstraintContext {
        let localContext = new AddConstraintContext(this.context, this.state);
        this.enterRule(localContext, 80, SparkSQLParser.RULE_addConstraint);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1044;
            this.match(SparkSQLParser.KW_ADD);
            this.state = 1045;
            this.match(SparkSQLParser.KW_CONSTRAINT);
            this.state = 1046;
            this.constraintName();
            this.state = 1047;
            this.match(SparkSQLParser.KW_PRIMARY);
            this.state = 1048;
            this.match(SparkSQLParser.KW_KEY);
            this.state = 1049;
            this.columnNameList();
            this.state = 1051;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 354) {
                {
                this.state = 1050;
                this.notForced();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public dropConstraint(): DropConstraintContext {
        let localContext = new DropConstraintContext(this.context, this.state);
        this.enterRule(localContext, 82, SparkSQLParser.RULE_dropConstraint);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1053;
            this.match(SparkSQLParser.KW_DROP);
            this.state = 1054;
            this.match(SparkSQLParser.KW_CONSTRAINT);
            this.state = 1055;
            this.constraintName();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public addUnique(): AddUniqueContext {
        let localContext = new AddUniqueContext(this.context, this.state);
        this.enterRule(localContext, 84, SparkSQLParser.RULE_addUnique);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1057;
            this.match(SparkSQLParser.KW_ADD);
            this.state = 1058;
            this.match(SparkSQLParser.KW_UNIQUE);
            this.state = 1059;
            this.columnNameList();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public notForced(): NotForcedContext {
        let localContext = new NotForcedContext(this.context, this.state);
        this.enterRule(localContext, 86, SparkSQLParser.RULE_notForced);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1061;
            this.match(SparkSQLParser.KW_NOT);
            this.state = 1062;
            this.match(SparkSQLParser.KW_ENFORCED);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public insertStatement(): InsertStatementContext {
        let localContext = new InsertStatementContext(this.context, this.state);
        this.enterRule(localContext, 88, SparkSQLParser.RULE_insertStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1065;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 284) {
                {
                this.state = 1064;
                this.match(SparkSQLParser.KW_EXECUTE);
                }
            }

            this.state = 1067;
            this.insertSimpleStatement();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public insertSimpleStatement(): InsertSimpleStatementContext {
        let localContext = new InsertSimpleStatementContext(this.context, this.state);
        this.enterRule(localContext, 90, SparkSQLParser.RULE_insertSimpleStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1069;
            this.match(SparkSQLParser.KW_INSERT);
            this.state = 1070;
            _la = this.tokenStream.LA(1);
            if(!(_la === 108 || _la === 319)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            this.state = 1072;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 422) {
                {
                this.state = 1071;
                this.match(SparkSQLParser.KW_TABLE);
                }
            }

            this.state = 1074;
            this.tablePath();
            this.state = 1076;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 371) {
                {
                this.state = 1075;
                this.insertPartitionDefinition();
                }
            }

            this.state = 1079;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 71, this.context) ) {
            case 1:
                {
                this.state = 1078;
                this.columnNameList();
                }
                break;
            }
            this.state = 1089;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case SparkSQLParser.KW_FROM:
            case SparkSQLParser.KW_SELECT:
            case SparkSQLParser.KW_WITH:
            case SparkSQLParser.LR_BRACKET:
            case SparkSQLParser.SEMICOLON:
                {
                this.state = 1081;
                this.queryStatement(0);
                }
                break;
            case SparkSQLParser.KW_VALUES:
                {
                this.state = 1082;
                this.valuesDefinition();
                }
                break;
            case SparkSQLParser.KW_REPLACE:
                {
                {
                this.state = 1083;
                this.match(SparkSQLParser.KW_REPLACE);
                this.state = 1084;
                this.whereClause();
                this.state = 1085;
                this.selectStatement();
                }
                }
                break;
            case SparkSQLParser.KW_TABLE:
                {
                {
                this.state = 1087;
                this.match(SparkSQLParser.KW_TABLE);
                this.state = 1088;
                this.tablePath();
                }
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public insertPartitionDefinition(): InsertPartitionDefinitionContext {
        let localContext = new InsertPartitionDefinitionContext(this.context, this.state);
        this.enterRule(localContext, 92, SparkSQLParser.RULE_insertPartitionDefinition);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1091;
            this.match(SparkSQLParser.KW_PARTITION);
            this.state = 1092;
            this.tablePropertyList();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }

    public queryStatement(): QueryStatementContext;
    public queryStatement(_p: number): QueryStatementContext;
    public queryStatement(_p?: number): QueryStatementContext {
        if (_p === undefined) {
            _p = 0;
        }

        let parentContext = this.context;
        let parentState = this.state;
        let localContext = new QueryStatementContext(this.context, parentState);
        let previousContext = localContext;
        let _startState = 94;
        this.enterRecursionRule(localContext, 94, SparkSQLParser.RULE_queryStatement, _p);
        let _la: number;
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1118;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case SparkSQLParser.KW_WITH:
                {
                localContext = new WithQueryContext(localContext);
                this.context = localContext;
                previousContext = localContext;

                this.state = 1095;
                this.withClause();
                this.state = 1096;
                this.queryStatement(4);
                }
                break;
            case SparkSQLParser.LR_BRACKET:
                {
                localContext = new BracketQueryContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 1098;
                this.match(SparkSQLParser.LR_BRACKET);
                this.state = 1099;
                this.queryStatement(0);
                this.state = 1100;
                this.match(SparkSQLParser.RR_BRACKET);
                }
                break;
            case SparkSQLParser.KW_FROM:
            case SparkSQLParser.KW_SELECT:
            case SparkSQLParser.SEMICOLON:
                {
                localContext = new CommonQueryContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 1104;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 73, this.context) ) {
                case 1:
                    {
                    this.state = 1102;
                    this.selectClause();
                    }
                    break;
                case 2:
                    {
                    this.state = 1103;
                    this.selectStatement();
                    }
                    break;
                }
                this.state = 1107;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 74, this.context) ) {
                case 1:
                    {
                    this.state = 1106;
                    this.sortByCaluse();
                    }
                    break;
                }
                this.state = 1110;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 75, this.context) ) {
                case 1:
                    {
                    this.state = 1109;
                    this.orderByCaluse();
                    }
                    break;
                }
                this.state = 1113;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 76, this.context) ) {
                case 1:
                    {
                    this.state = 1112;
                    this.limitClause();
                    }
                    break;
                }
                this.state = 1116;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 77, this.context) ) {
                case 1:
                    {
                    this.state = 1115;
                    this.offsetClause();
                    }
                    break;
                }
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            this.context!.stop = this.tokenStream.LT(-1);
            this.state = 1140;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 84, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    if (this.parseListeners != null) {
                        this.triggerExitRuleEvent();
                    }
                    previousContext = localContext;
                    {
                    {
                    localContext = new OpQueryContext(new QueryStatementContext(parentContext, parentState));
                    (localContext as OpQueryContext)._left = previousContext;
                    this.pushNewRecursionContext(localContext, _startState, SparkSQLParser.RULE_queryStatement);
                    this.state = 1120;
                    if (!(this.precpred(this.context, 2))) {
                        throw this.createFailedPredicateException("this.precpred(this.context, 2)");
                    }
                    this.state = 1121;
                    (localContext as OpQueryContext)._operator = this.tokenStream.LT(1);
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 283 || _la === 317 || _la === 344 || _la === 437)) {
                        (localContext as OpQueryContext)._operator = this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 1123;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 205 || _la === 271) {
                        {
                        this.state = 1122;
                        _la = this.tokenStream.LA(1);
                        if(!(_la === 205 || _la === 271)) {
                        this.errorHandler.recoverInline(this);
                        }
                        else {
                            this.errorHandler.reportMatch(this);
                            this.consume();
                        }
                        }
                    }

                    this.state = 1125;
                    (localContext as OpQueryContext)._right = this.queryStatement(0);
                    this.state = 1127;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 80, this.context) ) {
                    case 1:
                        {
                        this.state = 1126;
                        this.sortByCaluse();
                        }
                        break;
                    }
                    this.state = 1130;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 81, this.context) ) {
                    case 1:
                        {
                        this.state = 1129;
                        this.orderByCaluse();
                        }
                        break;
                    }
                    this.state = 1133;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 82, this.context) ) {
                    case 1:
                        {
                        this.state = 1132;
                        this.limitClause();
                        }
                        break;
                    }
                    this.state = 1136;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 83, this.context) ) {
                    case 1:
                        {
                        this.state = 1135;
                        this.offsetClause();
                        }
                        break;
                    }
                    }
                    }
                }
                this.state = 1142;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 84, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.unrollRecursionContexts(parentContext);
        }
        return localContext;
    }
    public withClause(): WithClauseContext {
        let localContext = new WithClauseContext(this.context, this.state);
        this.enterRule(localContext, 96, SparkSQLParser.RULE_withClause);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1143;
            this.match(SparkSQLParser.KW_WITH);
            this.state = 1144;
            this.withItem();
            this.state = 1149;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 480) {
                {
                {
                this.state = 1145;
                this.match(SparkSQLParser.COMMA);
                this.state = 1146;
                this.withItem();
                }
                }
                this.state = 1151;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public valuesCaluse(): ValuesCaluseContext {
        let localContext = new ValuesCaluseContext(this.context, this.state);
        this.enterRule(localContext, 98, SparkSQLParser.RULE_valuesCaluse);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            {
            this.state = 1152;
            this.match(SparkSQLParser.KW_VALUES);
            this.state = 1153;
            this.inlineBody();
            this.state = 1161;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 87, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 1156;
                    this.errorHandler.sync(this);
                    switch (this.tokenStream.LA(1)) {
                    case SparkSQLParser.COMMA:
                        {
                        this.state = 1154;
                        this.match(SparkSQLParser.COMMA);
                        }
                        break;
                    case SparkSQLParser.KW_ADD:
                    case SparkSQLParser.KW_ADMIN:
                    case SparkSQLParser.KW_AFTER:
                    case SparkSQLParser.KW_ANALYZE:
                    case SparkSQLParser.KW_ASC:
                    case SparkSQLParser.KW_BEFORE:
                    case SparkSQLParser.KW_BYTES:
                    case SparkSQLParser.KW_CASCADE:
                    case SparkSQLParser.KW_CATALOG:
                    case SparkSQLParser.KW_CATALOGS:
                    case SparkSQLParser.KW_CENTURY:
                    case SparkSQLParser.KW_CHAIN:
                    case SparkSQLParser.KW_CHANGELOG_MODE:
                    case SparkSQLParser.KW_CHARACTERS:
                    case SparkSQLParser.KW_COMMENT:
                    case SparkSQLParser.KW_COMPACT:
                    case SparkSQLParser.KW_COLUMNS:
                    case SparkSQLParser.KW_CONSTRAINTS:
                    case SparkSQLParser.KW_CONSTRUCTOR:
                    case SparkSQLParser.KW_COMPUTE:
                    case SparkSQLParser.KW_CUMULATE:
                    case SparkSQLParser.KW_DATA:
                    case SparkSQLParser.KW_DATABASE:
                    case SparkSQLParser.KW_DATABASES:
                    case SparkSQLParser.KW_DAYS:
                    case SparkSQLParser.KW_DECADE:
                    case SparkSQLParser.KW_DEFINED:
                    case SparkSQLParser.KW_DESC:
                    case SparkSQLParser.KW_DESCRIPTOR:
                    case SparkSQLParser.KW_DIV:
                    case SparkSQLParser.KW_ENCODING:
                    case SparkSQLParser.KW_ENFORCED:
                    case SparkSQLParser.KW_ENGINE:
                    case SparkSQLParser.KW_ERROR:
                    case SparkSQLParser.KW_ESTIMATED_COST:
                    case SparkSQLParser.KW_EXCEPTION:
                    case SparkSQLParser.KW_EXCLUDE:
                    case SparkSQLParser.KW_EXCLUDING:
                    case SparkSQLParser.KW_EXTENDED:
                    case SparkSQLParser.KW_FILE:
                    case SparkSQLParser.KW_FINAL:
                    case SparkSQLParser.KW_FIRST:
                    case SparkSQLParser.KW_FOLLOWING:
                    case SparkSQLParser.KW_FORMAT:
                    case SparkSQLParser.KW_FORTRAN:
                    case SparkSQLParser.KW_FOUND:
                    case SparkSQLParser.KW_FRAC_SECOND:
                    case SparkSQLParser.KW_FUNCTIONS:
                    case SparkSQLParser.KW_GENERAL:
                    case SparkSQLParser.KW_GENERATED:
                    case SparkSQLParser.KW_GO:
                    case SparkSQLParser.KW_GOTO:
                    case SparkSQLParser.KW_GRANTED:
                    case SparkSQLParser.KW_HOP:
                    case SparkSQLParser.KW_HOURS:
                    case SparkSQLParser.KW_IF:
                    case SparkSQLParser.KW_IGNORE:
                    case SparkSQLParser.KW_INCREMENT:
                    case SparkSQLParser.KW_INPUT:
                    case SparkSQLParser.KW_INVOKER:
                    case SparkSQLParser.KW_JAR:
                    case SparkSQLParser.KW_JARS:
                    case SparkSQLParser.KW_JAVA:
                    case SparkSQLParser.KW_JSON:
                    case SparkSQLParser.KW_JSON_EXECUTION_PLAN:
                    case SparkSQLParser.KW_KEY:
                    case SparkSQLParser.KW_KEY_MEMBER:
                    case SparkSQLParser.KW_KEY_TYPE:
                    case SparkSQLParser.KW_LABEL:
                    case SparkSQLParser.KW_LAST:
                    case SparkSQLParser.KW_LENGTH:
                    case SparkSQLParser.KW_LEVEL:
                    case SparkSQLParser.KW_LOAD:
                    case SparkSQLParser.KW_MAP:
                    case SparkSQLParser.KW_MICROSECOND:
                    case SparkSQLParser.KW_MILLENNIUM:
                    case SparkSQLParser.KW_MILLISECOND:
                    case SparkSQLParser.KW_MINUTES:
                    case SparkSQLParser.KW_MINVALUE:
                    case SparkSQLParser.KW_MODIFY:
                    case SparkSQLParser.KW_MODULES:
                    case SparkSQLParser.KW_MONTHS:
                    case SparkSQLParser.KW_NANOSECOND:
                    case SparkSQLParser.KW_NULLS:
                    case SparkSQLParser.KW_NUMBER:
                    case SparkSQLParser.KW_OPTION:
                    case SparkSQLParser.KW_OPTIONS:
                    case SparkSQLParser.KW_ORDERING:
                    case SparkSQLParser.KW_OUTPUT:
                    case SparkSQLParser.KW_OVERWRITE:
                    case SparkSQLParser.KW_OVERWRITING:
                    case SparkSQLParser.KW_PARTITIONED:
                    case SparkSQLParser.KW_PARTITIONS:
                    case SparkSQLParser.KW_PASSING:
                    case SparkSQLParser.KW_PAST:
                    case SparkSQLParser.KW_PATH:
                    case SparkSQLParser.KW_PLACING:
                    case SparkSQLParser.KW_PLAN:
                    case SparkSQLParser.KW_PRECEDING:
                    case SparkSQLParser.KW_PRESERVE:
                    case SparkSQLParser.KW_PRIOR:
                    case SparkSQLParser.KW_PRIVILEGES:
                    case SparkSQLParser.KW_PUBLIC:
                    case SparkSQLParser.KW_PYTHON:
                    case SparkSQLParser.KW_PYTHON_FILES:
                    case SparkSQLParser.KW_PYTHON_REQUIREMENTS:
                    case SparkSQLParser.KW_PYTHON_DEPENDENCIES:
                    case SparkSQLParser.KW_PYTHON_JAR:
                    case SparkSQLParser.KW_PYTHON_ARCHIVES:
                    case SparkSQLParser.KW_PYTHON_PARAMETER:
                    case SparkSQLParser.KW_QUARTER:
                    case SparkSQLParser.KW_RAW:
                    case SparkSQLParser.KW_READ:
                    case SparkSQLParser.KW_RELATIVE:
                    case SparkSQLParser.KW_REMOVE:
                    case SparkSQLParser.KW_RENAME:
                    case SparkSQLParser.KW_REPLACE:
                    case SparkSQLParser.KW_RESPECT:
                    case SparkSQLParser.KW_RESTART:
                    case SparkSQLParser.KW_RESTRICT:
                    case SparkSQLParser.KW_ROLE:
                    case SparkSQLParser.KW_ROW_COUNT:
                    case SparkSQLParser.KW_SCALA:
                    case SparkSQLParser.KW_SCALAR:
                    case SparkSQLParser.KW_SCALE:
                    case SparkSQLParser.KW_SCHEMA:
                    case SparkSQLParser.KW_SECONDS:
                    case SparkSQLParser.KW_SECTION:
                    case SparkSQLParser.KW_SECURITY:
                    case SparkSQLParser.KW_SELF:
                    case SparkSQLParser.KW_SERVER:
                    case SparkSQLParser.KW_SERVER_NAME:
                    case SparkSQLParser.KW_SESSION:
                    case SparkSQLParser.KW_SETS:
                    case SparkSQLParser.KW_SIMPLE:
                    case SparkSQLParser.KW_SIZE:
                    case SparkSQLParser.KW_SLIDE:
                    case SparkSQLParser.KW_SOURCE:
                    case SparkSQLParser.KW_SPACE:
                    case SparkSQLParser.KW_STATE:
                    case SparkSQLParser.KW_STATEMENT:
                    case SparkSQLParser.KW_STEP:
                    case SparkSQLParser.KW_STRING:
                    case SparkSQLParser.KW_STRUCTURE:
                    case SparkSQLParser.KW_STYLE:
                    case SparkSQLParser.KW_TABLES:
                    case SparkSQLParser.KW_TEMPORARY:
                    case SparkSQLParser.KW_TIMECOL:
                    case SparkSQLParser.KW_FLOOR:
                    case SparkSQLParser.KW_TIMESTAMP_LTZ:
                    case SparkSQLParser.KW_TIMESTAMPADD:
                    case SparkSQLParser.KW_TIMESTAMPDIFF:
                    case SparkSQLParser.KW_TOTIMESTAMP:
                    case SparkSQLParser.KW_TRANSFORM:
                    case SparkSQLParser.KW_TUMBLE:
                    case SparkSQLParser.KW_TYPE:
                    case SparkSQLParser.KW_UNDER:
                    case SparkSQLParser.KW_UNLOAD:
                    case SparkSQLParser.KW_USAGE:
                    case SparkSQLParser.KW_USE:
                    case SparkSQLParser.KW_UTF16:
                    case SparkSQLParser.KW_UTF32:
                    case SparkSQLParser.KW_UTF8:
                    case SparkSQLParser.KW_VERSION:
                    case SparkSQLParser.KW_VIEW:
                    case SparkSQLParser.KW_VIEWS:
                    case SparkSQLParser.KW_VIRTUAL:
                    case SparkSQLParser.KW_WATERMARK:
                    case SparkSQLParser.KW_WATERMARKS:
                    case SparkSQLParser.KW_WEEK:
                    case SparkSQLParser.KW_WORK:
                    case SparkSQLParser.KW_WRAPPER:
                    case SparkSQLParser.KW_YEARS:
                    case SparkSQLParser.KW_ZONE:
                    case SparkSQLParser.KW_AS:
                    case SparkSQLParser.KW_LOCALTIMESTAMP:
                    case SparkSQLParser.DOLLAR:
                    case SparkSQLParser.STRING_LITERAL:
                    case SparkSQLParser.DIG_LITERAL:
                    case SparkSQLParser.ID_LITERAL:
                        {
                        this.state = 1155;
                        this.tableAlias();
                        }
                        break;
                    default:
                        throw new antlr.NoViableAltException(this);
                    }
                    this.state = 1158;
                    this.inlineBody();
                    }
                    }
                }
                this.state = 1163;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 87, this.context);
            }
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public inlineBody(): InlineBodyContext {
        let localContext = new InlineBodyContext(this.context, this.state);
        this.enterRule(localContext, 100, SparkSQLParser.RULE_inlineBody);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1164;
            this.match(SparkSQLParser.LR_BRACKET);
            this.state = 1165;
            this.expression();
            this.state = 1170;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 480) {
                {
                {
                this.state = 1166;
                this.match(SparkSQLParser.COMMA);
                this.state = 1167;
                this.expression();
                }
                }
                this.state = 1172;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 1173;
            this.match(SparkSQLParser.RR_BRACKET);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public withItem(): WithItemContext {
        let localContext = new WithItemContext(this.context, this.state);
        this.enterRule(localContext, 102, SparkSQLParser.RULE_withItem);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1175;
            this.withItemName();
            this.state = 1187;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 476) {
                {
                this.state = 1176;
                this.match(SparkSQLParser.LR_BRACKET);
                this.state = 1177;
                this.columnName();
                this.state = 1182;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 480) {
                    {
                    {
                    this.state = 1178;
                    this.match(SparkSQLParser.COMMA);
                    this.state = 1179;
                    this.columnName();
                    }
                    }
                    this.state = 1184;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 1185;
                this.match(SparkSQLParser.RR_BRACKET);
                }
            }

            this.state = 1189;
            this.match(SparkSQLParser.KW_AS);
            this.state = 1190;
            this.match(SparkSQLParser.LR_BRACKET);
            this.state = 1191;
            this.queryStatement(0);
            this.state = 1192;
            this.match(SparkSQLParser.RR_BRACKET);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public withItemName(): WithItemNameContext {
        let localContext = new WithItemNameContext(this.context, this.state);
        this.enterRule(localContext, 104, SparkSQLParser.RULE_withItemName);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1194;
            this.identifier();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public selectClause(): SelectClauseContext {
        let localContext = new SelectClauseContext(this.context, this.state);
        this.enterRule(localContext, 106, SparkSQLParser.RULE_selectClause);
        let _la: number;
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1196;
            this.match(SparkSQLParser.KW_SELECT);
            this.state = 1198;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 205 || _la === 271) {
                {
                this.state = 1197;
                this.setQuantifier();
                }
            }

            this.state = 1200;
            this.projectItemDefinition();
            this.state = 1205;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 92, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 1201;
                    this.match(SparkSQLParser.COMMA);
                    this.state = 1202;
                    this.projectItemDefinition();
                    }
                    }
                }
                this.state = 1207;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 92, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public filterPart(): FilterPartContext {
        let localContext = new FilterPartContext(this.context, this.state);
        this.enterRule(localContext, 108, SparkSQLParser.RULE_filterPart);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1208;
            this.match(SparkSQLParser.KW_FILTER);
            this.state = 1209;
            this.match(SparkSQLParser.LR_BRACKET);
            this.state = 1210;
            this.whereClause();
            this.state = 1211;
            this.match(SparkSQLParser.RR_BRACKET);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public overWindowItem(): OverWindowItemContext {
        let localContext = new OverWindowItemContext(this.context, this.state);
        this.enterRule(localContext, 110, SparkSQLParser.RULE_overWindowItem);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1213;
            this.windowFunctioPart();
            this.state = 1216;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 69 || _la === 139) {
                {
                this.state = 1214;
                _la = this.tokenStream.LA(1);
                if(!(_la === 69 || _la === 139)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 1215;
                this.match(SparkSQLParser.KW_NULLS);
                }
            }

            this.state = 1218;
            this.match(SparkSQLParser.KW_OVER);
            this.state = 1220;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 94, this.context) ) {
            case 1:
                {
                this.state = 1219;
                this.anonymousWindowsName();
                }
                break;
            }
            this.state = 1232;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 97, this.context) ) {
            case 1:
                {
                this.state = 1222;
                this.match(SparkSQLParser.LR_BRACKET);
                this.state = 1224;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 274 || _la === 371) {
                    {
                    this.state = 1223;
                    this.overClause();
                    }
                }

                this.state = 1226;
                this.orderByCaluse();
                this.state = 1228;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 386 || _la === 399) {
                    {
                    this.state = 1227;
                    this.windowFrameForWindowsQuery();
                    }
                }

                this.state = 1230;
                this.match(SparkSQLParser.RR_BRACKET);
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public overClause(): OverClauseContext {
        let localContext = new OverClauseContext(this.context, this.state);
        this.enterRule(localContext, 112, SparkSQLParser.RULE_overClause);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1234;
            _la = this.tokenStream.LA(1);
            if(!(_la === 274 || _la === 371)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            this.state = 1235;
            this.match(SparkSQLParser.KW_BY);
            this.state = 1236;
            this.columnName();
            this.state = 1241;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 480) {
                {
                {
                this.state = 1237;
                this.match(SparkSQLParser.COMMA);
                this.state = 1238;
                this.columnName();
                }
                }
                this.state = 1243;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 1246;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 469) {
                {
                this.state = 1244;
                this.match(SparkSQLParser.EQUAL_SYMBOL);
                this.state = 1245;
                this.expression();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public windowFunctioPart(): WindowFunctioPartContext {
        let localContext = new WindowFunctioPartContext(this.context, this.state);
        this.enterRule(localContext, 114, SparkSQLParser.RULE_windowFunctioPart);
        let _la: number;
        try {
            this.state = 1263;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 102, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1248;
                this.windowFunctionName();
                this.state = 1249;
                this.match(SparkSQLParser.LR_BRACKET);
                this.state = 1258;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 4294684608) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & 4293918715) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & 4185849791) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & 4294967263) !== 0) || ((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & 3757047707) !== 0) || ((((_la - 160)) & ~0x1F) === 0 && ((1 << (_la - 160)) & 4252958679) !== 0) || ((((_la - 192)) & ~0x1F) === 0 && ((1 << (_la - 192)) & 2156412927) !== 0) || ((((_la - 230)) & ~0x1F) === 0 && ((1 << (_la - 230)) & 2685932551) !== 0) || ((((_la - 271)) & ~0x1F) === 0 && ((1 << (_la - 271)) & 70336513) !== 0) || ((((_la - 303)) & ~0x1F) === 0 && ((1 << (_la - 303)) & 2030075921) !== 0) || ((((_la - 338)) & ~0x1F) === 0 && ((1 << (_la - 338)) & 2148205697) !== 0) || ((((_la - 375)) & ~0x1F) === 0 && ((1 << (_la - 375)) & 42494055) !== 0) || ((((_la - 414)) & ~0x1F) === 0 && ((1 << (_la - 414)) & 276029453) !== 0) || ((((_la - 456)) & ~0x1F) === 0 && ((1 << (_la - 456)) & 135266817) !== 0) || ((((_la - 488)) & ~0x1F) === 0 && ((1 << (_la - 488)) & 15373) !== 0)) {
                    {
                    this.state = 1250;
                    this.functionParam();
                    this.state = 1255;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    while (_la === 480) {
                        {
                        {
                        this.state = 1251;
                        this.match(SparkSQLParser.COMMA);
                        this.state = 1252;
                        this.functionParam();
                        }
                        }
                        this.state = 1257;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                    }
                    }
                }

                this.state = 1260;
                this.match(SparkSQLParser.RR_BRACKET);
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1262;
                this.primaryExpression(0);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public windowFunctionName(): WindowFunctionNameContext {
        let localContext = new WindowFunctionNameContext(this.context, this.state);
        this.enterRule(localContext, 116, SparkSQLParser.RULE_windowFunctionName);
        try {
            this.state = 1267;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case SparkSQLParser.KW_DENSE_RANK:
            case SparkSQLParser.KW_NTILE:
            case SparkSQLParser.KW_PERCENT_RANK:
            case SparkSQLParser.KW_RANK:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1265;
                this.rangkingFunction();
                }
                break;
            case SparkSQLParser.KW_CUME_DIST:
            case SparkSQLParser.KW_FIRST_VALUE:
            case SparkSQLParser.KW_LAG:
            case SparkSQLParser.KW_LAST_VALUE:
            case SparkSQLParser.KW_LEAD:
            case SparkSQLParser.KW_NTH_VALUE:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1266;
                this.analyticFunction();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public analyticFunction(): AnalyticFunctionContext {
        let localContext = new AnalyticFunctionContext(this.context, this.state);
        this.enterRule(localContext, 118, SparkSQLParser.RULE_analyticFunction);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1269;
            _la = this.tokenStream.LA(1);
            if(!(_la === 254 || _la === 291 || ((((_la - 327)) & ~0x1F) === 0 && ((1 << (_la - 327)) & 536870937) !== 0))) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public rangkingFunction(): RangkingFunctionContext {
        let localContext = new RangkingFunctionContext(this.context, this.state);
        this.enterRule(localContext, 120, SparkSQLParser.RULE_rangkingFunction);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1271;
            _la = this.tokenStream.LA(1);
            if(!(_la === 270 || _la === 355 || _la === 375 || _la === 389)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public fromClause(): FromClauseContext {
        let localContext = new FromClauseContext(this.context, this.state);
        this.enterRule(localContext, 122, SparkSQLParser.RULE_fromClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1273;
            this.match(SparkSQLParser.KW_FROM);
            this.state = 1274;
            this.tableExpression(0);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public windowFrameForWindowsQuery(): WindowFrameForWindowsQueryContext {
        let localContext = new WindowFrameForWindowsQueryContext(this.context, this.state);
        this.enterRule(localContext, 124, SparkSQLParser.RULE_windowFrameForWindowsQuery);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1276;
            _la = this.tokenStream.LA(1);
            if(!(_la === 386 || _la === 399)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            this.state = 1283;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case SparkSQLParser.KW_ADD:
            case SparkSQLParser.KW_ADMIN:
            case SparkSQLParser.KW_AFTER:
            case SparkSQLParser.KW_ANALYZE:
            case SparkSQLParser.KW_ASC:
            case SparkSQLParser.KW_BEFORE:
            case SparkSQLParser.KW_BYTES:
            case SparkSQLParser.KW_CASCADE:
            case SparkSQLParser.KW_CATALOG:
            case SparkSQLParser.KW_CATALOGS:
            case SparkSQLParser.KW_CENTURY:
            case SparkSQLParser.KW_CHAIN:
            case SparkSQLParser.KW_CHANGELOG_MODE:
            case SparkSQLParser.KW_CHARACTERS:
            case SparkSQLParser.KW_COMMENT:
            case SparkSQLParser.KW_COMPACT:
            case SparkSQLParser.KW_COLUMNS:
            case SparkSQLParser.KW_CONSTRAINTS:
            case SparkSQLParser.KW_CONSTRUCTOR:
            case SparkSQLParser.KW_COMPUTE:
            case SparkSQLParser.KW_CUMULATE:
            case SparkSQLParser.KW_DATA:
            case SparkSQLParser.KW_DATABASE:
            case SparkSQLParser.KW_DATABASES:
            case SparkSQLParser.KW_DAYS:
            case SparkSQLParser.KW_DECADE:
            case SparkSQLParser.KW_DEFINED:
            case SparkSQLParser.KW_DESC:
            case SparkSQLParser.KW_DESCRIPTOR:
            case SparkSQLParser.KW_DIV:
            case SparkSQLParser.KW_ENCODING:
            case SparkSQLParser.KW_ENFORCED:
            case SparkSQLParser.KW_ENGINE:
            case SparkSQLParser.KW_ERROR:
            case SparkSQLParser.KW_ESTIMATED_COST:
            case SparkSQLParser.KW_EXCEPTION:
            case SparkSQLParser.KW_EXCLUDE:
            case SparkSQLParser.KW_EXCLUDING:
            case SparkSQLParser.KW_EXTENDED:
            case SparkSQLParser.KW_FILE:
            case SparkSQLParser.KW_FINAL:
            case SparkSQLParser.KW_FIRST:
            case SparkSQLParser.KW_FOLLOWING:
            case SparkSQLParser.KW_FORMAT:
            case SparkSQLParser.KW_FORTRAN:
            case SparkSQLParser.KW_FOUND:
            case SparkSQLParser.KW_FRAC_SECOND:
            case SparkSQLParser.KW_FUNCTIONS:
            case SparkSQLParser.KW_GENERAL:
            case SparkSQLParser.KW_GENERATED:
            case SparkSQLParser.KW_GO:
            case SparkSQLParser.KW_GOTO:
            case SparkSQLParser.KW_GRANTED:
            case SparkSQLParser.KW_HOP:
            case SparkSQLParser.KW_HOURS:
            case SparkSQLParser.KW_IF:
            case SparkSQLParser.KW_IGNORE:
            case SparkSQLParser.KW_INCREMENT:
            case SparkSQLParser.KW_INPUT:
            case SparkSQLParser.KW_INVOKER:
            case SparkSQLParser.KW_JAR:
            case SparkSQLParser.KW_JARS:
            case SparkSQLParser.KW_JAVA:
            case SparkSQLParser.KW_JSON:
            case SparkSQLParser.KW_JSON_EXECUTION_PLAN:
            case SparkSQLParser.KW_KEY:
            case SparkSQLParser.KW_KEY_MEMBER:
            case SparkSQLParser.KW_KEY_TYPE:
            case SparkSQLParser.KW_LABEL:
            case SparkSQLParser.KW_LAST:
            case SparkSQLParser.KW_LENGTH:
            case SparkSQLParser.KW_LEVEL:
            case SparkSQLParser.KW_LOAD:
            case SparkSQLParser.KW_MAP:
            case SparkSQLParser.KW_MICROSECOND:
            case SparkSQLParser.KW_MILLENNIUM:
            case SparkSQLParser.KW_MILLISECOND:
            case SparkSQLParser.KW_MINUTES:
            case SparkSQLParser.KW_MINVALUE:
            case SparkSQLParser.KW_MODIFY:
            case SparkSQLParser.KW_MODULES:
            case SparkSQLParser.KW_MONTHS:
            case SparkSQLParser.KW_NANOSECOND:
            case SparkSQLParser.KW_NULLS:
            case SparkSQLParser.KW_NUMBER:
            case SparkSQLParser.KW_OPTION:
            case SparkSQLParser.KW_OPTIONS:
            case SparkSQLParser.KW_ORDERING:
            case SparkSQLParser.KW_OUTPUT:
            case SparkSQLParser.KW_OVERWRITE:
            case SparkSQLParser.KW_OVERWRITING:
            case SparkSQLParser.KW_PARTITIONED:
            case SparkSQLParser.KW_PARTITIONS:
            case SparkSQLParser.KW_PASSING:
            case SparkSQLParser.KW_PAST:
            case SparkSQLParser.KW_PATH:
            case SparkSQLParser.KW_PLACING:
            case SparkSQLParser.KW_PLAN:
            case SparkSQLParser.KW_PRECEDING:
            case SparkSQLParser.KW_PRESERVE:
            case SparkSQLParser.KW_PRIOR:
            case SparkSQLParser.KW_PRIVILEGES:
            case SparkSQLParser.KW_PUBLIC:
            case SparkSQLParser.KW_PYTHON:
            case SparkSQLParser.KW_PYTHON_FILES:
            case SparkSQLParser.KW_PYTHON_REQUIREMENTS:
            case SparkSQLParser.KW_PYTHON_DEPENDENCIES:
            case SparkSQLParser.KW_PYTHON_JAR:
            case SparkSQLParser.KW_PYTHON_ARCHIVES:
            case SparkSQLParser.KW_PYTHON_PARAMETER:
            case SparkSQLParser.KW_QUARTER:
            case SparkSQLParser.KW_RAW:
            case SparkSQLParser.KW_READ:
            case SparkSQLParser.KW_RELATIVE:
            case SparkSQLParser.KW_REMOVE:
            case SparkSQLParser.KW_RENAME:
            case SparkSQLParser.KW_REPLACE:
            case SparkSQLParser.KW_RESPECT:
            case SparkSQLParser.KW_RESTART:
            case SparkSQLParser.KW_RESTRICT:
            case SparkSQLParser.KW_ROLE:
            case SparkSQLParser.KW_ROW_COUNT:
            case SparkSQLParser.KW_SCALA:
            case SparkSQLParser.KW_SCALAR:
            case SparkSQLParser.KW_SCALE:
            case SparkSQLParser.KW_SCHEMA:
            case SparkSQLParser.KW_SECONDS:
            case SparkSQLParser.KW_SECTION:
            case SparkSQLParser.KW_SECURITY:
            case SparkSQLParser.KW_SELF:
            case SparkSQLParser.KW_SERVER:
            case SparkSQLParser.KW_SERVER_NAME:
            case SparkSQLParser.KW_SESSION:
            case SparkSQLParser.KW_SETS:
            case SparkSQLParser.KW_SIMPLE:
            case SparkSQLParser.KW_SIZE:
            case SparkSQLParser.KW_SLIDE:
            case SparkSQLParser.KW_SOURCE:
            case SparkSQLParser.KW_SPACE:
            case SparkSQLParser.KW_STATE:
            case SparkSQLParser.KW_STATEMENT:
            case SparkSQLParser.KW_STEP:
            case SparkSQLParser.KW_STRING:
            case SparkSQLParser.KW_STRUCTURE:
            case SparkSQLParser.KW_STYLE:
            case SparkSQLParser.KW_TABLES:
            case SparkSQLParser.KW_TEMPORARY:
            case SparkSQLParser.KW_TIMECOL:
            case SparkSQLParser.KW_FLOOR:
            case SparkSQLParser.KW_TIMESTAMP_LTZ:
            case SparkSQLParser.KW_TIMESTAMPADD:
            case SparkSQLParser.KW_TIMESTAMPDIFF:
            case SparkSQLParser.KW_TOTIMESTAMP:
            case SparkSQLParser.KW_TRANSFORM:
            case SparkSQLParser.KW_TUMBLE:
            case SparkSQLParser.KW_TYPE:
            case SparkSQLParser.KW_UNDER:
            case SparkSQLParser.KW_UNBOUNDED:
            case SparkSQLParser.KW_UNLOAD:
            case SparkSQLParser.KW_USAGE:
            case SparkSQLParser.KW_USE:
            case SparkSQLParser.KW_UTF16:
            case SparkSQLParser.KW_UTF32:
            case SparkSQLParser.KW_UTF8:
            case SparkSQLParser.KW_VERSION:
            case SparkSQLParser.KW_VIEW:
            case SparkSQLParser.KW_VIEWS:
            case SparkSQLParser.KW_VIRTUAL:
            case SparkSQLParser.KW_WATERMARK:
            case SparkSQLParser.KW_WATERMARKS:
            case SparkSQLParser.KW_WEEK:
            case SparkSQLParser.KW_WORK:
            case SparkSQLParser.KW_WRAPPER:
            case SparkSQLParser.KW_YEARS:
            case SparkSQLParser.KW_ZONE:
            case SparkSQLParser.KW_ABS:
            case SparkSQLParser.KW_ARRAY:
            case SparkSQLParser.KW_AVG:
            case SparkSQLParser.KW_CASE:
            case SparkSQLParser.KW_CAST:
            case SparkSQLParser.KW_CEIL:
            case SparkSQLParser.KW_COALESCE:
            case SparkSQLParser.KW_COLLECT:
            case SparkSQLParser.KW_COUNT:
            case SparkSQLParser.KW_CURRENT_TIMESTAMP:
            case SparkSQLParser.KW_CURRENT:
            case SparkSQLParser.KW_DATE:
            case SparkSQLParser.KW_DAY:
            case SparkSQLParser.KW_EXISTS:
            case SparkSQLParser.KW_EXPLODE:
            case SparkSQLParser.KW_FIRST_VALUE:
            case SparkSQLParser.KW_FALSE:
            case SparkSQLParser.KW_FROM_UNIXTIME:
            case SparkSQLParser.KW_GROUPING:
            case SparkSQLParser.KW_HOUR:
            case SparkSQLParser.KW_INTERVAL:
            case SparkSQLParser.KW_LAG:
            case SparkSQLParser.KW_LAST_VALUE:
            case SparkSQLParser.KW_LEAD:
            case SparkSQLParser.KW_LEFT:
            case SparkSQLParser.KW_LOCALTIMESTAMP:
            case SparkSQLParser.KW_MINUTE:
            case SparkSQLParser.KW_MONTH:
            case SparkSQLParser.KW_NOT:
            case SparkSQLParser.KW_NTILE:
            case SparkSQLParser.KW_NULL:
            case SparkSQLParser.KW_OVERLAY:
            case SparkSQLParser.KW_PERCENT_RANK:
            case SparkSQLParser.KW_PERCENTILE_CONT:
            case SparkSQLParser.KW_PERCENTILE_DISC:
            case SparkSQLParser.KW_POSITION:
            case SparkSQLParser.KW_POWER:
            case SparkSQLParser.KW_RANGE:
            case SparkSQLParser.KW_ROW_NUMBER:
            case SparkSQLParser.KW_RANK:
            case SparkSQLParser.KW_RIGHT:
            case SparkSQLParser.KW_ROW:
            case SparkSQLParser.KW_SECOND:
            case SparkSQLParser.KW_STRUCT:
            case SparkSQLParser.KW_SUBSTRING:
            case SparkSQLParser.KW_SUM:
            case SparkSQLParser.KW_TIME:
            case SparkSQLParser.KW_TIMESTAMP:
            case SparkSQLParser.KW_TIMESTAMP_3:
            case SparkSQLParser.KW_TIMESTAMP_6:
            case SparkSQLParser.KW_TIMESTAMP_9:
            case SparkSQLParser.KW_TRUE:
            case SparkSQLParser.KW_TRUNCATE:
            case SparkSQLParser.KW_UPPER:
            case SparkSQLParser.KW_YEAR:
            case SparkSQLParser.BIT_NOT_OP:
            case SparkSQLParser.LR_BRACKET:
            case SparkSQLParser.DOLLAR:
            case SparkSQLParser.ASTERISK_SIGN:
            case SparkSQLParser.HYPNEN_SIGN:
            case SparkSQLParser.ADD_SIGN:
            case SparkSQLParser.STRING_LITERAL:
            case SparkSQLParser.DIG_LITERAL:
            case SparkSQLParser.REAL_LITERAL:
            case SparkSQLParser.ID_LITERAL:
                {
                this.state = 1277;
                this.frameExpession();
                }
                break;
            case SparkSQLParser.KW_BETWEEN:
                {
                {
                this.state = 1278;
                this.match(SparkSQLParser.KW_BETWEEN);
                this.state = 1279;
                this.frameExpession();
                this.state = 1280;
                this.match(SparkSQLParser.KW_AND);
                this.state = 1281;
                this.frameExpession();
                }
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public frameExpession(): FrameExpessionContext {
        let localContext = new FrameExpessionContext(this.context, this.state);
        this.enterRule(localContext, 126, SparkSQLParser.RULE_frameExpession);
        try {
            this.state = 1297;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 105, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                {
                this.state = 1285;
                this.match(SparkSQLParser.KW_UNBOUNDED);
                this.state = 1286;
                this.match(SparkSQLParser.KW_PRECEDING);
                }
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                {
                this.state = 1287;
                this.expression();
                this.state = 1288;
                this.match(SparkSQLParser.KW_PRECEDING);
                }
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                {
                this.state = 1290;
                this.match(SparkSQLParser.KW_CURRENT);
                this.state = 1291;
                this.match(SparkSQLParser.KW_ROW);
                }
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                {
                this.state = 1292;
                this.expression();
                this.state = 1293;
                this.match(SparkSQLParser.KW_FOLLOWING);
                }
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                {
                this.state = 1295;
                this.match(SparkSQLParser.KW_UNBOUNDED);
                this.state = 1296;
                this.match(SparkSQLParser.KW_FOLLOWING);
                }
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }

    public tableExpression(): TableExpressionContext;
    public tableExpression(_p: number): TableExpressionContext;
    public tableExpression(_p?: number): TableExpressionContext {
        if (_p === undefined) {
            _p = 0;
        }

        let parentContext = this.context;
        let parentState = this.state;
        let localContext = new TableExpressionContext(this.context, parentState);
        let previousContext = localContext;
        let _startState = 128;
        this.enterRecursionRule(localContext, 128, SparkSQLParser.RULE_tableExpression, _p);
        let _la: number;
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1329;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 111, this.context) ) {
            case 1:
                {
                localContext = new TableRefCommaTableRefContext(localContext);
                this.context = localContext;
                previousContext = localContext;

                this.state = 1300;
                this.tableReference();
                this.state = 1305;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 106, this.context);
                while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                    if (alternative === 1) {
                        {
                        {
                        this.state = 1301;
                        this.match(SparkSQLParser.COMMA);
                        this.state = 1302;
                        this.tableReference();
                        }
                        }
                    }
                    this.state = 1307;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 106, this.context);
                }
                }
                break;
            case 2:
                {
                localContext = new TablePivotRefContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 1308;
                this.tableReference();
                this.state = 1309;
                this.pivotReference();
                this.state = 1311;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 107, this.context) ) {
                case 1:
                    {
                    this.state = 1310;
                    this.tableAlias();
                    }
                    break;
                }
                }
                break;
            case 3:
                {
                localContext = new TableRefViewRefContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 1313;
                this.tableReference();
                this.state = 1317;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 108, this.context);
                while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                    if (alternative === 1) {
                        {
                        {
                        this.state = 1314;
                        this.viewReference();
                        }
                        }
                    }
                    this.state = 1319;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 108, this.context);
                }
                this.state = 1321;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 109, this.context) ) {
                case 1:
                    {
                    this.state = 1320;
                    this.tableAlias();
                    }
                    break;
                }
                }
                break;
            case 4:
                {
                localContext = new ValuesClauseContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 1323;
                this.valuesCaluse();
                }
                break;
            case 5:
                {
                localContext = new TvfClauseTableExprContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 1324;
                this.tvfClause();
                this.state = 1326;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 110, this.context) ) {
                case 1:
                    {
                    this.state = 1325;
                    this.tableAlias();
                    }
                    break;
                }
                }
                break;
            case 6:
                {
                localContext = new WindowTVFClauseForTableExprContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 1328;
                this.windowTVFClause();
                }
                break;
            }
            this.context!.stop = this.tokenStream.LT(-1);
            this.state = 1358;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 118, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    if (this.parseListeners != null) {
                        this.triggerExitRuleEvent();
                    }
                    previousContext = localContext;
                    {
                    {
                    localContext = new TableExpOpTableRefContext(new TableExpressionContext(parentContext, parentState));
                    this.pushNewRecursionContext(localContext, _startState, SparkSQLParser.RULE_tableExpression);
                    this.state = 1331;
                    if (!(this.precpred(this.context, 4))) {
                        throw this.createFailedPredicateException("this.precpred(this.context, 4)");
                    }
                    this.state = 1333;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 350) {
                        {
                        this.state = 1332;
                        this.match(SparkSQLParser.KW_NATURAL);
                        }
                    }

                    this.state = 1336;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 252 || _la === 298 || _la === 312 || _la === 333 || _la === 394) {
                        {
                        this.state = 1335;
                        _la = this.tokenStream.LA(1);
                        if(!(_la === 252 || _la === 298 || _la === 312 || _la === 333 || _la === 394)) {
                        this.errorHandler.recoverInline(this);
                        }
                        else {
                            this.errorHandler.reportMatch(this);
                            this.consume();
                        }
                        }
                    }

                    this.state = 1339;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 366) {
                        {
                        this.state = 1338;
                        this.match(SparkSQLParser.KW_OUTER);
                        }
                    }

                    this.state = 1342;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 402) {
                        {
                        this.state = 1341;
                        this.match(SparkSQLParser.KW_SEMI);
                        }
                    }

                    this.state = 1344;
                    this.match(SparkSQLParser.KW_JOIN);
                    this.state = 1345;
                    this.tableExpression(0);
                    this.state = 1347;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 116, this.context) ) {
                    case 1:
                        {
                        this.state = 1346;
                        this.joinCondition();
                        }
                        break;
                    }
                    this.state = 1353;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 117, this.context);
                    while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                        if (alternative === 1) {
                            {
                            {
                            this.state = 1349;
                            this.match(SparkSQLParser.COMMA);
                            this.state = 1350;
                            this.tableReference();
                            }
                            }
                        }
                        this.state = 1355;
                        this.errorHandler.sync(this);
                        alternative = this.interpreter.adaptivePredict(this.tokenStream, 117, this.context);
                    }
                    }
                    }
                }
                this.state = 1360;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 118, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.unrollRecursionContexts(parentContext);
        }
        return localContext;
    }
    public tvfClause(): TvfClauseContext {
        let localContext = new TvfClauseContext(this.context, this.state);
        this.enterRule(localContext, 130, SparkSQLParser.RULE_tvfClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1361;
            this.rangeClause();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public rangeClause(): RangeClauseContext {
        let localContext = new RangeClauseContext(this.context, this.state);
        this.enterRule(localContext, 132, SparkSQLParser.RULE_rangeClause);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1363;
            this.match(SparkSQLParser.KW_RANGE);
            this.state = 1364;
            this.match(SparkSQLParser.LR_BRACKET);
            this.state = 1365;
            this.expression();
            this.state = 1370;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 480) {
                {
                {
                this.state = 1366;
                this.match(SparkSQLParser.COMMA);
                this.state = 1367;
                this.expression();
                }
                }
                this.state = 1372;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 1373;
            this.match(SparkSQLParser.RR_BRACKET);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public viewReference(): ViewReferenceContext {
        let localContext = new ViewReferenceContext(this.context, this.state);
        this.enterRule(localContext, 134, SparkSQLParser.RULE_viewReference);
        let _la: number;
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1375;
            this.match(SparkSQLParser.KW_LATERAL);
            this.state = 1376;
            this.match(SparkSQLParser.KW_VIEW);
            this.state = 1378;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 366) {
                {
                this.state = 1377;
                this.match(SparkSQLParser.KW_OUTER);
                }
            }

            this.state = 1380;
            this.funtionBody();
            this.state = 1382;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 121, this.context) ) {
            case 1:
                {
                this.state = 1381;
                this.tableAlias();
                }
                break;
            }
            this.state = 1384;
            this.match(SparkSQLParser.KW_AS);
            this.state = 1385;
            this.columnAlias();
            this.state = 1390;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 122, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 1386;
                    this.match(SparkSQLParser.COMMA);
                    this.state = 1387;
                    this.columnAlias();
                    }
                    }
                }
                this.state = 1392;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 122, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public pivotReference(): PivotReferenceContext {
        let localContext = new PivotReferenceContext(this.context, this.state);
        this.enterRule(localContext, 136, SparkSQLParser.RULE_pivotReference);
        let _la: number;
        try {
            this.state = 1407;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case SparkSQLParser.KW_PIVOT:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1393;
                this.match(SparkSQLParser.KW_PIVOT);
                this.state = 1394;
                this.match(SparkSQLParser.LR_BRACKET);
                this.state = 1395;
                this.pivotBody();
                this.state = 1396;
                this.match(SparkSQLParser.RR_BRACKET);
                }
                break;
            case SparkSQLParser.KW_UNPIVOT:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1398;
                this.match(SparkSQLParser.KW_UNPIVOT);
                this.state = 1401;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 47 || _la === 70) {
                    {
                    this.state = 1399;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 47 || _la === 70)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 1400;
                    this.match(SparkSQLParser.KW_NULLS);
                    }
                }

                this.state = 1403;
                this.match(SparkSQLParser.LR_BRACKET);
                this.state = 1404;
                this.unpivotBody();
                this.state = 1405;
                this.match(SparkSQLParser.RR_BRACKET);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tableReference(): TableReferenceContext {
        let localContext = new TableReferenceContext(this.context, this.state);
        this.enterRule(localContext, 138, SparkSQLParser.RULE_tableReference);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1409;
            this.tablePrimary();
            this.state = 1411;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 125, this.context) ) {
            case 1:
                {
                this.state = 1410;
                this.tableAlias();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tablePrimary(): TablePrimaryContext {
        let localContext = new TablePrimaryContext(this.context, this.state);
        this.enterRule(localContext, 140, SparkSQLParser.RULE_tablePrimary);
        let _la: number;
        try {
            this.state = 1454;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 131, this.context) ) {
            case 1:
                localContext = new TablePathForTablePrimaryContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1414;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 422) {
                    {
                    this.state = 1413;
                    this.match(SparkSQLParser.KW_TABLE);
                    }
                }

                this.state = 1416;
                this.tablePath();
                this.state = 1418;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 127, this.context) ) {
                case 1:
                    {
                    this.state = 1417;
                    this.systemTimePeriod();
                    }
                    break;
                }
                }
                break;
            case 2:
                localContext = new LateralTableContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1420;
                this.match(SparkSQLParser.KW_LATERAL);
                this.state = 1421;
                this.match(SparkSQLParser.KW_TABLE);
                this.state = 1424;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 128, this.context) ) {
                case 1:
                    {
                    this.state = 1422;
                    this.funtionBody();
                    }
                    break;
                case 2:
                    {
                    this.state = 1423;
                    this.complexDataTypeExpression();
                    }
                    break;
                }
                }
                break;
            case 3:
                localContext = new LateralTableExplodeContext(localContext);
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1426;
                this.match(SparkSQLParser.KW_LATERAL);
                this.state = 1427;
                this.match(SparkSQLParser.KW_TABLE);
                this.state = 1428;
                this.match(SparkSQLParser.KW_EXPLODE);
                this.state = 1429;
                this.match(SparkSQLParser.LR_BRACKET);
                this.state = 1432;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 129, this.context) ) {
                case 1:
                    {
                    this.state = 1430;
                    this.funtionBody();
                    }
                    break;
                case 2:
                    {
                    this.state = 1431;
                    this.complexDataTypeExpression();
                    }
                    break;
                }
                this.state = 1434;
                this.match(SparkSQLParser.RR_BRACKET);
                }
                break;
            case 4:
                localContext = new LateralQueryContext(localContext);
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 1436;
                this.match(SparkSQLParser.KW_LATERAL);
                this.state = 1437;
                this.match(SparkSQLParser.LR_BRACKET);
                this.state = 1438;
                this.queryStatement(0);
                this.state = 1439;
                this.match(SparkSQLParser.RR_BRACKET);
                }
                break;
            case 5:
                localContext = new SubQueryContext(localContext);
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 1441;
                this.match(SparkSQLParser.LR_BRACKET);
                this.state = 1445;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 296 || _la === 401 || ((((_la - 453)) & ~0x1F) === 0 && ((1 << (_la - 453)) & 276824065) !== 0)) {
                    {
                    {
                    this.state = 1442;
                    this.queryStatement(0);
                    }
                    }
                    this.state = 1447;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 1448;
                this.match(SparkSQLParser.RR_BRACKET);
                }
                break;
            case 6:
                localContext = new UnsetExprContext(localContext);
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 1449;
                this.match(SparkSQLParser.KW_UNSET);
                this.state = 1450;
                this.match(SparkSQLParser.LR_BRACKET);
                this.state = 1451;
                this.expression();
                this.state = 1452;
                this.match(SparkSQLParser.RR_BRACKET);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public funtionBody(): FuntionBodyContext {
        let localContext = new FuntionBodyContext(this.context, this.state);
        this.enterRule(localContext, 142, SparkSQLParser.RULE_funtionBody);
        let _la: number;
        try {
            let alternative: number;
            this.state = 1503;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 139, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1456;
                this.functionName();
                this.state = 1457;
                this.match(SparkSQLParser.LR_BRACKET);
                this.state = 1460;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 132, this.context) ) {
                case 1:
                    {
                    this.state = 1458;
                    this.funtionBody();
                    }
                    break;
                case 2:
                    {
                    this.state = 1459;
                    this.functionParam();
                    }
                    break;
                }
                this.state = 1469;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 480) {
                    {
                    {
                    this.state = 1462;
                    this.match(SparkSQLParser.COMMA);
                    this.state = 1465;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 133, this.context) ) {
                    case 1:
                        {
                        this.state = 1463;
                        this.funtionBody();
                        }
                        break;
                    case 2:
                        {
                        this.state = 1464;
                        this.functionParam();
                        }
                        break;
                    }
                    }
                    }
                    this.state = 1471;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 1472;
                this.match(SparkSQLParser.RR_BRACKET);
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1474;
                this.functionName();
                this.state = 1475;
                this.match(SparkSQLParser.LR_BRACKET);
                this.state = 1478;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 135, this.context) ) {
                case 1:
                    {
                    this.state = 1476;
                    this.funtionBody();
                    }
                    break;
                case 2:
                    {
                    this.state = 1477;
                    this.functionParam();
                    }
                    break;
                }
                this.state = 1487;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 480) {
                    {
                    {
                    this.state = 1480;
                    this.match(SparkSQLParser.COMMA);
                    this.state = 1483;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 136, this.context) ) {
                    case 1:
                        {
                        this.state = 1481;
                        this.funtionBody();
                        }
                        break;
                    case 2:
                        {
                        this.state = 1482;
                        this.functionParam();
                        }
                        break;
                    }
                    }
                    }
                    this.state = 1489;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 1490;
                this.match(SparkSQLParser.RR_BRACKET);
                this.state = 1491;
                this.match(SparkSQLParser.LR_BRACKET);
                this.state = 1492;
                this.match(SparkSQLParser.KW_AS);
                this.state = 1493;
                this.tableAlias();
                this.state = 1494;
                this.match(SparkSQLParser.RR_BRACKET);
                this.state = 1495;
                this.projectItemDefinition();
                this.state = 1500;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 138, this.context);
                while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                    if (alternative === 1) {
                        {
                        {
                        this.state = 1496;
                        this.match(SparkSQLParser.COMMA);
                        this.state = 1497;
                        this.projectItemDefinition();
                        }
                        }
                    }
                    this.state = 1502;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 138, this.context);
                }
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public unpivotBody(): UnpivotBodyContext {
        let localContext = new UnpivotBodyContext(this.context, this.state);
        this.enterRule(localContext, 144, SparkSQLParser.RULE_unpivotBody);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1507;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 140, this.context) ) {
            case 1:
                {
                this.state = 1505;
                this.columnName();
                }
                break;
            case 2:
                {
                this.state = 1506;
                this.columnNameList();
                }
                break;
            }
            this.state = 1509;
            this.match(SparkSQLParser.KW_FOR);
            this.state = 1510;
            this.columnName();
            this.state = 1511;
            this.match(SparkSQLParser.KW_IN);
            this.state = 1512;
            this.expressionAsAliasList();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public pivotBody(): PivotBodyContext {
        let localContext = new PivotBodyContext(this.context, this.state);
        this.enterRule(localContext, 146, SparkSQLParser.RULE_pivotBody);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1514;
            this.expressionAsAlias();
            {
            this.state = 1515;
            this.match(SparkSQLParser.COMMA);
            this.state = 1516;
            this.expressionAsAlias();
            }
            this.state = 1518;
            this.match(SparkSQLParser.KW_FOR);
            this.state = 1521;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 141, this.context) ) {
            case 1:
                {
                this.state = 1519;
                this.columnName();
                }
                break;
            case 2:
                {
                this.state = 1520;
                this.columnNameList();
                }
                break;
            }
            this.state = 1523;
            this.match(SparkSQLParser.KW_IN);
            this.state = 1524;
            this.expressionAsAliasList();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public expressionAsAlias(): ExpressionAsAliasContext {
        let localContext = new ExpressionAsAliasContext(this.context, this.state);
        this.enterRule(localContext, 148, SparkSQLParser.RULE_expressionAsAlias);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1526;
            this.expression();
            this.state = 1529;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 212) {
                {
                this.state = 1527;
                this.match(SparkSQLParser.KW_AS);
                this.state = 1528;
                this.columnAlias();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public expressionAsAliasList(): ExpressionAsAliasListContext {
        let localContext = new ExpressionAsAliasListContext(this.context, this.state);
        this.enterRule(localContext, 150, SparkSQLParser.RULE_expressionAsAliasList);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1531;
            this.match(SparkSQLParser.LR_BRACKET);
            this.state = 1532;
            this.expressionAsAlias();
            this.state = 1537;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 480) {
                {
                {
                this.state = 1533;
                this.match(SparkSQLParser.COMMA);
                this.state = 1534;
                this.expressionAsAlias();
                }
                }
                this.state = 1539;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 1540;
            this.match(SparkSQLParser.RR_BRACKET);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public systemTimePeriod(): SystemTimePeriodContext {
        let localContext = new SystemTimePeriodContext(this.context, this.state);
        this.enterRule(localContext, 152, SparkSQLParser.RULE_systemTimePeriod);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1542;
            this.match(SparkSQLParser.KW_FOR);
            this.state = 1543;
            this.match(SparkSQLParser.KW_SYSTEM_TIME);
            this.state = 1544;
            this.match(SparkSQLParser.KW_AS);
            this.state = 1545;
            this.match(SparkSQLParser.KW_OF);
            this.state = 1546;
            this.dateTimeExpression();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public dateTimeExpression(): DateTimeExpressionContext {
        let localContext = new DateTimeExpressionContext(this.context, this.state);
        this.enterRule(localContext, 154, SparkSQLParser.RULE_dateTimeExpression);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1548;
            this.expression();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public inlineDataValueClause(): InlineDataValueClauseContext {
        let localContext = new InlineDataValueClauseContext(this.context, this.state);
        this.enterRule(localContext, 156, SparkSQLParser.RULE_inlineDataValueClause);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1550;
            this.expression();
            this.state = 1555;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 480) {
                {
                {
                this.state = 1551;
                this.match(SparkSQLParser.COMMA);
                this.state = 1552;
                this.expression();
                }
                }
                this.state = 1557;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 1559;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 4294684608) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & 4293654523) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & 4185849791) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & 4294967263) !== 0) || ((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & 3757047707) !== 0) || ((((_la - 160)) & ~0x1F) === 0 && ((1 << (_la - 160)) & 4252958679) !== 0) || ((((_la - 192)) & ~0x1F) === 0 && ((1 << (_la - 192)) & 1052543) !== 0) || _la === 338 || ((((_la - 483)) & ~0x1F) === 0 && ((1 << (_la - 483)) & 360449) !== 0)) {
                {
                this.state = 1558;
                this.tableAlias();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public windowTVFClause(): WindowTVFClauseContext {
        let localContext = new WindowTVFClauseContext(this.context, this.state);
        this.enterRule(localContext, 158, SparkSQLParser.RULE_windowTVFClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1561;
            this.match(SparkSQLParser.KW_TABLE);
            this.state = 1562;
            this.match(SparkSQLParser.LR_BRACKET);
            this.state = 1563;
            this.windowTVFExpression();
            this.state = 1564;
            this.match(SparkSQLParser.RR_BRACKET);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public windowTVFExpression(): WindowTVFExpressionContext {
        let localContext = new WindowTVFExpressionContext(this.context, this.state);
        this.enterRule(localContext, 160, SparkSQLParser.RULE_windowTVFExpression);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1566;
            this.windowTVFName();
            this.state = 1567;
            this.match(SparkSQLParser.LR_BRACKET);
            this.state = 1568;
            this.windowTVFParam();
            this.state = 1573;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 480) {
                {
                {
                this.state = 1569;
                this.match(SparkSQLParser.COMMA);
                this.state = 1570;
                this.windowTVFParam();
                }
                }
                this.state = 1575;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 1576;
            this.match(SparkSQLParser.RR_BRACKET);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public windowTVFName(): WindowTVFNameContext {
        let localContext = new WindowTVFNameContext(this.context, this.state);
        this.enterRule(localContext, 162, SparkSQLParser.RULE_windowTVFName);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1578;
            _la = this.tokenStream.LA(1);
            if(!(_la === 29 || _la === 66 || _la === 181)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public rowFormatDelimited(): RowFormatDelimitedContext {
        let localContext = new RowFormatDelimitedContext(this.context, this.state);
        this.enterRule(localContext, 164, SparkSQLParser.RULE_rowFormatDelimited);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1580;
            this.sparkRecordWriterPart();
            this.state = 1581;
            this.usingAsColumnPart();
            this.state = 1582;
            this.sparkRecordWriterPart();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public hiveSerde(): HiveSerdeContext {
        let localContext = new HiveSerdeContext(this.context, this.state);
        this.enterRule(localContext, 166, SparkSQLParser.RULE_hiveSerde);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1584;
            this.hiveSerdePart();
            this.state = 1585;
            this.usingAsColumnPart();
            this.state = 1586;
            this.hiveSerdePart();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public usingAsColumnPart(): UsingAsColumnPartContext {
        let localContext = new UsingAsColumnPartContext(this.context, this.state);
        this.enterRule(localContext, 168, SparkSQLParser.RULE_usingAsColumnPart);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1588;
            this.match(SparkSQLParser.KW_USING);
            this.state = 1589;
            this.stringLiteral();
            this.state = 1590;
            this.match(SparkSQLParser.KW_AS);
            {
            this.state = 1593;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 147, this.context) ) {
            case 1:
                {
                this.state = 1591;
                this.columnNameList();
                }
                break;
            case 2:
                {
                this.state = 1592;
                this.physicalColumnDefinitionList();
                }
                break;
            }
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public hiveSerdePart(): HiveSerdePartContext {
        let localContext = new HiveSerdePartContext(this.context, this.state);
        this.enterRule(localContext, 170, SparkSQLParser.RULE_hiveSerdePart);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1599;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 398) {
                {
                this.state = 1595;
                this.match(SparkSQLParser.KW_ROW);
                this.state = 1596;
                this.match(SparkSQLParser.KW_FORMAT);
                this.state = 1597;
                this.match(SparkSQLParser.KW_SERDE);
                this.state = 1598;
                this.stringLiteral();
                }
            }

            this.state = 1604;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 453) {
                {
                this.state = 1601;
                this.match(SparkSQLParser.KW_WITH);
                this.state = 1602;
                this.match(SparkSQLParser.KW_SERDEPROPERTIES);
                this.state = 1603;
                this.tableCanHasKeyPropertyList();
                }
            }

            this.state = 1608;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 387) {
                {
                this.state = 1606;
                this.match(SparkSQLParser.KW_RECORDWRITER);
                this.state = 1607;
                this.stringLiteral();
                }
            }

            this.state = 1611;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 294) {
                {
                this.state = 1610;
                this.fieldsTerminatedBy();
                }
            }

            this.state = 1615;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 134) {
                {
                this.state = 1613;
                this.match(SparkSQLParser.KW_RECORDREADER);
                this.state = 1614;
                this.stringLiteral();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tableCanHasKeyPropertyList(): TableCanHasKeyPropertyListContext {
        let localContext = new TableCanHasKeyPropertyListContext(this.context, this.state);
        this.enterRule(localContext, 172, SparkSQLParser.RULE_tableCanHasKeyPropertyList);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1617;
            this.match(SparkSQLParser.LR_BRACKET);
            this.state = 1620;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 153, this.context) ) {
            case 1:
                {
                this.state = 1618;
                this.tableProperty();
                }
                break;
            case 2:
                {
                this.state = 1619;
                this.tablePropertyKey();
                }
                break;
            }
            this.state = 1629;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 480) {
                {
                {
                this.state = 1622;
                this.match(SparkSQLParser.COMMA);
                this.state = 1625;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 154, this.context) ) {
                case 1:
                    {
                    this.state = 1623;
                    this.tableProperty();
                    }
                    break;
                case 2:
                    {
                    this.state = 1624;
                    this.tablePropertyKey();
                    }
                    break;
                }
                }
                }
                this.state = 1631;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 1632;
            this.match(SparkSQLParser.RR_BRACKET);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public sparkRecordWriterPart(): SparkRecordWriterPartContext {
        let localContext = new SparkRecordWriterPartContext(this.context, this.state);
        this.enterRule(localContext, 174, SparkSQLParser.RULE_sparkRecordWriterPart);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1635;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 156, this.context) ) {
            case 1:
                {
                this.state = 1634;
                this.rowFormatDelimted();
                }
                break;
            }
            this.state = 1638;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 157, this.context) ) {
            case 1:
                {
                this.state = 1637;
                this.fieldsTerminatedBy();
                }
                break;
            }
            this.state = 1644;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 158, this.context) ) {
            case 1:
                {
                this.state = 1640;
                this.match(SparkSQLParser.KW_LINES);
                this.state = 1641;
                this.match(SparkSQLParser.KW_TERMINATED);
                this.state = 1642;
                this.match(SparkSQLParser.KW_BY);
                this.state = 1643;
                this.stringLiteral();
                }
                break;
            }
            this.state = 1650;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 159, this.context) ) {
            case 1:
                {
                this.state = 1646;
                this.match(SparkSQLParser.KW_NULL);
                this.state = 1647;
                this.match(SparkSQLParser.KW_DEFINED);
                this.state = 1648;
                this.match(SparkSQLParser.KW_AS);
                this.state = 1649;
                this.stringLiteral();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public windowTVFParam(): WindowTVFParamContext {
        let localContext = new WindowTVFParamContext(this.context, this.state);
        this.enterRule(localContext, 176, SparkSQLParser.RULE_windowTVFParam);
        try {
            this.state = 1667;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 160, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1652;
                this.match(SparkSQLParser.KW_TABLE);
                this.state = 1653;
                this.timeAttrColumn();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1654;
                this.columnDescriptor();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1655;
                this.timeIntervalExpression();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 1656;
                this.match(SparkSQLParser.KW_DATA);
                this.state = 1657;
                this.match(SparkSQLParser.DOUBLE_RIGHT_ARROW);
                this.state = 1658;
                this.match(SparkSQLParser.KW_TABLE);
                this.state = 1659;
                this.timeAttrColumn();
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 1660;
                this.match(SparkSQLParser.KW_TIMECOL);
                this.state = 1661;
                this.match(SparkSQLParser.DOUBLE_RIGHT_ARROW);
                this.state = 1662;
                this.columnDescriptor();
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 1663;
                this.timeIntervalParamName();
                this.state = 1664;
                this.match(SparkSQLParser.DOUBLE_RIGHT_ARROW);
                this.state = 1665;
                this.timeIntervalExpression();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public timeIntervalParamName(): TimeIntervalParamNameContext {
        let localContext = new TimeIntervalParamNameContext(this.context, this.state);
        this.enterRule(localContext, 178, SparkSQLParser.RULE_timeIntervalParamName);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1669;
            _la = this.tokenStream.LA(1);
            if(!(_la === 30 || ((((_la - 159)) & ~0x1F) === 0 && ((1 << (_la - 159)) & 16643) !== 0) || _la === 360)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public columnDescriptor(): ColumnDescriptorContext {
        let localContext = new ColumnDescriptorContext(this.context, this.state);
        this.enterRule(localContext, 180, SparkSQLParser.RULE_columnDescriptor);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1671;
            this.match(SparkSQLParser.KW_DESCRIPTOR);
            this.state = 1672;
            this.match(SparkSQLParser.LR_BRACKET);
            this.state = 1673;
            this.uid();
            this.state = 1674;
            this.match(SparkSQLParser.RR_BRACKET);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public joinCondition(): JoinConditionContext {
        let localContext = new JoinConditionContext(this.context, this.state);
        this.enterRule(localContext, 182, SparkSQLParser.RULE_joinCondition);
        let _la: number;
        try {
            this.state = 1690;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case SparkSQLParser.KW_ON:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1676;
                this.match(SparkSQLParser.KW_ON);
                this.state = 1677;
                this.booleanExpression(0);
                }
                break;
            case SparkSQLParser.KW_USING:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1678;
                this.match(SparkSQLParser.KW_USING);
                this.state = 1679;
                this.match(SparkSQLParser.LR_BRACKET);
                this.state = 1680;
                this.uid();
                this.state = 1685;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 480) {
                    {
                    {
                    this.state = 1681;
                    this.match(SparkSQLParser.COMMA);
                    this.state = 1682;
                    this.uid();
                    }
                    }
                    this.state = 1687;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 1688;
                this.match(SparkSQLParser.RR_BRACKET);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public whereClause(): WhereClauseContext {
        let localContext = new WhereClauseContext(this.context, this.state);
        this.enterRule(localContext, 184, SparkSQLParser.RULE_whereClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1692;
            this.match(SparkSQLParser.KW_WHERE);
            this.state = 1693;
            this.booleanExpression(0);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public samplingQueries(): SamplingQueriesContext {
        let localContext = new SamplingQueriesContext(this.context, this.state);
        this.enterRule(localContext, 186, SparkSQLParser.RULE_samplingQueries);
        try {
            this.state = 1726;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 167, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1695;
                this.match(SparkSQLParser.KW_TABLESAMPLE);
                this.state = 1696;
                this.match(SparkSQLParser.LR_BRACKET);
                this.state = 1700;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 163, this.context) ) {
                case 1:
                    {
                    this.state = 1697;
                    this.decimalLiteral();
                    }
                    break;
                case 2:
                    {
                    this.state = 1698;
                    this.match(SparkSQLParser.DIG_LITERAL);
                    }
                    break;
                case 3:
                    {
                    this.state = 1699;
                    this.expression();
                    }
                    break;
                }
                this.state = 1702;
                this.match(SparkSQLParser.KW_PERCENT);
                this.state = 1703;
                this.match(SparkSQLParser.RR_BRACKET);
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1704;
                this.match(SparkSQLParser.KW_TABLESAMPLE);
                this.state = 1705;
                this.match(SparkSQLParser.LR_BRACKET);
                this.state = 1708;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 164, this.context) ) {
                case 1:
                    {
                    this.state = 1706;
                    this.match(SparkSQLParser.DIG_LITERAL);
                    }
                    break;
                case 2:
                    {
                    this.state = 1707;
                    this.expression();
                    }
                    break;
                }
                this.state = 1710;
                this.match(SparkSQLParser.KW_ROWS);
                this.state = 1711;
                this.match(SparkSQLParser.RR_BRACKET);
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1712;
                this.match(SparkSQLParser.KW_TABLESAMPLE);
                this.state = 1713;
                this.match(SparkSQLParser.LR_BRACKET);
                this.state = 1714;
                this.match(SparkSQLParser.KW_BUCKET);
                this.state = 1717;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 165, this.context) ) {
                case 1:
                    {
                    this.state = 1715;
                    this.match(SparkSQLParser.DIG_LITERAL);
                    }
                    break;
                case 2:
                    {
                    this.state = 1716;
                    this.expression();
                    }
                    break;
                }
                this.state = 1719;
                this.match(SparkSQLParser.KW_OUT);
                this.state = 1720;
                this.match(SparkSQLParser.KW_OF);
                this.state = 1723;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 166, this.context) ) {
                case 1:
                    {
                    this.state = 1721;
                    this.match(SparkSQLParser.DIG_LITERAL);
                    }
                    break;
                case 2:
                    {
                    this.state = 1722;
                    this.expression();
                    }
                    break;
                }
                this.state = 1725;
                this.match(SparkSQLParser.RR_BRACKET);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public someByClause(): SomeByClauseContext {
        let localContext = new SomeByClauseContext(this.context, this.state);
        this.enterRule(localContext, 188, SparkSQLParser.RULE_someByClause);
        try {
            this.state = 1732;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case SparkSQLParser.KW_CLUSTERED:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1728;
                this.clusteredByClause();
                }
                break;
            case SparkSQLParser.KW_CLUSTER:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1729;
                this.clusterByClause();
                }
                break;
            case SparkSQLParser.KW_DISTRIBUTE:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1730;
                this.distributeByClause();
                }
                break;
            case SparkSQLParser.KW_GROUP:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 1731;
                this.groupByClause();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public clusterByClause(): ClusterByClauseContext {
        let localContext = new ClusterByClauseContext(this.context, this.state);
        this.enterRule(localContext, 190, SparkSQLParser.RULE_clusterByClause);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1734;
            this.match(SparkSQLParser.KW_CLUSTER);
            this.state = 1735;
            this.match(SparkSQLParser.KW_BY);
            this.state = 1736;
            this.groupItemDefinition();
            this.state = 1741;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 169, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 1737;
                    this.match(SparkSQLParser.COMMA);
                    this.state = 1738;
                    this.groupItemDefinition();
                    }
                    }
                }
                this.state = 1743;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 169, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public clusteredByClause(): ClusteredByClauseContext {
        let localContext = new ClusteredByClauseContext(this.context, this.state);
        this.enterRule(localContext, 192, SparkSQLParser.RULE_clusteredByClause);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1744;
            this.match(SparkSQLParser.KW_CLUSTERED);
            this.state = 1745;
            this.match(SparkSQLParser.KW_BY);
            this.state = 1746;
            this.groupItemDefinition();
            this.state = 1751;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 170, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 1747;
                    this.match(SparkSQLParser.COMMA);
                    this.state = 1748;
                    this.groupItemDefinition();
                    }
                    }
                }
                this.state = 1753;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 170, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public distributeByClause(): DistributeByClauseContext {
        let localContext = new DistributeByClauseContext(this.context, this.state);
        this.enterRule(localContext, 194, SparkSQLParser.RULE_distributeByClause);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1754;
            this.match(SparkSQLParser.KW_DISTRIBUTE);
            this.state = 1755;
            this.match(SparkSQLParser.KW_BY);
            this.state = 1756;
            this.groupItemDefinition();
            this.state = 1761;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 171, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 1757;
                    this.match(SparkSQLParser.COMMA);
                    this.state = 1758;
                    this.groupItemDefinition();
                    }
                    }
                }
                this.state = 1763;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 171, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public groupByClause(): GroupByClauseContext {
        let localContext = new GroupByClauseContext(this.context, this.state);
        this.enterRule(localContext, 196, SparkSQLParser.RULE_groupByClause);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1764;
            this.match(SparkSQLParser.KW_GROUP);
            this.state = 1765;
            this.match(SparkSQLParser.KW_BY);
            {
            this.state = 1767;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 172, this.context) ) {
            case 1:
                {
                this.state = 1766;
                this.groupItemDefinition();
                }
                break;
            }
            this.state = 1773;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 173, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 1769;
                    this.match(SparkSQLParser.COMMA);
                    this.state = 1770;
                    this.groupItemDefinition();
                    }
                    }
                }
                this.state = 1775;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 173, this.context);
            }
            }
            this.state = 1777;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 174, this.context) ) {
            case 1:
                {
                this.state = 1776;
                this.groupingSet();
                }
                break;
            }
            this.state = 1781;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 175, this.context) ) {
            case 1:
                {
                this.state = 1779;
                this.match(SparkSQLParser.KW_WITH);
                this.state = 1780;
                this.groupingSetsNotionName();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public groupItemDefinition(): GroupItemDefinitionContext {
        let localContext = new GroupItemDefinitionContext(this.context, this.state);
        this.enterRule(localContext, 198, SparkSQLParser.RULE_groupItemDefinition);
        let _la: number;
        try {
            let alternative: number;
            this.state = 1817;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 179, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1783;
                this.expression();
                this.state = 1788;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 176, this.context);
                while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                    if (alternative === 1) {
                        {
                        {
                        this.state = 1784;
                        this.match(SparkSQLParser.COMMA);
                        this.state = 1785;
                        this.expression();
                        }
                        }
                    }
                    this.state = 1790;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 176, this.context);
                }
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1791;
                this.groupWindowFunction();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1792;
                this.match(SparkSQLParser.LR_BRACKET);
                this.state = 1793;
                this.match(SparkSQLParser.RR_BRACKET);
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 1794;
                this.match(SparkSQLParser.LR_BRACKET);
                this.state = 1795;
                this.expression();
                this.state = 1800;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 480) {
                    {
                    {
                    this.state = 1796;
                    this.match(SparkSQLParser.COMMA);
                    this.state = 1797;
                    this.expression();
                    }
                    }
                    this.state = 1802;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 1803;
                this.match(SparkSQLParser.RR_BRACKET);
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 1805;
                this.groupingSetsNotionName();
                this.state = 1806;
                this.match(SparkSQLParser.LR_BRACKET);
                this.state = 1807;
                this.expression();
                this.state = 1812;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 480) {
                    {
                    {
                    this.state = 1808;
                    this.match(SparkSQLParser.COMMA);
                    this.state = 1809;
                    this.expression();
                    }
                    }
                    this.state = 1814;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 1815;
                this.match(SparkSQLParser.RR_BRACKET);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public groupingSet(): GroupingSetContext {
        let localContext = new GroupingSetContext(this.context, this.state);
        this.enterRule(localContext, 200, SparkSQLParser.RULE_groupingSet);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1819;
            this.groupingSets();
            this.state = 1820;
            this.match(SparkSQLParser.LR_BRACKET);
            this.state = 1821;
            this.groupItemDefinition();
            this.state = 1826;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 480) {
                {
                {
                this.state = 1822;
                this.match(SparkSQLParser.COMMA);
                this.state = 1823;
                this.groupItemDefinition();
                }
                }
                this.state = 1828;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 1829;
            this.match(SparkSQLParser.RR_BRACKET);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public groupingSets(): GroupingSetsContext {
        let localContext = new GroupingSetsContext(this.context, this.state);
        this.enterRule(localContext, 202, SparkSQLParser.RULE_groupingSets);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1831;
            this.match(SparkSQLParser.KW_GROUPING);
            this.state = 1832;
            this.match(SparkSQLParser.KW_SETS);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public groupingSetsNotionName(): GroupingSetsNotionNameContext {
        let localContext = new GroupingSetsNotionNameContext(this.context, this.state);
        this.enterRule(localContext, 204, SparkSQLParser.RULE_groupingSetsNotionName);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1834;
            _la = this.tokenStream.LA(1);
            if(!(_la === 253 || _la === 397)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public groupWindowFunction(): GroupWindowFunctionContext {
        let localContext = new GroupWindowFunctionContext(this.context, this.state);
        this.enterRule(localContext, 206, SparkSQLParser.RULE_groupWindowFunction);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1836;
            this.groupWindowFunctionName();
            this.state = 1837;
            this.match(SparkSQLParser.LR_BRACKET);
            this.state = 1838;
            this.timeAttrColumn();
            this.state = 1839;
            this.match(SparkSQLParser.COMMA);
            this.state = 1840;
            this.timeIntervalExpression();
            this.state = 1841;
            this.match(SparkSQLParser.RR_BRACKET);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public groupWindowFunctionName(): GroupWindowFunctionNameContext {
        let localContext = new GroupWindowFunctionNameContext(this.context, this.state);
        this.enterRule(localContext, 208, SparkSQLParser.RULE_groupWindowFunctionName);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1843;
            _la = this.tokenStream.LA(1);
            if(!(_la === 66 || _la === 155 || _la === 181)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public timeAttrColumn(): TimeAttrColumnContext {
        let localContext = new TimeAttrColumnContext(this.context, this.state);
        this.enterRule(localContext, 210, SparkSQLParser.RULE_timeAttrColumn);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1845;
            this.uid();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public havingClause(): HavingClauseContext {
        let localContext = new HavingClauseContext(this.context, this.state);
        this.enterRule(localContext, 212, SparkSQLParser.RULE_havingClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1847;
            this.match(SparkSQLParser.KW_HAVING);
            this.state = 1848;
            this.booleanExpression(0);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public windowClause(): WindowClauseContext {
        let localContext = new WindowClauseContext(this.context, this.state);
        this.enterRule(localContext, 214, SparkSQLParser.RULE_windowClause);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1850;
            this.match(SparkSQLParser.KW_WINDOW);
            this.state = 1851;
            this.namedWindow();
            this.state = 1856;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 181, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 1852;
                    this.match(SparkSQLParser.COMMA);
                    this.state = 1853;
                    this.namedWindow();
                    }
                    }
                }
                this.state = 1858;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 181, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public namedWindow(): NamedWindowContext {
        let localContext = new NamedWindowContext(this.context, this.state);
        this.enterRule(localContext, 216, SparkSQLParser.RULE_namedWindow);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1859;
            localContext._name = this.errorCapturingIdentifier();
            this.state = 1860;
            this.match(SparkSQLParser.KW_AS);
            this.state = 1861;
            this.windowSpec();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public windowSpec(): WindowSpecContext {
        let localContext = new WindowSpecContext(this.context, this.state);
        this.enterRule(localContext, 218, SparkSQLParser.RULE_windowSpec);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1864;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 4294684608) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & 4293654523) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & 4185849791) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & 4294967263) !== 0) || ((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & 3757047707) !== 0) || ((((_la - 160)) & ~0x1F) === 0 && ((1 << (_la - 160)) & 4252958679) !== 0) || ((((_la - 192)) & ~0x1F) === 0 && ((1 << (_la - 192)) & 3967) !== 0) || _la === 338 || ((((_la - 483)) & ~0x1F) === 0 && ((1 << (_la - 483)) & 360449) !== 0)) {
                {
                this.state = 1863;
                localContext._name = this.errorCapturingIdentifier();
                }
            }

            this.state = 1866;
            this.match(SparkSQLParser.LR_BRACKET);
            this.state = 1868;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 371) {
                {
                this.state = 1867;
                this.partitionByClause();
                }
            }

            this.state = 1871;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 415) {
                {
                this.state = 1870;
                this.sortByCaluse();
                }
            }

            this.state = 1874;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 364) {
                {
                this.state = 1873;
                this.orderByCaluse();
                }
            }

            this.state = 1877;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 386 || _la === 399) {
                {
                this.state = 1876;
                this.windowFrame();
                }
            }

            this.state = 1879;
            this.match(SparkSQLParser.RR_BRACKET);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public matchRecognizeClause(): MatchRecognizeClauseContext {
        let localContext = new MatchRecognizeClauseContext(this.context, this.state);
        this.enterRule(localContext, 220, SparkSQLParser.RULE_matchRecognizeClause);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1881;
            this.match(SparkSQLParser.KW_MATCH_RECOGNIZE);
            this.state = 1882;
            this.match(SparkSQLParser.LR_BRACKET);
            this.state = 1884;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 371) {
                {
                this.state = 1883;
                this.partitionByClause();
                }
            }

            this.state = 1887;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 415) {
                {
                this.state = 1886;
                this.sortByCaluse();
                }
            }

            this.state = 1890;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 364) {
                {
                this.state = 1889;
                this.orderByCaluse();
                }
            }

            this.state = 1893;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 341) {
                {
                this.state = 1892;
                this.measuresClause();
                }
            }

            this.state = 1896;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 205 || _la === 362) {
                {
                this.state = 1895;
                this.outputMode();
                }
            }

            this.state = 1899;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 8) {
                {
                this.state = 1898;
                this.afterMatchStrategy();
                }
            }

            this.state = 1902;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 372) {
                {
                this.state = 1901;
                this.patternDefinition();
                }
            }

            this.state = 1904;
            this.patternVariablesDefinition();
            this.state = 1905;
            this.match(SparkSQLParser.RR_BRACKET);
            this.state = 1910;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 195, this.context) ) {
            case 1:
                {
                this.state = 1907;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 212) {
                    {
                    this.state = 1906;
                    this.match(SparkSQLParser.KW_AS);
                    }
                }

                this.state = 1909;
                this.identifier();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public orderByCaluse(): OrderByCaluseContext {
        let localContext = new OrderByCaluseContext(this.context, this.state);
        this.enterRule(localContext, 222, SparkSQLParser.RULE_orderByCaluse);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1912;
            this.match(SparkSQLParser.KW_ORDER);
            this.state = 1913;
            this.match(SparkSQLParser.KW_BY);
            this.state = 1914;
            this.orderItemDefinition();
            this.state = 1919;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 196, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 1915;
                    this.match(SparkSQLParser.COMMA);
                    this.state = 1916;
                    this.orderItemDefinition();
                    }
                    }
                }
                this.state = 1921;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 196, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public sortByCaluse(): SortByCaluseContext {
        let localContext = new SortByCaluseContext(this.context, this.state);
        this.enterRule(localContext, 224, SparkSQLParser.RULE_sortByCaluse);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1922;
            this.match(SparkSQLParser.KW_SORT);
            this.state = 1923;
            this.match(SparkSQLParser.KW_BY);
            this.state = 1924;
            this.orderItemDefinition();
            this.state = 1929;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 197, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 1925;
                    this.match(SparkSQLParser.COMMA);
                    this.state = 1926;
                    this.orderItemDefinition();
                    }
                    }
                }
                this.state = 1931;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 197, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public orderItemDefinition(): OrderItemDefinitionContext {
        let localContext = new OrderItemDefinitionContext(this.context, this.state);
        this.enterRule(localContext, 226, SparkSQLParser.RULE_orderItemDefinition);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1932;
            this.expression();
            this.state = 1934;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 198, this.context) ) {
            case 1:
                {
                this.state = 1933;
                localContext._ordering = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(_la === 10 || _la === 37)) {
                    localContext._ordering = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            }
            this.state = 1938;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 199, this.context) ) {
            case 1:
                {
                this.state = 1936;
                this.match(SparkSQLParser.KW_NULLS);
                this.state = 1937;
                localContext._nullOrder = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(_la === 54 || _la === 84)) {
                    localContext._nullOrder = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public limitClause(): LimitClauseContext {
        let localContext = new LimitClauseContext(this.context, this.state);
        this.enterRule(localContext, 228, SparkSQLParser.RULE_limitClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1940;
            this.match(SparkSQLParser.KW_LIMIT);
            this.state = 1943;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case SparkSQLParser.KW_ALL:
                {
                this.state = 1941;
                this.match(SparkSQLParser.KW_ALL);
                }
                break;
            case SparkSQLParser.KW_ADD:
            case SparkSQLParser.KW_ADMIN:
            case SparkSQLParser.KW_AFTER:
            case SparkSQLParser.KW_ANALYZE:
            case SparkSQLParser.KW_ASC:
            case SparkSQLParser.KW_BEFORE:
            case SparkSQLParser.KW_BYTES:
            case SparkSQLParser.KW_CASCADE:
            case SparkSQLParser.KW_CATALOG:
            case SparkSQLParser.KW_CATALOGS:
            case SparkSQLParser.KW_CENTURY:
            case SparkSQLParser.KW_CHAIN:
            case SparkSQLParser.KW_CHANGELOG_MODE:
            case SparkSQLParser.KW_CHARACTERS:
            case SparkSQLParser.KW_COMMENT:
            case SparkSQLParser.KW_COMPACT:
            case SparkSQLParser.KW_COLUMNS:
            case SparkSQLParser.KW_CONSTRAINTS:
            case SparkSQLParser.KW_CONSTRUCTOR:
            case SparkSQLParser.KW_COMPUTE:
            case SparkSQLParser.KW_CUMULATE:
            case SparkSQLParser.KW_DATA:
            case SparkSQLParser.KW_DATABASE:
            case SparkSQLParser.KW_DATABASES:
            case SparkSQLParser.KW_DAYS:
            case SparkSQLParser.KW_DECADE:
            case SparkSQLParser.KW_DEFINED:
            case SparkSQLParser.KW_DESC:
            case SparkSQLParser.KW_DESCRIPTOR:
            case SparkSQLParser.KW_DIV:
            case SparkSQLParser.KW_ENCODING:
            case SparkSQLParser.KW_ENFORCED:
            case SparkSQLParser.KW_ENGINE:
            case SparkSQLParser.KW_ERROR:
            case SparkSQLParser.KW_ESTIMATED_COST:
            case SparkSQLParser.KW_EXCEPTION:
            case SparkSQLParser.KW_EXCLUDE:
            case SparkSQLParser.KW_EXCLUDING:
            case SparkSQLParser.KW_EXTENDED:
            case SparkSQLParser.KW_FILE:
            case SparkSQLParser.KW_FINAL:
            case SparkSQLParser.KW_FIRST:
            case SparkSQLParser.KW_FOLLOWING:
            case SparkSQLParser.KW_FORMAT:
            case SparkSQLParser.KW_FORTRAN:
            case SparkSQLParser.KW_FOUND:
            case SparkSQLParser.KW_FRAC_SECOND:
            case SparkSQLParser.KW_FUNCTIONS:
            case SparkSQLParser.KW_GENERAL:
            case SparkSQLParser.KW_GENERATED:
            case SparkSQLParser.KW_GO:
            case SparkSQLParser.KW_GOTO:
            case SparkSQLParser.KW_GRANTED:
            case SparkSQLParser.KW_HOP:
            case SparkSQLParser.KW_HOURS:
            case SparkSQLParser.KW_IF:
            case SparkSQLParser.KW_IGNORE:
            case SparkSQLParser.KW_INCREMENT:
            case SparkSQLParser.KW_INPUT:
            case SparkSQLParser.KW_INVOKER:
            case SparkSQLParser.KW_JAR:
            case SparkSQLParser.KW_JARS:
            case SparkSQLParser.KW_JAVA:
            case SparkSQLParser.KW_JSON:
            case SparkSQLParser.KW_JSON_EXECUTION_PLAN:
            case SparkSQLParser.KW_KEY:
            case SparkSQLParser.KW_KEY_MEMBER:
            case SparkSQLParser.KW_KEY_TYPE:
            case SparkSQLParser.KW_LABEL:
            case SparkSQLParser.KW_LAST:
            case SparkSQLParser.KW_LENGTH:
            case SparkSQLParser.KW_LEVEL:
            case SparkSQLParser.KW_LOAD:
            case SparkSQLParser.KW_MAP:
            case SparkSQLParser.KW_MICROSECOND:
            case SparkSQLParser.KW_MILLENNIUM:
            case SparkSQLParser.KW_MILLISECOND:
            case SparkSQLParser.KW_MINUTES:
            case SparkSQLParser.KW_MINVALUE:
            case SparkSQLParser.KW_MODIFY:
            case SparkSQLParser.KW_MODULES:
            case SparkSQLParser.KW_MONTHS:
            case SparkSQLParser.KW_NANOSECOND:
            case SparkSQLParser.KW_NULLS:
            case SparkSQLParser.KW_NUMBER:
            case SparkSQLParser.KW_OPTION:
            case SparkSQLParser.KW_OPTIONS:
            case SparkSQLParser.KW_ORDERING:
            case SparkSQLParser.KW_OUTPUT:
            case SparkSQLParser.KW_OVERWRITE:
            case SparkSQLParser.KW_OVERWRITING:
            case SparkSQLParser.KW_PARTITIONED:
            case SparkSQLParser.KW_PARTITIONS:
            case SparkSQLParser.KW_PASSING:
            case SparkSQLParser.KW_PAST:
            case SparkSQLParser.KW_PATH:
            case SparkSQLParser.KW_PLACING:
            case SparkSQLParser.KW_PLAN:
            case SparkSQLParser.KW_PRECEDING:
            case SparkSQLParser.KW_PRESERVE:
            case SparkSQLParser.KW_PRIOR:
            case SparkSQLParser.KW_PRIVILEGES:
            case SparkSQLParser.KW_PUBLIC:
            case SparkSQLParser.KW_PYTHON:
            case SparkSQLParser.KW_PYTHON_FILES:
            case SparkSQLParser.KW_PYTHON_REQUIREMENTS:
            case SparkSQLParser.KW_PYTHON_DEPENDENCIES:
            case SparkSQLParser.KW_PYTHON_JAR:
            case SparkSQLParser.KW_PYTHON_ARCHIVES:
            case SparkSQLParser.KW_PYTHON_PARAMETER:
            case SparkSQLParser.KW_QUARTER:
            case SparkSQLParser.KW_RAW:
            case SparkSQLParser.KW_READ:
            case SparkSQLParser.KW_RELATIVE:
            case SparkSQLParser.KW_REMOVE:
            case SparkSQLParser.KW_RENAME:
            case SparkSQLParser.KW_REPLACE:
            case SparkSQLParser.KW_RESPECT:
            case SparkSQLParser.KW_RESTART:
            case SparkSQLParser.KW_RESTRICT:
            case SparkSQLParser.KW_ROLE:
            case SparkSQLParser.KW_ROW_COUNT:
            case SparkSQLParser.KW_SCALA:
            case SparkSQLParser.KW_SCALAR:
            case SparkSQLParser.KW_SCALE:
            case SparkSQLParser.KW_SCHEMA:
            case SparkSQLParser.KW_SECONDS:
            case SparkSQLParser.KW_SECTION:
            case SparkSQLParser.KW_SECURITY:
            case SparkSQLParser.KW_SELF:
            case SparkSQLParser.KW_SERVER:
            case SparkSQLParser.KW_SERVER_NAME:
            case SparkSQLParser.KW_SESSION:
            case SparkSQLParser.KW_SETS:
            case SparkSQLParser.KW_SIMPLE:
            case SparkSQLParser.KW_SIZE:
            case SparkSQLParser.KW_SLIDE:
            case SparkSQLParser.KW_SOURCE:
            case SparkSQLParser.KW_SPACE:
            case SparkSQLParser.KW_STATE:
            case SparkSQLParser.KW_STATEMENT:
            case SparkSQLParser.KW_STEP:
            case SparkSQLParser.KW_STRING:
            case SparkSQLParser.KW_STRUCTURE:
            case SparkSQLParser.KW_STYLE:
            case SparkSQLParser.KW_TABLES:
            case SparkSQLParser.KW_TEMPORARY:
            case SparkSQLParser.KW_TIMECOL:
            case SparkSQLParser.KW_FLOOR:
            case SparkSQLParser.KW_TIMESTAMP_LTZ:
            case SparkSQLParser.KW_TIMESTAMPADD:
            case SparkSQLParser.KW_TIMESTAMPDIFF:
            case SparkSQLParser.KW_TOTIMESTAMP:
            case SparkSQLParser.KW_TRANSFORM:
            case SparkSQLParser.KW_TUMBLE:
            case SparkSQLParser.KW_TYPE:
            case SparkSQLParser.KW_UNDER:
            case SparkSQLParser.KW_UNLOAD:
            case SparkSQLParser.KW_USAGE:
            case SparkSQLParser.KW_USE:
            case SparkSQLParser.KW_UTF16:
            case SparkSQLParser.KW_UTF32:
            case SparkSQLParser.KW_UTF8:
            case SparkSQLParser.KW_VERSION:
            case SparkSQLParser.KW_VIEW:
            case SparkSQLParser.KW_VIEWS:
            case SparkSQLParser.KW_VIRTUAL:
            case SparkSQLParser.KW_WATERMARK:
            case SparkSQLParser.KW_WATERMARKS:
            case SparkSQLParser.KW_WEEK:
            case SparkSQLParser.KW_WORK:
            case SparkSQLParser.KW_WRAPPER:
            case SparkSQLParser.KW_YEARS:
            case SparkSQLParser.KW_ZONE:
            case SparkSQLParser.KW_ABS:
            case SparkSQLParser.KW_ARRAY:
            case SparkSQLParser.KW_AVG:
            case SparkSQLParser.KW_CASE:
            case SparkSQLParser.KW_CAST:
            case SparkSQLParser.KW_CEIL:
            case SparkSQLParser.KW_COALESCE:
            case SparkSQLParser.KW_COLLECT:
            case SparkSQLParser.KW_COUNT:
            case SparkSQLParser.KW_CURRENT_TIMESTAMP:
            case SparkSQLParser.KW_DATE:
            case SparkSQLParser.KW_DAY:
            case SparkSQLParser.KW_EXISTS:
            case SparkSQLParser.KW_EXPLODE:
            case SparkSQLParser.KW_FIRST_VALUE:
            case SparkSQLParser.KW_FALSE:
            case SparkSQLParser.KW_FROM_UNIXTIME:
            case SparkSQLParser.KW_GROUPING:
            case SparkSQLParser.KW_HOUR:
            case SparkSQLParser.KW_INTERVAL:
            case SparkSQLParser.KW_LAG:
            case SparkSQLParser.KW_LAST_VALUE:
            case SparkSQLParser.KW_LEAD:
            case SparkSQLParser.KW_LEFT:
            case SparkSQLParser.KW_LOCALTIMESTAMP:
            case SparkSQLParser.KW_MINUTE:
            case SparkSQLParser.KW_MONTH:
            case SparkSQLParser.KW_NOT:
            case SparkSQLParser.KW_NTILE:
            case SparkSQLParser.KW_NULL:
            case SparkSQLParser.KW_OVERLAY:
            case SparkSQLParser.KW_PERCENT_RANK:
            case SparkSQLParser.KW_PERCENTILE_CONT:
            case SparkSQLParser.KW_PERCENTILE_DISC:
            case SparkSQLParser.KW_POSITION:
            case SparkSQLParser.KW_POWER:
            case SparkSQLParser.KW_RANGE:
            case SparkSQLParser.KW_ROW_NUMBER:
            case SparkSQLParser.KW_RANK:
            case SparkSQLParser.KW_RIGHT:
            case SparkSQLParser.KW_ROW:
            case SparkSQLParser.KW_SECOND:
            case SparkSQLParser.KW_STRUCT:
            case SparkSQLParser.KW_SUBSTRING:
            case SparkSQLParser.KW_SUM:
            case SparkSQLParser.KW_TIME:
            case SparkSQLParser.KW_TIMESTAMP:
            case SparkSQLParser.KW_TIMESTAMP_3:
            case SparkSQLParser.KW_TIMESTAMP_6:
            case SparkSQLParser.KW_TIMESTAMP_9:
            case SparkSQLParser.KW_TRUE:
            case SparkSQLParser.KW_TRUNCATE:
            case SparkSQLParser.KW_UPPER:
            case SparkSQLParser.KW_YEAR:
            case SparkSQLParser.BIT_NOT_OP:
            case SparkSQLParser.LR_BRACKET:
            case SparkSQLParser.DOLLAR:
            case SparkSQLParser.ASTERISK_SIGN:
            case SparkSQLParser.HYPNEN_SIGN:
            case SparkSQLParser.ADD_SIGN:
            case SparkSQLParser.STRING_LITERAL:
            case SparkSQLParser.DIG_LITERAL:
            case SparkSQLParser.REAL_LITERAL:
            case SparkSQLParser.ID_LITERAL:
                {
                this.state = 1942;
                localContext._limit = this.expression();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public offsetClause(): OffsetClauseContext {
        let localContext = new OffsetClauseContext(this.context, this.state);
        this.enterRule(localContext, 230, SparkSQLParser.RULE_offsetClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1945;
            this.match(SparkSQLParser.KW_OFFSET);
            this.state = 1948;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 201, this.context) ) {
            case 1:
                {
                this.state = 1946;
                this.match(SparkSQLParser.DIG_LITERAL);
                }
                break;
            case 2:
                {
                this.state = 1947;
                this.expression();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public partitionByClause(): PartitionByClauseContext {
        let localContext = new PartitionByClauseContext(this.context, this.state);
        this.enterRule(localContext, 232, SparkSQLParser.RULE_partitionByClause);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1950;
            this.match(SparkSQLParser.KW_PARTITION);
            this.state = 1951;
            this.match(SparkSQLParser.KW_BY);
            this.state = 1952;
            this.expression();
            this.state = 1957;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 480) {
                {
                {
                this.state = 1953;
                this.match(SparkSQLParser.COMMA);
                this.state = 1954;
                this.expression();
                }
                }
                this.state = 1959;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public quantifiers(): QuantifiersContext {
        let localContext = new QuantifiersContext(this.context, this.state);
        this.enterRule(localContext, 234, SparkSQLParser.RULE_quantifiers);
        try {
            this.state = 1976;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 203, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                {
                this.state = 1960;
                this.match(SparkSQLParser.ASTERISK_SIGN);
                }
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                {
                this.state = 1961;
                this.match(SparkSQLParser.ADD_SIGN);
                }
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                {
                this.state = 1962;
                this.match(SparkSQLParser.QUESTION_MARK_SIGN);
                }
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                {
                this.state = 1963;
                this.match(SparkSQLParser.LB_BRACKET);
                this.state = 1964;
                this.match(SparkSQLParser.DIG_LITERAL);
                this.state = 1965;
                this.match(SparkSQLParser.COMMA);
                this.state = 1966;
                this.match(SparkSQLParser.DIG_LITERAL);
                this.state = 1967;
                this.match(SparkSQLParser.RB_BRACKET);
                }
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                {
                this.state = 1968;
                this.match(SparkSQLParser.LB_BRACKET);
                this.state = 1969;
                this.match(SparkSQLParser.DIG_LITERAL);
                this.state = 1970;
                this.match(SparkSQLParser.COMMA);
                this.state = 1971;
                this.match(SparkSQLParser.RB_BRACKET);
                }
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                {
                this.state = 1972;
                this.match(SparkSQLParser.LB_BRACKET);
                this.state = 1973;
                this.match(SparkSQLParser.COMMA);
                this.state = 1974;
                this.match(SparkSQLParser.DIG_LITERAL);
                this.state = 1975;
                this.match(SparkSQLParser.RB_BRACKET);
                }
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public measuresClause(): MeasuresClauseContext {
        let localContext = new MeasuresClauseContext(this.context, this.state);
        this.enterRule(localContext, 236, SparkSQLParser.RULE_measuresClause);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1978;
            this.match(SparkSQLParser.KW_MEASURES);
            this.state = 1979;
            this.projectItemDefinition();
            this.state = 1984;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 480) {
                {
                {
                this.state = 1980;
                this.match(SparkSQLParser.COMMA);
                this.state = 1981;
                this.projectItemDefinition();
                }
                }
                this.state = 1986;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public patternDefinition(): PatternDefinitionContext {
        let localContext = new PatternDefinitionContext(this.context, this.state);
        this.enterRule(localContext, 238, SparkSQLParser.RULE_patternDefinition);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1987;
            this.match(SparkSQLParser.KW_PATTERN);
            this.state = 1988;
            this.match(SparkSQLParser.LR_BRACKET);
            this.state = 1990;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            do {
                {
                {
                this.state = 1989;
                this.patternVariable();
                }
                }
                this.state = 1992;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            } while (_la === 499 || _la === 501);
            this.state = 1994;
            this.match(SparkSQLParser.RR_BRACKET);
            this.state = 1996;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 454) {
                {
                this.state = 1995;
                this.withinClause();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public patternVariable(): PatternVariableContext {
        let localContext = new PatternVariableContext(this.context, this.state);
        this.enterRule(localContext, 240, SparkSQLParser.RULE_patternVariable);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1998;
            this.unquotedIdentifier();
            this.state = 2000;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (((((_la - 478)) & ~0x1F) === 0 && ((1 << (_la - 478)) & 271361) !== 0)) {
                {
                this.state = 1999;
                this.quantifiers();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public outputMode(): OutputModeContext {
        let localContext = new OutputModeContext(this.context, this.state);
        this.enterRule(localContext, 242, SparkSQLParser.RULE_outputMode);
        try {
            this.state = 2010;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case SparkSQLParser.KW_ALL:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2002;
                this.match(SparkSQLParser.KW_ALL);
                this.state = 2003;
                this.match(SparkSQLParser.KW_ROWS);
                this.state = 2004;
                this.match(SparkSQLParser.KW_PER);
                this.state = 2005;
                this.match(SparkSQLParser.KW_MATCH);
                }
                break;
            case SparkSQLParser.KW_ONE:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2006;
                this.match(SparkSQLParser.KW_ONE);
                this.state = 2007;
                this.match(SparkSQLParser.KW_ROW);
                this.state = 2008;
                this.match(SparkSQLParser.KW_PER);
                this.state = 2009;
                this.match(SparkSQLParser.KW_MATCH);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public afterMatchStrategy(): AfterMatchStrategyContext {
        let localContext = new AfterMatchStrategyContext(this.context, this.state);
        this.enterRule(localContext, 244, SparkSQLParser.RULE_afterMatchStrategy);
        try {
            this.state = 2036;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 209, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2012;
                this.match(SparkSQLParser.KW_AFTER);
                this.state = 2013;
                this.match(SparkSQLParser.KW_MATCH);
                this.state = 2014;
                this.match(SparkSQLParser.KW_SKIP);
                this.state = 2015;
                this.match(SparkSQLParser.KW_PAST);
                this.state = 2016;
                this.match(SparkSQLParser.KW_LAST);
                this.state = 2017;
                this.match(SparkSQLParser.KW_ROW);
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2018;
                this.match(SparkSQLParser.KW_AFTER);
                this.state = 2019;
                this.match(SparkSQLParser.KW_MATCH);
                this.state = 2020;
                this.match(SparkSQLParser.KW_SKIP);
                this.state = 2021;
                this.match(SparkSQLParser.KW_TO);
                this.state = 2022;
                this.match(SparkSQLParser.KW_NEXT);
                this.state = 2023;
                this.match(SparkSQLParser.KW_ROW);
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 2024;
                this.match(SparkSQLParser.KW_AFTER);
                this.state = 2025;
                this.match(SparkSQLParser.KW_MATCH);
                this.state = 2026;
                this.match(SparkSQLParser.KW_SKIP);
                this.state = 2027;
                this.match(SparkSQLParser.KW_TO);
                this.state = 2028;
                this.match(SparkSQLParser.KW_LAST);
                this.state = 2029;
                this.unquotedIdentifier();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 2030;
                this.match(SparkSQLParser.KW_AFTER);
                this.state = 2031;
                this.match(SparkSQLParser.KW_MATCH);
                this.state = 2032;
                this.match(SparkSQLParser.KW_SKIP);
                this.state = 2033;
                this.match(SparkSQLParser.KW_TO);
                this.state = 2034;
                this.match(SparkSQLParser.KW_FIRST);
                this.state = 2035;
                this.unquotedIdentifier();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public patternVariablesDefinition(): PatternVariablesDefinitionContext {
        let localContext = new PatternVariablesDefinitionContext(this.context, this.state);
        this.enterRule(localContext, 246, SparkSQLParser.RULE_patternVariablesDefinition);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2038;
            this.match(SparkSQLParser.KW_DEFINE);
            this.state = 2039;
            this.projectItemDefinition();
            this.state = 2044;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 480) {
                {
                {
                this.state = 2040;
                this.match(SparkSQLParser.COMMA);
                this.state = 2041;
                this.projectItemDefinition();
                }
                }
                this.state = 2046;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public windowFrame(): WindowFrameContext {
        let localContext = new WindowFrameContext(this.context, this.state);
        this.enterRule(localContext, 248, SparkSQLParser.RULE_windowFrame);
        try {
            this.state = 2056;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case SparkSQLParser.KW_RANGE:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2047;
                this.match(SparkSQLParser.KW_RANGE);
                this.state = 2048;
                this.match(SparkSQLParser.KW_BETWEEN);
                this.state = 2049;
                this.timeIntervalExpression();
                this.state = 2050;
                this.frameBound();
                }
                break;
            case SparkSQLParser.KW_ROWS:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2052;
                this.match(SparkSQLParser.KW_ROWS);
                this.state = 2053;
                this.match(SparkSQLParser.KW_BETWEEN);
                this.state = 2054;
                this.match(SparkSQLParser.DIG_LITERAL);
                this.state = 2055;
                this.frameBound();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public frameBound(): FrameBoundContext {
        let localContext = new FrameBoundContext(this.context, this.state);
        this.enterRule(localContext, 250, SparkSQLParser.RULE_frameBound);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2058;
            this.match(SparkSQLParser.KW_PRECEDING);
            this.state = 2059;
            this.match(SparkSQLParser.KW_AND);
            this.state = 2060;
            this.match(SparkSQLParser.KW_CURRENT);
            this.state = 2061;
            this.match(SparkSQLParser.KW_ROW);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public withinClause(): WithinClauseContext {
        let localContext = new WithinClauseContext(this.context, this.state);
        this.enterRule(localContext, 252, SparkSQLParser.RULE_withinClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2063;
            this.match(SparkSQLParser.KW_WITHIN);
            this.state = 2064;
            this.timeIntervalExpression();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public selfDefinitionClause(): SelfDefinitionClauseContext {
        let localContext = new SelfDefinitionClauseContext(this.context, this.state);
        this.enterRule(localContext, 254, SparkSQLParser.RULE_selfDefinitionClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2066;
            this.match(SparkSQLParser.KW_PERIOD);
            this.state = 2067;
            this.match(SparkSQLParser.KW_FOR);
            this.state = 2068;
            this.match(SparkSQLParser.KW_SYSTEM_TIME);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public partitionDefinition(): PartitionDefinitionContext {
        let localContext = new PartitionDefinitionContext(this.context, this.state);
        this.enterRule(localContext, 256, SparkSQLParser.RULE_partitionDefinition);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2070;
            this.match(SparkSQLParser.KW_PARTITIONED);
            this.state = 2071;
            this.match(SparkSQLParser.KW_BY);
            this.state = 2072;
            this.transformList();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public transformList(): TransformListContext {
        let localContext = new TransformListContext(this.context, this.state);
        this.enterRule(localContext, 258, SparkSQLParser.RULE_transformList);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2074;
            this.match(SparkSQLParser.LR_BRACKET);
            this.state = 2075;
            this.transform();
            this.state = 2077;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 4294688704) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & 4293654523) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & 4252958655) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & 4294967263) !== 0) || ((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & 4293918651) !== 0) || ((((_la - 160)) & ~0x1F) === 0 && ((1 << (_la - 160)) & 4253024215) !== 0) || ((((_la - 192)) & ~0x1F) === 0 && ((1 << (_la - 192)) & 1142427519) !== 0) || ((((_la - 259)) & ~0x1F) === 0 && ((1 << (_la - 259)) & 65557) !== 0) || ((((_la - 292)) & ~0x1F) === 0 && ((1 << (_la - 292)) & 92307459) !== 0) || ((((_la - 338)) & ~0x1F) === 0 && ((1 << (_la - 338)) & 1639553) !== 0) || ((((_la - 398)) & ~0x1F) === 0 && ((1 << (_la - 398)) & 1610682373) !== 0) || ((((_la - 432)) & ~0x1F) === 0 && ((1 << (_la - 432)) & 16777225) !== 0) || ((((_la - 483)) & ~0x1F) === 0 && ((1 << (_la - 483)) & 491649) !== 0)) {
                {
                this.state = 2076;
                this.dataTypeExpression();
                }
            }

            this.state = 2086;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 480) {
                {
                {
                this.state = 2079;
                this.match(SparkSQLParser.COMMA);
                this.state = 2080;
                this.transform();
                this.state = 2082;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 4294688704) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & 4293654523) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & 4252958655) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & 4294967263) !== 0) || ((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & 4293918651) !== 0) || ((((_la - 160)) & ~0x1F) === 0 && ((1 << (_la - 160)) & 4253024215) !== 0) || ((((_la - 192)) & ~0x1F) === 0 && ((1 << (_la - 192)) & 1142427519) !== 0) || ((((_la - 259)) & ~0x1F) === 0 && ((1 << (_la - 259)) & 65557) !== 0) || ((((_la - 292)) & ~0x1F) === 0 && ((1 << (_la - 292)) & 92307459) !== 0) || ((((_la - 338)) & ~0x1F) === 0 && ((1 << (_la - 338)) & 1639553) !== 0) || ((((_la - 398)) & ~0x1F) === 0 && ((1 << (_la - 398)) & 1610682373) !== 0) || ((((_la - 432)) & ~0x1F) === 0 && ((1 << (_la - 432)) & 16777225) !== 0) || ((((_la - 483)) & ~0x1F) === 0 && ((1 << (_la - 483)) & 491649) !== 0)) {
                    {
                    this.state = 2081;
                    this.dataTypeExpression();
                    }
                }

                }
                }
                this.state = 2088;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 2089;
            this.match(SparkSQLParser.RR_BRACKET);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public transform(): TransformContext {
        let localContext = new TransformContext(this.context, this.state);
        this.enterRule(localContext, 260, SparkSQLParser.RULE_transform);
        let _la: number;
        try {
            this.state = 2104;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 216, this.context) ) {
            case 1:
                localContext = new IdentityTransformContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2091;
                this.qualifiedName();
                }
                break;
            case 2:
                localContext = new ApplyTransformContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2092;
                (localContext as ApplyTransformContext)._transformName = this.identifier();
                this.state = 2093;
                this.match(SparkSQLParser.LR_BRACKET);
                this.state = 2094;
                this.transformArgument();
                this.state = 2099;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 480) {
                    {
                    {
                    this.state = 2095;
                    this.match(SparkSQLParser.COMMA);
                    this.state = 2096;
                    this.transformArgument();
                    }
                    }
                    this.state = 2101;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 2102;
                this.match(SparkSQLParser.RR_BRACKET);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public transformArgument(): TransformArgumentContext {
        let localContext = new TransformArgumentContext(this.context, this.state);
        this.enterRule(localContext, 262, SparkSQLParser.RULE_transformArgument);
        try {
            this.state = 2108;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 217, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2106;
                this.qualifiedName();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2107;
                this.constant();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public likeDefinition(): LikeDefinitionContext {
        let localContext = new LikeDefinitionContext(this.context, this.state);
        this.enterRule(localContext, 264, SparkSQLParser.RULE_likeDefinition);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2110;
            this.match(SparkSQLParser.KW_LIKE);
            this.state = 2111;
            this.tablePath();
            this.state = 2120;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 219, this.context) ) {
            case 1:
                {
                this.state = 2112;
                this.match(SparkSQLParser.LR_BRACKET);
                this.state = 2116;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 48 || _la === 109 || _la === 310) {
                    {
                    {
                    this.state = 2113;
                    this.likeOption();
                    }
                    }
                    this.state = 2118;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 2119;
                this.match(SparkSQLParser.RR_BRACKET);
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public distribution(): DistributionContext {
        let localContext = new DistributionContext(this.context, this.state);
        this.enterRule(localContext, 266, SparkSQLParser.RULE_distribution);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2122;
            this.match(SparkSQLParser.KW_DISTRIBUTED);
            this.state = 2131;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 226) {
                {
                this.state = 2123;
                this.match(SparkSQLParser.KW_BY);
                this.state = 2125;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 305) {
                    {
                    this.state = 2124;
                    this.match(SparkSQLParser.KW_HASH);
                    }
                }

                this.state = 2127;
                this.match(SparkSQLParser.LR_BRACKET);
                this.state = 2128;
                this.identifier();
                this.state = 2129;
                this.match(SparkSQLParser.RR_BRACKET);
                }
            }

            this.state = 2134;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 222, this.context) ) {
            case 1:
                {
                this.state = 2133;
                this.intoBuckets();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public using(): UsingContext {
        let localContext = new UsingContext(this.context, this.state);
        this.enterRule(localContext, 268, SparkSQLParser.RULE_using);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2136;
            this.match(SparkSQLParser.KW_USING);
            this.state = 2137;
            this.match(SparkSQLParser.ID_LITERAL);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public likeOption(): LikeOptionContext {
        let localContext = new LikeOptionContext(this.context, this.state);
        this.enterRule(localContext, 270, SparkSQLParser.RULE_likeOption);
        let _la: number;
        try {
            this.state = 2143;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 223, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                {
                this.state = 2139;
                _la = this.tokenStream.LA(1);
                if(!(_la === 48 || _la === 310)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 2140;
                _la = this.tokenStream.LA(1);
                if(!(_la === 26 || _la === 111 || _la === 205)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                {
                this.state = 2141;
                _la = this.tokenStream.LA(1);
                if(!(_la === 48 || _la === 109 || _la === 310)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 2142;
                _la = this.tokenStream.LA(1);
                if(!(_la === 62 || _la === 105 || _la === 197)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public columnOptionDefinition(): ColumnOptionDefinitionContext {
        let localContext = new ColumnOptionDefinitionContext(this.context, this.state);
        this.enterRule(localContext, 272, SparkSQLParser.RULE_columnOptionDefinition);
        try {
            this.state = 2148;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 224, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2145;
                this.physicalColumnDefinition();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2146;
                this.metadataColumnDefinition();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 2147;
                this.computedColumnDefinition();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public physicalColumnDefinitionList(): PhysicalColumnDefinitionListContext {
        let localContext = new PhysicalColumnDefinitionListContext(this.context, this.state);
        this.enterRule(localContext, 274, SparkSQLParser.RULE_physicalColumnDefinitionList);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2150;
            this.match(SparkSQLParser.LR_BRACKET);
            {
            this.state = 2151;
            this.physicalColumnDefinition();
            }
            this.state = 2156;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 480) {
                {
                {
                this.state = 2152;
                this.match(SparkSQLParser.COMMA);
                this.state = 2153;
                this.physicalColumnDefinition();
                }
                }
                this.state = 2158;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 2159;
            this.match(SparkSQLParser.RR_BRACKET);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public physicalColumnDefinition(): PhysicalColumnDefinitionContext {
        let localContext = new PhysicalColumnDefinitionContext(this.context, this.state);
        this.enterRule(localContext, 276, SparkSQLParser.RULE_physicalColumnDefinition);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2161;
            this.columnName();
            this.state = 2162;
            this.columnType();
            this.state = 2164;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 246 || ((((_la - 354)) & ~0x1F) === 0 && ((1 << (_la - 354)) & 1073741833) !== 0)) {
                {
                this.state = 2163;
                this.columnConstraint();
                }
            }

            this.state = 2167;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 227, this.context) ) {
            case 1:
                {
                this.state = 2166;
                this.commentSpec();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public computedColumnExpression(): ComputedColumnExpressionContext {
        let localContext = new ComputedColumnExpressionContext(this.context, this.state);
        this.enterRule(localContext, 278, SparkSQLParser.RULE_computedColumnExpression);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2169;
            this.expression();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public watermarkDefinition(): WatermarkDefinitionContext {
        let localContext = new WatermarkDefinitionContext(this.context, this.state);
        this.enterRule(localContext, 280, SparkSQLParser.RULE_watermarkDefinition);
        try {
            this.state = 2186;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 229, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2171;
                this.match(SparkSQLParser.KW_WATERMARK);
                this.state = 2172;
                this.match(SparkSQLParser.KW_FOR);
                this.state = 2173;
                this.expression();
                this.state = 2174;
                this.match(SparkSQLParser.KW_AS);
                this.state = 2175;
                this.expression();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2177;
                this.match(SparkSQLParser.KW_WATERMARK);
                this.state = 2178;
                this.match(SparkSQLParser.KW_FOR);
                this.state = 2181;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 228, this.context) ) {
                case 1:
                    {
                    this.state = 2179;
                    this.uid();
                    }
                    break;
                case 2:
                    {
                    this.state = 2180;
                    this.expression();
                    }
                    break;
                }
                this.state = 2183;
                this.match(SparkSQLParser.KW_AS);
                this.state = 2184;
                this.uid();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tableConstraint(): TableConstraintContext {
        let localContext = new TableConstraintContext(this.context, this.state);
        this.enterRule(localContext, 282, SparkSQLParser.RULE_tableConstraint);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2190;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 246) {
                {
                this.state = 2188;
                this.match(SparkSQLParser.KW_CONSTRAINT);
                this.state = 2189;
                this.constraintName();
                }
            }

            this.state = 2192;
            this.match(SparkSQLParser.KW_PRIMARY);
            this.state = 2193;
            this.match(SparkSQLParser.KW_KEY);
            this.state = 2194;
            this.columnNameList();
            this.state = 2195;
            this.match(SparkSQLParser.KW_NOT);
            this.state = 2196;
            this.match(SparkSQLParser.KW_ENFORCED);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public constraintName(): ConstraintNameContext {
        let localContext = new ConstraintNameContext(this.context, this.state);
        this.enterRule(localContext, 284, SparkSQLParser.RULE_constraintName);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2198;
            this.identifier();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public valuesDefinition(): ValuesDefinitionContext {
        let localContext = new ValuesDefinitionContext(this.context, this.state);
        this.enterRule(localContext, 286, SparkSQLParser.RULE_valuesDefinition);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2200;
            this.match(SparkSQLParser.KW_VALUES);
            this.state = 2201;
            this.valuesRowDefinition();
            this.state = 2206;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 480) {
                {
                {
                this.state = 2202;
                this.match(SparkSQLParser.COMMA);
                this.state = 2203;
                this.valuesRowDefinition();
                }
                }
                this.state = 2208;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public valuesRowDefinition(): ValuesRowDefinitionContext {
        let localContext = new ValuesRowDefinitionContext(this.context, this.state);
        this.enterRule(localContext, 288, SparkSQLParser.RULE_valuesRowDefinition);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2209;
            this.match(SparkSQLParser.LR_BRACKET);
            this.state = 2210;
            this.constant();
            this.state = 2215;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 480) {
                {
                {
                this.state = 2211;
                this.match(SparkSQLParser.COMMA);
                this.state = 2212;
                this.constant();
                }
                }
                this.state = 2217;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 2218;
            this.match(SparkSQLParser.RR_BRACKET);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public lengthOneDimension(): LengthOneDimensionContext {
        let localContext = new LengthOneDimensionContext(this.context, this.state);
        this.enterRule(localContext, 290, SparkSQLParser.RULE_lengthOneDimension);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2220;
            this.match(SparkSQLParser.LR_BRACKET);
            this.state = 2221;
            this.decimalLiteral();
            this.state = 2222;
            this.match(SparkSQLParser.RR_BRACKET);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public lengthTwoOptionalDimension(): LengthTwoOptionalDimensionContext {
        let localContext = new LengthTwoOptionalDimensionContext(this.context, this.state);
        this.enterRule(localContext, 292, SparkSQLParser.RULE_lengthTwoOptionalDimension);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2224;
            this.match(SparkSQLParser.LR_BRACKET);
            this.state = 2225;
            this.decimalLiteral();
            this.state = 2228;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 480) {
                {
                this.state = 2226;
                this.match(SparkSQLParser.COMMA);
                this.state = 2227;
                this.decimalLiteral();
                }
            }

            this.state = 2230;
            this.match(SparkSQLParser.RR_BRACKET);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public lengthTwoStringDimension(): LengthTwoStringDimensionContext {
        let localContext = new LengthTwoStringDimensionContext(this.context, this.state);
        this.enterRule(localContext, 294, SparkSQLParser.RULE_lengthTwoStringDimension);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2232;
            this.match(SparkSQLParser.LR_BRACKET);
            this.state = 2233;
            this.stringLiteral();
            this.state = 2236;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 480) {
                {
                this.state = 2234;
                this.match(SparkSQLParser.COMMA);
                this.state = 2235;
                this.stringLiteral();
                }
            }

            this.state = 2238;
            this.match(SparkSQLParser.RR_BRACKET);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public lengthOneTypeDimension(): LengthOneTypeDimensionContext {
        let localContext = new LengthOneTypeDimensionContext(this.context, this.state);
        this.enterRule(localContext, 296, SparkSQLParser.RULE_lengthOneTypeDimension);
        let _la: number;
        try {
            localContext = new LengthSymbolsTypeDimensionContext(localContext);
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2240;
            this.match(SparkSQLParser.LESS_SYMBOL);
            this.state = 2241;
            this.columnType();
            this.state = 2246;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 480) {
                {
                {
                this.state = 2242;
                this.match(SparkSQLParser.COMMA);
                this.state = 2243;
                this.columnType();
                }
                }
                this.state = 2248;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 2249;
            this.match(SparkSQLParser.GREATER_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public mapTypeDimension(): MapTypeDimensionContext {
        let localContext = new MapTypeDimensionContext(this.context, this.state);
        this.enterRule(localContext, 298, SparkSQLParser.RULE_mapTypeDimension);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2251;
            this.match(SparkSQLParser.LESS_SYMBOL);
            this.state = 2252;
            this.columnType();
            {
            this.state = 2253;
            this.match(SparkSQLParser.COMMA);
            this.state = 2254;
            this.columnType();
            }
            this.state = 2256;
            this.match(SparkSQLParser.GREATER_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public rowTypeDimension(): RowTypeDimensionContext {
        let localContext = new RowTypeDimensionContext(this.context, this.state);
        this.enterRule(localContext, 300, SparkSQLParser.RULE_rowTypeDimension);
        let _la: number;
        try {
            localContext = new RowSymbolsTypeDimensionContext(localContext);
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2258;
            this.match(SparkSQLParser.LESS_SYMBOL);
            this.state = 2259;
            this.columnName();
            this.state = 2260;
            this.columnType();
            this.state = 2267;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 480) {
                {
                {
                this.state = 2261;
                this.match(SparkSQLParser.COMMA);
                this.state = 2262;
                this.columnName();
                this.state = 2263;
                this.columnType();
                }
                }
                this.state = 2269;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 2270;
            this.match(SparkSQLParser.GREATER_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public structTypeDimension(): StructTypeDimensionContext {
        let localContext = new StructTypeDimensionContext(this.context, this.state);
        this.enterRule(localContext, 302, SparkSQLParser.RULE_structTypeDimension);
        let _la: number;
        try {
            localContext = new StructSymbolsTypeDimensionContext(localContext);
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2272;
            this.match(SparkSQLParser.LESS_SYMBOL);
            this.state = 2273;
            this.columnName();
            this.state = 2274;
            this.match(SparkSQLParser.COLON_SYMB);
            this.state = 2275;
            this.columnType();
            this.state = 2283;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 480) {
                {
                {
                this.state = 2276;
                this.match(SparkSQLParser.COMMA);
                this.state = 2277;
                this.columnName();
                this.state = 2278;
                this.match(SparkSQLParser.COLON_SYMB);
                this.state = 2279;
                this.columnType();
                }
                }
                this.state = 2285;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 2286;
            this.match(SparkSQLParser.GREATER_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public columnConstraint(): ColumnConstraintContext {
        let localContext = new ColumnConstraintContext(this.context, this.state);
        this.enterRule(localContext, 304, SparkSQLParser.RULE_columnConstraint);
        let _la: number;
        try {
            this.state = 2302;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case SparkSQLParser.KW_CONSTRAINT:
            case SparkSQLParser.KW_PRIMARY:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2290;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 246) {
                    {
                    this.state = 2288;
                    this.match(SparkSQLParser.KW_CONSTRAINT);
                    this.state = 2289;
                    this.constraintName();
                    }
                }

                this.state = 2292;
                this.match(SparkSQLParser.KW_PRIMARY);
                this.state = 2293;
                this.match(SparkSQLParser.KW_KEY);
                this.state = 2296;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 354) {
                    {
                    this.state = 2294;
                    this.match(SparkSQLParser.KW_NOT);
                    this.state = 2295;
                    this.match(SparkSQLParser.KW_ENFORCED);
                    }
                }

                }
                break;
            case SparkSQLParser.KW_NOT:
            case SparkSQLParser.KW_NULL:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2299;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 354) {
                    {
                    this.state = 2298;
                    this.match(SparkSQLParser.KW_NOT);
                    }
                }

                this.state = 2301;
                this.match(SparkSQLParser.KW_NULL);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public commentSpec(): CommentSpecContext {
        let localContext = new CommentSpecContext(this.context, this.state);
        this.enterRule(localContext, 306, SparkSQLParser.RULE_commentSpec);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2304;
            this.match(SparkSQLParser.KW_COMMENT);
            this.state = 2305;
            this.propertyName();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public metadataColumnDefinition(): MetadataColumnDefinitionContext {
        let localContext = new MetadataColumnDefinitionContext(this.context, this.state);
        this.enterRule(localContext, 308, SparkSQLParser.RULE_metadataColumnDefinition);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2307;
            this.columnName();
            this.state = 2308;
            this.columnType();
            this.state = 2309;
            this.match(SparkSQLParser.KW_METADATA);
            this.state = 2312;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 296) {
                {
                this.state = 2310;
                this.match(SparkSQLParser.KW_FROM);
                this.state = 2311;
                this.metadataKey();
                }
            }

            this.state = 2315;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 195) {
                {
                this.state = 2314;
                this.match(SparkSQLParser.KW_VIRTUAL);
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public metadataKey(): MetadataKeyContext {
        let localContext = new MetadataKeyContext(this.context, this.state);
        this.enterRule(localContext, 310, SparkSQLParser.RULE_metadataKey);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2317;
            this.match(SparkSQLParser.STRING_LITERAL);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public computedColumnDefinition(): ComputedColumnDefinitionContext {
        let localContext = new ComputedColumnDefinitionContext(this.context, this.state);
        this.enterRule(localContext, 312, SparkSQLParser.RULE_computedColumnDefinition);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2319;
            this.columnName();
            this.state = 2320;
            this.match(SparkSQLParser.KW_AS);
            this.state = 2321;
            this.computedColumnExpression();
            this.state = 2323;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 244, this.context) ) {
            case 1:
                {
                this.state = 2322;
                this.commentSpec();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public columnName(): ColumnNameContext {
        let localContext = new ColumnNameContext(this.context, this.state);
        this.enterRule(localContext, 314, SparkSQLParser.RULE_columnName);
        try {
            this.state = 2327;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 245, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2325;
                this.uid();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2326;
                this.expression();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public columnNameList(): ColumnNameListContext {
        let localContext = new ColumnNameListContext(this.context, this.state);
        this.enterRule(localContext, 316, SparkSQLParser.RULE_columnNameList);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2329;
            this.match(SparkSQLParser.LR_BRACKET);
            this.state = 2330;
            this.columnName();
            this.state = 2332;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 23) {
                {
                this.state = 2331;
                this.commentSpec();
                }
            }

            this.state = 2341;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 480) {
                {
                {
                this.state = 2334;
                this.match(SparkSQLParser.COMMA);
                this.state = 2335;
                this.columnName();
                this.state = 2337;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 23) {
                    {
                    this.state = 2336;
                    this.commentSpec();
                    }
                }

                }
                }
                this.state = 2343;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 2344;
            this.match(SparkSQLParser.RR_BRACKET);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public columnType(): ColumnTypeContext {
        let localContext = new ColumnTypeContext(this.context, this.state);
        this.enterRule(localContext, 318, SparkSQLParser.RULE_columnType);
        let _la: number;
        try {
            this.state = 2421;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case SparkSQLParser.KW_BOOLEAN:
            case SparkSQLParser.KW_DATE:
            case SparkSQLParser.KW_NULL:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2346;
                localContext._typeName = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(_la === 222 || _la === 259 || _la === 357)) {
                    localContext._typeName = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            case SparkSQLParser.KW_BYTES:
            case SparkSQLParser.KW_STRING:
            case SparkSQLParser.KW_TIMESTAMP_LTZ:
            case SparkSQLParser.KW_BIGINT:
            case SparkSQLParser.KW_BINARY:
            case SparkSQLParser.KW_CHAR:
            case SparkSQLParser.KW_DATETIME:
            case SparkSQLParser.KW_INT:
            case SparkSQLParser.KW_INTEGER:
            case SparkSQLParser.KW_SMALLINT:
            case SparkSQLParser.KW_TIME:
            case SparkSQLParser.KW_TINYINT:
            case SparkSQLParser.KW_VARBINARY:
            case SparkSQLParser.KW_VARCHAR:
                this.enterOuterAlt(localContext, 2);
                {
                {
                this.state = 2347;
                localContext._typeName = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(_la === 13 || _la === 168 || _la === 175 || ((((_la - 218)) & ~0x1F) === 0 && ((1 << (_la - 218)) & 32771) !== 0) || _la === 260 || _la === 315 || _la === 316 || ((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & 4325377) !== 0) || _la === 448 || _la === 449)) {
                    localContext._typeName = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 2349;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 476) {
                    {
                    this.state = 2348;
                    this.lengthOneDimension();
                    }
                }

                }
                }
                break;
            case SparkSQLParser.KW_TIMESTAMP:
                this.enterOuterAlt(localContext, 3);
                {
                {
                this.state = 2351;
                localContext._typeName = this.match(SparkSQLParser.KW_TIMESTAMP);
                this.state = 2353;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 476) {
                    {
                    this.state = 2352;
                    this.lengthOneDimension();
                    }
                }

                this.state = 2361;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 453 || _la === 455) {
                    {
                    this.state = 2355;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 453 || _la === 455)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 2357;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 337) {
                        {
                        this.state = 2356;
                        this.match(SparkSQLParser.KW_LOCAL);
                        }
                    }

                    this.state = 2359;
                    this.match(SparkSQLParser.KW_TIME);
                    this.state = 2360;
                    this.match(SparkSQLParser.KW_ZONE);
                    }
                }

                }
                }
                break;
            case SparkSQLParser.KW_TIMESTAMP_3:
                this.enterOuterAlt(localContext, 4);
                {
                {
                this.state = 2363;
                localContext._typeName = this.match(SparkSQLParser.KW_TIMESTAMP_3);
                this.state = 2365;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 476) {
                    {
                    this.state = 2364;
                    this.lengthOneDimension();
                    }
                }

                this.state = 2373;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 453 || _la === 455) {
                    {
                    this.state = 2367;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 453 || _la === 455)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 2369;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 337) {
                        {
                        this.state = 2368;
                        this.match(SparkSQLParser.KW_LOCAL);
                        }
                    }

                    this.state = 2371;
                    this.match(SparkSQLParser.KW_TIME);
                    this.state = 2372;
                    this.match(SparkSQLParser.KW_ZONE);
                    }
                }

                }
                }
                break;
            case SparkSQLParser.KW_TIMESTAMP_6:
                this.enterOuterAlt(localContext, 5);
                {
                {
                this.state = 2375;
                localContext._typeName = this.match(SparkSQLParser.KW_TIMESTAMP_6);
                this.state = 2377;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 476) {
                    {
                    this.state = 2376;
                    this.lengthOneDimension();
                    }
                }

                this.state = 2385;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 453 || _la === 455) {
                    {
                    this.state = 2379;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 453 || _la === 455)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 2381;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 337) {
                        {
                        this.state = 2380;
                        this.match(SparkSQLParser.KW_LOCAL);
                        }
                    }

                    this.state = 2383;
                    this.match(SparkSQLParser.KW_TIME);
                    this.state = 2384;
                    this.match(SparkSQLParser.KW_ZONE);
                    }
                }

                }
                }
                break;
            case SparkSQLParser.KW_TIMESTAMP_9:
                this.enterOuterAlt(localContext, 6);
                {
                {
                this.state = 2387;
                localContext._typeName = this.match(SparkSQLParser.KW_TIMESTAMP_9);
                this.state = 2389;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 476) {
                    {
                    this.state = 2388;
                    this.lengthOneDimension();
                    }
                }

                this.state = 2397;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 453 || _la === 455) {
                    {
                    this.state = 2391;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 453 || _la === 455)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 2393;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 337) {
                        {
                        this.state = 2392;
                        this.match(SparkSQLParser.KW_LOCAL);
                        }
                    }

                    this.state = 2395;
                    this.match(SparkSQLParser.KW_TIME);
                    this.state = 2396;
                    this.match(SparkSQLParser.KW_ZONE);
                    }
                }

                }
                }
                break;
            case SparkSQLParser.KW_DEC:
            case SparkSQLParser.KW_DECIMAL:
            case SparkSQLParser.KW_DOUBLE:
            case SparkSQLParser.KW_FLOAT:
            case SparkSQLParser.KW_NUMERIC:
                this.enterOuterAlt(localContext, 7);
                {
                {
                this.state = 2399;
                localContext._typeName = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(((((_la - 262)) & ~0x1F) === 0 && ((1 << (_la - 262)) & 2147491843) !== 0) || _la === 358)) {
                    localContext._typeName = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 2401;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 476) {
                    {
                    this.state = 2400;
                    this.lengthTwoOptionalDimension();
                    }
                }

                }
                }
                break;
            case SparkSQLParser.KW_ARRAY:
            case SparkSQLParser.KW_MULTISET:
                this.enterOuterAlt(localContext, 8);
                {
                {
                this.state = 2403;
                localContext._type_ = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(_la === 211 || _la === 349)) {
                    localContext._type_ = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 2405;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 471) {
                    {
                    this.state = 2404;
                    this.lengthOneTypeDimension();
                    }
                }

                }
                }
                break;
            case SparkSQLParser.KW_MAP:
                this.enterOuterAlt(localContext, 9);
                {
                {
                this.state = 2407;
                localContext._type_ = this.match(SparkSQLParser.KW_MAP);
                this.state = 2409;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 471) {
                    {
                    this.state = 2408;
                    this.mapTypeDimension();
                    }
                }

                }
                }
                break;
            case SparkSQLParser.KW_ROW:
                this.enterOuterAlt(localContext, 10);
                {
                {
                this.state = 2411;
                localContext._type_ = this.match(SparkSQLParser.KW_ROW);
                this.state = 2413;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 471) {
                    {
                    this.state = 2412;
                    this.rowTypeDimension();
                    }
                }

                }
                }
                break;
            case SparkSQLParser.KW_STRUCT:
                this.enterOuterAlt(localContext, 11);
                {
                {
                this.state = 2415;
                localContext._type_ = this.match(SparkSQLParser.KW_STRUCT);
                this.state = 2416;
                this.structTypeDimension();
                }
                }
                break;
            case SparkSQLParser.KW_RAW:
                this.enterOuterAlt(localContext, 12);
                {
                {
                this.state = 2417;
                localContext._type_ = this.match(SparkSQLParser.KW_RAW);
                this.state = 2419;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 476) {
                    {
                    this.state = 2418;
                    this.lengthTwoStringDimension();
                    }
                }

                }
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public expression(): ExpressionContext {
        let localContext = new ExpressionContext(this.context, this.state);
        this.enterRule(localContext, 320, SparkSQLParser.RULE_expression);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2423;
            this.booleanExpression(0);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }

    public booleanExpression(): BooleanExpressionContext;
    public booleanExpression(_p: number): BooleanExpressionContext;
    public booleanExpression(_p?: number): BooleanExpressionContext {
        if (_p === undefined) {
            _p = 0;
        }

        let parentContext = this.context;
        let parentState = this.state;
        let localContext = new BooleanExpressionContext(this.context, parentState);
        let previousContext = localContext;
        let _startState = 322;
        this.enterRecursionRule(localContext, 322, SparkSQLParser.RULE_booleanExpression, _p);
        let _la: number;
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2437;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 269, this.context) ) {
            case 1:
                {
                localContext = new LogicalNotContext(localContext);
                this.context = localContext;
                previousContext = localContext;

                this.state = 2426;
                this.match(SparkSQLParser.KW_NOT);
                this.state = 2427;
                this.booleanExpression(6);
                }
                break;
            case 2:
                {
                localContext = new ExistsContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2428;
                this.match(SparkSQLParser.KW_EXISTS);
                this.state = 2429;
                this.match(SparkSQLParser.LR_BRACKET);
                this.state = 2430;
                this.queryStatement(0);
                this.state = 2431;
                this.match(SparkSQLParser.RR_BRACKET);
                }
                break;
            case 3:
                {
                localContext = new PredicatedContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2433;
                this.valueExpression(0);
                this.state = 2435;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 268, this.context) ) {
                case 1:
                    {
                    this.state = 2434;
                    this.predicate();
                    }
                    break;
                }
                }
                break;
            }
            this.context!.stop = this.tokenStream.LT(-1);
            this.state = 2453;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 272, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    if (this.parseListeners != null) {
                        this.triggerExitRuleEvent();
                    }
                    previousContext = localContext;
                    {
                    this.state = 2451;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 271, this.context) ) {
                    case 1:
                        {
                        localContext = new LogicalBinaryContext(new BooleanExpressionContext(parentContext, parentState));
                        (localContext as LogicalBinaryContext)._left = previousContext;
                        this.pushNewRecursionContext(localContext, _startState, SparkSQLParser.RULE_booleanExpression);
                        this.state = 2439;
                        if (!(this.precpred(this.context, 3))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 3)");
                        }
                        this.state = 2440;
                        (localContext as LogicalBinaryContext)._operator = this.match(SparkSQLParser.KW_AND);
                        this.state = 2441;
                        (localContext as LogicalBinaryContext)._right = this.booleanExpression(4);
                        }
                        break;
                    case 2:
                        {
                        localContext = new LogicalBinaryContext(new BooleanExpressionContext(parentContext, parentState));
                        (localContext as LogicalBinaryContext)._left = previousContext;
                        this.pushNewRecursionContext(localContext, _startState, SparkSQLParser.RULE_booleanExpression);
                        this.state = 2442;
                        if (!(this.precpred(this.context, 2))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 2)");
                        }
                        this.state = 2443;
                        (localContext as LogicalBinaryContext)._operator = this.match(SparkSQLParser.KW_OR);
                        this.state = 2444;
                        (localContext as LogicalBinaryContext)._right = this.booleanExpression(3);
                        }
                        break;
                    case 3:
                        {
                        localContext = new LogicalNestedContext(new BooleanExpressionContext(parentContext, parentState));
                        this.pushNewRecursionContext(localContext, _startState, SparkSQLParser.RULE_booleanExpression);
                        this.state = 2445;
                        if (!(this.precpred(this.context, 1))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 1)");
                        }
                        this.state = 2446;
                        this.match(SparkSQLParser.KW_IS);
                        this.state = 2448;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                        if (_la === 354) {
                            {
                            this.state = 2447;
                            this.match(SparkSQLParser.KW_NOT);
                            }
                        }

                        this.state = 2450;
                        (localContext as LogicalNestedContext)._kind = this.tokenStream.LT(1);
                        _la = this.tokenStream.LA(1);
                        if(!(_la === 292 || _la === 357 || _la === 435 || _la === 439)) {
                            (localContext as LogicalNestedContext)._kind = this.errorHandler.recoverInline(this);
                        }
                        else {
                            this.errorHandler.reportMatch(this);
                            this.consume();
                        }
                        }
                        break;
                    }
                    }
                }
                this.state = 2455;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 272, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.unrollRecursionContexts(parentContext);
        }
        return localContext;
    }
    public predicate(): PredicateContext {
        let localContext = new PredicateContext(this.context, this.state);
        this.enterRule(localContext, 324, SparkSQLParser.RULE_predicate);
        let _la: number;
        try {
            this.state = 2523;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 283, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2457;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 354) {
                    {
                    this.state = 2456;
                    this.match(SparkSQLParser.KW_NOT);
                    }
                }

                this.state = 2459;
                localContext._kind = this.match(SparkSQLParser.KW_BETWEEN);
                this.state = 2461;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 213 || _la === 418) {
                    {
                    this.state = 2460;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 213 || _la === 418)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                }

                this.state = 2463;
                localContext._lower = this.valueExpression(0);
                this.state = 2464;
                this.match(SparkSQLParser.KW_AND);
                this.state = 2465;
                localContext._upper = this.valueExpression(0);
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2468;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 354) {
                    {
                    this.state = 2467;
                    this.match(SparkSQLParser.KW_NOT);
                    }
                }

                this.state = 2470;
                localContext._kind = this.match(SparkSQLParser.KW_IN);
                this.state = 2471;
                this.match(SparkSQLParser.LR_BRACKET);
                this.state = 2472;
                this.expression();
                this.state = 2477;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 480) {
                    {
                    {
                    this.state = 2473;
                    this.match(SparkSQLParser.COMMA);
                    this.state = 2474;
                    this.expression();
                    }
                    }
                    this.state = 2479;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 2480;
                this.match(SparkSQLParser.RR_BRACKET);
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 2483;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 354) {
                    {
                    this.state = 2482;
                    this.match(SparkSQLParser.KW_NOT);
                    }
                }

                this.state = 2485;
                localContext._kind = this.match(SparkSQLParser.KW_IN);
                this.state = 2486;
                this.match(SparkSQLParser.LR_BRACKET);
                this.state = 2487;
                this.queryStatement(0);
                this.state = 2488;
                this.match(SparkSQLParser.RR_BRACKET);
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 2490;
                localContext._kind = this.match(SparkSQLParser.KW_EXISTS);
                this.state = 2491;
                this.match(SparkSQLParser.LR_BRACKET);
                this.state = 2492;
                this.queryStatement(0);
                this.state = 2493;
                this.match(SparkSQLParser.RR_BRACKET);
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 2496;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 354) {
                    {
                    this.state = 2495;
                    this.match(SparkSQLParser.KW_NOT);
                    }
                }

                this.state = 2498;
                localContext._kind = this.match(SparkSQLParser.KW_RLIKE);
                this.state = 2499;
                localContext._pattern = this.valueExpression(0);
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 2500;
                this.likePredicate();
                }
                break;
            case 7:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 2501;
                this.match(SparkSQLParser.KW_IS);
                this.state = 2503;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 354) {
                    {
                    this.state = 2502;
                    this.match(SparkSQLParser.KW_NOT);
                    }
                }

                this.state = 2505;
                localContext._kind = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(_la === 292 || _la === 357 || _la === 435 || _la === 439)) {
                    localContext._kind = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            case 8:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 2506;
                this.match(SparkSQLParser.KW_IS);
                this.state = 2508;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 354) {
                    {
                    this.state = 2507;
                    this.match(SparkSQLParser.KW_NOT);
                    }
                }

                this.state = 2510;
                localContext._kind = this.match(SparkSQLParser.KW_DISTINCT);
                this.state = 2511;
                this.match(SparkSQLParser.KW_FROM);
                this.state = 2512;
                localContext._right = this.valueExpression(0);
                }
                break;
            case 9:
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 2514;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 354) {
                    {
                    this.state = 2513;
                    this.match(SparkSQLParser.KW_NOT);
                    }
                }

                this.state = 2516;
                localContext._kind = this.match(SparkSQLParser.KW_SIMILAR);
                this.state = 2517;
                this.match(SparkSQLParser.KW_TO);
                this.state = 2518;
                localContext._right = this.valueExpression(0);
                this.state = 2521;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 282, this.context) ) {
                case 1:
                    {
                    this.state = 2519;
                    this.match(SparkSQLParser.KW_ESCAPE);
                    this.state = 2520;
                    this.stringLiteral();
                    }
                    break;
                }
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public likePredicate(): LikePredicateContext {
        let localContext = new LikePredicateContext(this.context, this.state);
        this.enterRule(localContext, 326, SparkSQLParser.RULE_likePredicate);
        let _la: number;
        try {
            this.state = 2563;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 291, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2526;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 354) {
                    {
                    this.state = 2525;
                    this.match(SparkSQLParser.KW_NOT);
                    }
                }

                this.state = 2528;
                localContext._kind = this.match(SparkSQLParser.KW_LIKE);
                this.state = 2529;
                localContext._quantifier = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(_la === 205 || _la === 209)) {
                    localContext._quantifier = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 2543;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 286, this.context) ) {
                case 1:
                    {
                    this.state = 2530;
                    this.match(SparkSQLParser.LR_BRACKET);
                    this.state = 2531;
                    this.match(SparkSQLParser.RR_BRACKET);
                    }
                    break;
                case 2:
                    {
                    this.state = 2532;
                    this.match(SparkSQLParser.LR_BRACKET);
                    this.state = 2533;
                    this.expression();
                    this.state = 2538;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    while (_la === 480) {
                        {
                        {
                        this.state = 2534;
                        this.match(SparkSQLParser.COMMA);
                        this.state = 2535;
                        this.expression();
                        }
                        }
                        this.state = 2540;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                    }
                    this.state = 2541;
                    this.match(SparkSQLParser.RR_BRACKET);
                    }
                    break;
                }
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2546;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 354) {
                    {
                    this.state = 2545;
                    this.match(SparkSQLParser.KW_NOT);
                    }
                }

                this.state = 2548;
                localContext._kind = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(_la === 334 || _la === 395)) {
                    localContext._kind = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 2549;
                localContext._pattern = this.valueExpression(0);
                this.state = 2552;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 288, this.context) ) {
                case 1:
                    {
                    this.state = 2550;
                    this.match(SparkSQLParser.KW_ESCAPE);
                    this.state = 2551;
                    this.stringLiteral();
                    }
                    break;
                }
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 2555;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 354) {
                    {
                    this.state = 2554;
                    this.match(SparkSQLParser.KW_NOT);
                    }
                }

                this.state = 2557;
                _la = this.tokenStream.LA(1);
                if(!(_la === 390 || _la === 395)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 2558;
                this.stringLiteral();
                this.state = 2561;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 290, this.context) ) {
                case 1:
                    {
                    this.state = 2559;
                    this.match(SparkSQLParser.KW_ESCAPE);
                    this.state = 2560;
                    this.stringLiteral();
                    }
                    break;
                }
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }

    public valueExpression(): ValueExpressionContext;
    public valueExpression(_p: number): ValueExpressionContext;
    public valueExpression(_p?: number): ValueExpressionContext {
        if (_p === undefined) {
            _p = 0;
        }

        let parentContext = this.context;
        let parentState = this.state;
        let localContext = new ValueExpressionContext(this.context, parentState);
        let previousContext = localContext;
        let _startState = 328;
        this.enterRecursionRule(localContext, 328, SparkSQLParser.RULE_valueExpression, _p);
        let _la: number;
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2569;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 292, this.context) ) {
            case 1:
                {
                localContext = new ValueExpressionDefaultContext(localContext);
                this.context = localContext;
                previousContext = localContext;

                this.state = 2566;
                this.primaryExpression(0);
                }
                break;
            case 2:
                {
                localContext = new ArithmeticUnaryContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2567;
                (localContext as ArithmeticUnaryContext)._operator = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(((((_la - 465)) & ~0x1F) === 0 && ((1 << (_la - 465)) & 100663297) !== 0))) {
                    (localContext as ArithmeticUnaryContext)._operator = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 2568;
                this.valueExpression(7);
                }
                break;
            }
            this.context!.stop = this.tokenStream.LT(-1);
            this.state = 2592;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 294, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    if (this.parseListeners != null) {
                        this.triggerExitRuleEvent();
                    }
                    previousContext = localContext;
                    {
                    this.state = 2590;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 293, this.context) ) {
                    case 1:
                        {
                        localContext = new ArithmeticBinaryContext(new ValueExpressionContext(parentContext, parentState));
                        (localContext as ArithmeticBinaryContext)._left = previousContext;
                        this.pushNewRecursionContext(localContext, _startState, SparkSQLParser.RULE_valueExpression);
                        this.state = 2571;
                        if (!(this.precpred(this.context, 6))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 6)");
                        }
                        this.state = 2572;
                        (localContext as ArithmeticBinaryContext)._operator = this.tokenStream.LT(1);
                        _la = this.tokenStream.LA(1);
                        if(!(_la === 39 || ((((_la - 488)) & ~0x1F) === 0 && ((1 << (_la - 488)) & 145) !== 0))) {
                            (localContext as ArithmeticBinaryContext)._operator = this.errorHandler.recoverInline(this);
                        }
                        else {
                            this.errorHandler.reportMatch(this);
                            this.consume();
                        }
                        this.state = 2573;
                        (localContext as ArithmeticBinaryContext)._right = this.valueExpression(7);
                        }
                        break;
                    case 2:
                        {
                        localContext = new ArithmeticBinaryContext(new ValueExpressionContext(parentContext, parentState));
                        (localContext as ArithmeticBinaryContext)._left = previousContext;
                        this.pushNewRecursionContext(localContext, _startState, SparkSQLParser.RULE_valueExpression);
                        this.state = 2574;
                        if (!(this.precpred(this.context, 5))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 5)");
                        }
                        this.state = 2575;
                        (localContext as ArithmeticBinaryContext)._operator = this.tokenStream.LT(1);
                        _la = this.tokenStream.LA(1);
                        if(!(((((_la - 490)) & ~0x1F) === 0 && ((1 << (_la - 490)) & 11) !== 0))) {
                            (localContext as ArithmeticBinaryContext)._operator = this.errorHandler.recoverInline(this);
                        }
                        else {
                            this.errorHandler.reportMatch(this);
                            this.consume();
                        }
                        this.state = 2576;
                        (localContext as ArithmeticBinaryContext)._right = this.valueExpression(6);
                        }
                        break;
                    case 3:
                        {
                        localContext = new ArithmeticBinaryContext(new ValueExpressionContext(parentContext, parentState));
                        (localContext as ArithmeticBinaryContext)._left = previousContext;
                        this.pushNewRecursionContext(localContext, _startState, SparkSQLParser.RULE_valueExpression);
                        this.state = 2577;
                        if (!(this.precpred(this.context, 4))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 4)");
                        }
                        this.state = 2578;
                        (localContext as ArithmeticBinaryContext)._operator = this.match(SparkSQLParser.BIT_AND_OP);
                        this.state = 2579;
                        (localContext as ArithmeticBinaryContext)._right = this.valueExpression(5);
                        }
                        break;
                    case 4:
                        {
                        localContext = new ArithmeticBinaryContext(new ValueExpressionContext(parentContext, parentState));
                        (localContext as ArithmeticBinaryContext)._left = previousContext;
                        this.pushNewRecursionContext(localContext, _startState, SparkSQLParser.RULE_valueExpression);
                        this.state = 2580;
                        if (!(this.precpred(this.context, 3))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 3)");
                        }
                        this.state = 2581;
                        (localContext as ArithmeticBinaryContext)._operator = this.match(SparkSQLParser.BIT_XOR_OP);
                        this.state = 2582;
                        (localContext as ArithmeticBinaryContext)._right = this.valueExpression(4);
                        }
                        break;
                    case 5:
                        {
                        localContext = new OrContext(new ValueExpressionContext(parentContext, parentState));
                        (localContext as OrContext)._left = previousContext;
                        this.pushNewRecursionContext(localContext, _startState, SparkSQLParser.RULE_valueExpression);
                        this.state = 2583;
                        if (!(this.precpred(this.context, 2))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 2)");
                        }
                        this.state = 2584;
                        (localContext as OrContext)._operator = this.match(SparkSQLParser.BIT_OR_OP);
                        this.state = 2585;
                        (localContext as OrContext)._right = this.valueExpression(3);
                        }
                        break;
                    case 6:
                        {
                        localContext = new ComparisonContext(new ValueExpressionContext(parentContext, parentState));
                        (localContext as ComparisonContext)._left = previousContext;
                        this.pushNewRecursionContext(localContext, _startState, SparkSQLParser.RULE_valueExpression);
                        this.state = 2586;
                        if (!(this.precpred(this.context, 1))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 1)");
                        }
                        this.state = 2587;
                        (localContext as ComparisonContext)._operator = this.comparisonOperator();
                        this.state = 2588;
                        (localContext as ComparisonContext)._right = this.valueExpression(2);
                        }
                        break;
                    }
                    }
                }
                this.state = 2594;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 294, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.unrollRecursionContexts(parentContext);
        }
        return localContext;
    }

    public primaryExpression(): PrimaryExpressionContext;
    public primaryExpression(_p: number): PrimaryExpressionContext;
    public primaryExpression(_p?: number): PrimaryExpressionContext {
        if (_p === undefined) {
            _p = 0;
        }

        let parentContext = this.context;
        let parentState = this.state;
        let localContext = new PrimaryExpressionContext(this.context, parentState);
        let previousContext = localContext;
        let _startState = 330;
        this.enterRecursionRule(localContext, 330, SparkSQLParser.RULE_primaryExpression, _p);
        let _la: number;
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2727;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 308, this.context) ) {
            case 1:
                {
                localContext = new SearchedCaseContext(localContext);
                this.context = localContext;
                previousContext = localContext;

                this.state = 2596;
                this.match(SparkSQLParser.KW_CASE);
                this.state = 2598;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                do {
                    {
                    {
                    this.state = 2597;
                    this.whenClause();
                    }
                    }
                    this.state = 2600;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                } while (_la === 450);
                this.state = 2604;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 278) {
                    {
                    this.state = 2602;
                    this.match(SparkSQLParser.KW_ELSE);
                    this.state = 2603;
                    (localContext as SearchedCaseContext)._elseExpression = this.expression();
                    }
                }

                this.state = 2606;
                this.match(SparkSQLParser.KW_END);
                }
                break;
            case 2:
                {
                localContext = new SimpleCaseContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2608;
                this.match(SparkSQLParser.KW_CASE);
                this.state = 2609;
                (localContext as SimpleCaseContext)._value = this.expression();
                this.state = 2611;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                do {
                    {
                    {
                    this.state = 2610;
                    this.whenClause();
                    }
                    }
                    this.state = 2613;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                } while (_la === 450);
                this.state = 2617;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 278) {
                    {
                    this.state = 2615;
                    this.match(SparkSQLParser.KW_ELSE);
                    this.state = 2616;
                    (localContext as SimpleCaseContext)._elseExpression = this.expression();
                    }
                }

                this.state = 2619;
                this.match(SparkSQLParser.KW_END);
                }
                break;
            case 3:
                {
                localContext = new CastContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2621;
                this.match(SparkSQLParser.KW_CAST);
                this.state = 2622;
                this.match(SparkSQLParser.LR_BRACKET);
                this.state = 2623;
                this.expression();
                this.state = 2624;
                this.match(SparkSQLParser.KW_AS);
                this.state = 2625;
                this.columnType();
                this.state = 2626;
                this.match(SparkSQLParser.RR_BRACKET);
                }
                break;
            case 4:
                {
                localContext = new FirstContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2628;
                this.match(SparkSQLParser.KW_FIRST);
                this.state = 2629;
                this.match(SparkSQLParser.LR_BRACKET);
                this.state = 2630;
                this.expression();
                this.state = 2633;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 69) {
                    {
                    this.state = 2631;
                    this.match(SparkSQLParser.KW_IGNORE);
                    this.state = 2632;
                    this.match(SparkSQLParser.KW_NULLS);
                    }
                }

                this.state = 2635;
                this.match(SparkSQLParser.RR_BRACKET);
                }
                break;
            case 5:
                {
                localContext = new LastContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2637;
                this.match(SparkSQLParser.KW_LAST);
                this.state = 2638;
                this.match(SparkSQLParser.LR_BRACKET);
                this.state = 2639;
                this.expression();
                this.state = 2642;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 69) {
                    {
                    this.state = 2640;
                    this.match(SparkSQLParser.KW_IGNORE);
                    this.state = 2641;
                    this.match(SparkSQLParser.KW_NULLS);
                    }
                }

                this.state = 2644;
                this.match(SparkSQLParser.RR_BRACKET);
                }
                break;
            case 6:
                {
                localContext = new PositionContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2646;
                this.match(SparkSQLParser.KW_POSITION);
                this.state = 2647;
                this.match(SparkSQLParser.LR_BRACKET);
                this.state = 2648;
                (localContext as PositionContext)._substr = this.valueExpression(0);
                this.state = 2649;
                this.match(SparkSQLParser.KW_IN);
                this.state = 2650;
                (localContext as PositionContext)._str = this.valueExpression(0);
                this.state = 2651;
                this.match(SparkSQLParser.RR_BRACKET);
                }
                break;
            case 7:
                {
                localContext = new ConstantDefaultContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2653;
                this.constant();
                }
                break;
            case 8:
                {
                localContext = new StarContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2654;
                this.match(SparkSQLParser.ASTERISK_SIGN);
                }
                break;
            case 9:
                {
                localContext = new StarContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2655;
                this.uid();
                this.state = 2656;
                this.match(SparkSQLParser.DOT);
                this.state = 2657;
                this.match(SparkSQLParser.ASTERISK_SIGN);
                }
                break;
            case 10:
                {
                localContext = new SubqueryExpressionContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2659;
                this.match(SparkSQLParser.LR_BRACKET);
                this.state = 2660;
                this.queryStatement(0);
                this.state = 2661;
                this.match(SparkSQLParser.RR_BRACKET);
                }
                break;
            case 11:
                {
                localContext = new ValuesContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2663;
                this.match(SparkSQLParser.LR_BRACKET);
                {
                this.state = 2664;
                this.functionParam();
                this.state = 2669;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 480) {
                    {
                    {
                    this.state = 2665;
                    this.match(SparkSQLParser.COMMA);
                    this.state = 2666;
                    this.functionParam();
                    }
                    }
                    this.state = 2671;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                }
                this.state = 2672;
                this.match(SparkSQLParser.RR_BRACKET);
                }
                break;
            case 12:
                {
                localContext = new FunctionCallContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2674;
                this.functionName();
                this.state = 2675;
                this.match(SparkSQLParser.LR_BRACKET);
                this.state = 2687;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 4294684608) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & 4293918715) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & 4185849791) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & 4294967263) !== 0) || ((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & 3757047707) !== 0) || ((((_la - 160)) & ~0x1F) === 0 && ((1 << (_la - 160)) & 4252958679) !== 0) || ((((_la - 192)) & ~0x1F) === 0 && ((1 << (_la - 192)) & 2156412927) !== 0) || ((((_la - 230)) & ~0x1F) === 0 && ((1 << (_la - 230)) & 2685932551) !== 0) || ((((_la - 271)) & ~0x1F) === 0 && ((1 << (_la - 271)) & 70336513) !== 0) || ((((_la - 303)) & ~0x1F) === 0 && ((1 << (_la - 303)) & 2030075921) !== 0) || ((((_la - 338)) & ~0x1F) === 0 && ((1 << (_la - 338)) & 2148205697) !== 0) || ((((_la - 375)) & ~0x1F) === 0 && ((1 << (_la - 375)) & 42494055) !== 0) || ((((_la - 414)) & ~0x1F) === 0 && ((1 << (_la - 414)) & 276029453) !== 0) || ((((_la - 456)) & ~0x1F) === 0 && ((1 << (_la - 456)) & 135266817) !== 0) || ((((_la - 488)) & ~0x1F) === 0 && ((1 << (_la - 488)) & 15373) !== 0)) {
                    {
                    this.state = 2677;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 302, this.context) ) {
                    case 1:
                        {
                        this.state = 2676;
                        this.setQuantifier();
                        }
                        break;
                    }
                    this.state = 2679;
                    this.functionParam();
                    this.state = 2684;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    while (_la === 480) {
                        {
                        {
                        this.state = 2680;
                        this.match(SparkSQLParser.COMMA);
                        this.state = 2681;
                        this.functionParam();
                        }
                        }
                        this.state = 2686;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                    }
                    }
                }

                this.state = 2689;
                this.match(SparkSQLParser.RR_BRACKET);
                }
                break;
            case 13:
                {
                localContext = new FunctionCallContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2691;
                this.functionName();
                this.state = 2692;
                this.match(SparkSQLParser.LR_BRACKET);
                this.state = 2693;
                this.functionParam();
                this.state = 2694;
                this.match(SparkSQLParser.KW_TO);
                this.state = 2695;
                this.functionParam();
                this.state = 2696;
                this.match(SparkSQLParser.RR_BRACKET);
                }
                break;
            case 14:
                {
                localContext = new FunctionCallFilterContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2698;
                this.functionName();
                this.state = 2699;
                this.match(SparkSQLParser.LR_BRACKET);
                this.state = 2701;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 305, this.context) ) {
                case 1:
                    {
                    this.state = 2700;
                    this.setQuantifier();
                    }
                    break;
                }
                this.state = 2703;
                this.functionParam();
                this.state = 2704;
                this.match(SparkSQLParser.RR_BRACKET);
                this.state = 2706;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 306, this.context) ) {
                case 1:
                    {
                    this.state = 2705;
                    this.filterClause();
                    }
                    break;
                }
                }
                break;
            case 15:
                {
                localContext = new AggregateFunctionsContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2708;
                this.funtionBody();
                this.state = 2709;
                this.filterPart();
                }
                break;
            case 16:
                {
                localContext = new OrderSetAggregateFunctionsContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2711;
                this.funtionBody();
                this.state = 2712;
                this.match(SparkSQLParser.KW_WITHIN);
                this.state = 2713;
                this.match(SparkSQLParser.KW_GROUP);
                this.state = 2714;
                this.match(SparkSQLParser.LR_BRACKET);
                this.state = 2715;
                this.orderByCaluse();
                this.state = 2716;
                this.match(SparkSQLParser.RR_BRACKET);
                this.state = 2718;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 307, this.context) ) {
                case 1:
                    {
                    this.state = 2717;
                    this.filterPart();
                    }
                    break;
                }
                }
                break;
            case 17:
                {
                localContext = new ColumnReferenceContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2720;
                this.identifier();
                }
                break;
            case 18:
                {
                localContext = new UidForColumnNameContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2721;
                this.uid();
                }
                break;
            case 19:
                {
                localContext = new ParenthesizedExpressionContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2722;
                this.match(SparkSQLParser.LR_BRACKET);
                this.state = 2723;
                this.expression();
                this.state = 2724;
                this.match(SparkSQLParser.RR_BRACKET);
                }
                break;
            case 20:
                {
                localContext = new ComplexDataTypeFieldExpressionContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2726;
                this.complexDataTypeExpression();
                }
                break;
            }
            this.context!.stop = this.tokenStream.LT(-1);
            this.state = 2736;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 309, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    if (this.parseListeners != null) {
                        this.triggerExitRuleEvent();
                    }
                    previousContext = localContext;
                    {
                    {
                    localContext = new SubscriptContext(new PrimaryExpressionContext(parentContext, parentState));
                    (localContext as SubscriptContext)._value = previousContext;
                    this.pushNewRecursionContext(localContext, _startState, SparkSQLParser.RULE_primaryExpression);
                    this.state = 2729;
                    if (!(this.precpred(this.context, 5))) {
                        throw this.createFailedPredicateException("this.precpred(this.context, 5)");
                    }
                    this.state = 2730;
                    this.match(SparkSQLParser.LS_BRACKET);
                    this.state = 2731;
                    (localContext as SubscriptContext)._index = this.valueExpression(0);
                    this.state = 2732;
                    this.match(SparkSQLParser.RS_BRACKET);
                    }
                    }
                }
                this.state = 2738;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 309, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.unrollRecursionContexts(parentContext);
        }
        return localContext;
    }
    public complexDataTypeExpression(): ComplexDataTypeExpressionContext {
        let localContext = new ComplexDataTypeExpressionContext(this.context, this.state);
        this.enterRule(localContext, 332, SparkSQLParser.RULE_complexDataTypeExpression);
        try {
            this.state = 2743;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case SparkSQLParser.KW_ARRAY:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2739;
                this.arrayExpression();
                }
                break;
            case SparkSQLParser.KW_ROW:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2740;
                this.rowExpression();
                }
                break;
            case SparkSQLParser.KW_MAP:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 2741;
                this.mapExpression();
                }
                break;
            case SparkSQLParser.KW_STRUCT:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 2742;
                this.structExpression();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public arrayExpression(): ArrayExpressionContext {
        let localContext = new ArrayExpressionContext(this.context, this.state);
        this.enterRule(localContext, 334, SparkSQLParser.RULE_arrayExpression);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2745;
            this.match(SparkSQLParser.KW_ARRAY);
            this.state = 2746;
            this.match(SparkSQLParser.LS_BRACKET);
            this.state = 2747;
            this.dataTypeExpression();
            this.state = 2752;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 480) {
                {
                {
                this.state = 2748;
                this.match(SparkSQLParser.COMMA);
                this.state = 2749;
                this.dataTypeExpression();
                }
                }
                this.state = 2754;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 2755;
            this.match(SparkSQLParser.RS_BRACKET);
            this.state = 2756;
            this.match(SparkSQLParser.KW_ARRAY);
            this.state = 2757;
            this.match(SparkSQLParser.LR_BRACKET);
            this.state = 2758;
            this.dataTypeExpression();
            this.state = 2763;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 480) {
                {
                {
                this.state = 2759;
                this.match(SparkSQLParser.COMMA);
                this.state = 2760;
                this.dataTypeExpression();
                }
                }
                this.state = 2765;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 2766;
            this.match(SparkSQLParser.RR_BRACKET);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public structExpression(): StructExpressionContext {
        let localContext = new StructExpressionContext(this.context, this.state);
        this.enterRule(localContext, 336, SparkSQLParser.RULE_structExpression);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2768;
            this.match(SparkSQLParser.KW_STRUCT);
            this.state = 2769;
            this.match(SparkSQLParser.LR_BRACKET);
            this.state = 2770;
            this.dataTypeExpression();
            this.state = 2775;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 480) {
                {
                {
                this.state = 2771;
                this.match(SparkSQLParser.COMMA);
                this.state = 2772;
                this.dataTypeExpression();
                }
                }
                this.state = 2777;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 2778;
            this.match(SparkSQLParser.RR_BRACKET);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public rowExpression(): RowExpressionContext {
        let localContext = new RowExpressionContext(this.context, this.state);
        this.enterRule(localContext, 338, SparkSQLParser.RULE_rowExpression);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2780;
            this.match(SparkSQLParser.KW_ROW);
            this.state = 2781;
            this.match(SparkSQLParser.LR_BRACKET);
            this.state = 2782;
            this.dataTypeExpression();
            this.state = 2787;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 480) {
                {
                {
                this.state = 2783;
                this.match(SparkSQLParser.COMMA);
                this.state = 2784;
                this.dataTypeExpression();
                }
                }
                this.state = 2789;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 2790;
            this.match(SparkSQLParser.RR_BRACKET);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public mapExpression(): MapExpressionContext {
        let localContext = new MapExpressionContext(this.context, this.state);
        this.enterRule(localContext, 340, SparkSQLParser.RULE_mapExpression);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2792;
            this.match(SparkSQLParser.KW_MAP);
            this.state = 2793;
            this.match(SparkSQLParser.LS_BRACKET);
            this.state = 2794;
            this.dataTypeExpression();
            this.state = 2795;
            this.match(SparkSQLParser.COMMA);
            this.state = 2796;
            this.dataTypeExpression();
            this.state = 2797;
            this.match(SparkSQLParser.RS_BRACKET);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public dataTypeExpression(): DataTypeExpressionContext {
        let localContext = new DataTypeExpressionContext(this.context, this.state);
        this.enterRule(localContext, 342, SparkSQLParser.RULE_dataTypeExpression);
        try {
            this.state = 2803;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 315, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2799;
                this.columnAlias();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2800;
                this.constant();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 2801;
                this.complexDataTypeExpression();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 2802;
                this.sqlSimpleType();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public sqlSimpleType(): SqlSimpleTypeContext {
        let localContext = new SqlSimpleTypeContext(this.context, this.state);
        this.enterRule(localContext, 344, SparkSQLParser.RULE_sqlSimpleType);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2805;
            _la = this.tokenStream.LA(1);
            if(!(_la === 12 || _la === 90 || _la === 133 || _la === 157 || _la === 175 || _la === 176 || _la === 218 || _la === 222 || ((((_la - 259)) & ~0x1F) === 0 && ((1 << (_la - 259)) & 65553) !== 0) || ((((_la - 293)) & ~0x1F) === 0 && ((1 << (_la - 293)) & 12582913) !== 0) || _la === 358 || ((((_la - 410)) & ~0x1F) === 0 && ((1 << (_la - 410)) & 4587521) !== 0))) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public functionName(): FunctionNameContext {
        let localContext = new FunctionNameContext(this.context, this.state);
        this.enterRule(localContext, 346, SparkSQLParser.RULE_functionName);
        try {
            this.state = 2810;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 316, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2807;
                this.nonReservedKeywords();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2808;
                this.uid();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 2809;
                this.reservedKeywordsUsedAsFuncName();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public functionParam(): FunctionParamContext {
        let localContext = new FunctionParamContext(this.context, this.state);
        this.enterRule(localContext, 348, SparkSQLParser.RULE_functionParam);
        try {
            this.state = 2818;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 317, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2812;
                this.reservedKeywordsUsedAsFuncParam();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2813;
                this.timeIntervalUnit();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 2814;
                this.timePointUnit();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 2815;
                this.expression();
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 2816;
                this.filterClause();
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 2817;
                this.constant();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public filterClause(): FilterClauseContext {
        let localContext = new FilterClauseContext(this.context, this.state);
        this.enterRule(localContext, 350, SparkSQLParser.RULE_filterClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2820;
            this.match(SparkSQLParser.KW_FILTER);
            this.state = 2821;
            this.match(SparkSQLParser.LR_BRACKET);
            this.state = 2822;
            this.match(SparkSQLParser.KW_WHERE);
            this.state = 2823;
            this.booleanExpression(0);
            this.state = 2824;
            this.match(SparkSQLParser.RR_BRACKET);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public correlationName(): CorrelationNameContext {
        let localContext = new CorrelationNameContext(this.context, this.state);
        this.enterRule(localContext, 352, SparkSQLParser.RULE_correlationName);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2826;
            this.identifier();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public qualifiedName(): QualifiedNameContext {
        let localContext = new QualifiedNameContext(this.context, this.state);
        this.enterRule(localContext, 354, SparkSQLParser.RULE_qualifiedName);
        try {
            this.state = 2831;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 318, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2828;
                this.identifier();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2829;
                this.uid();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 2830;
                this.unquotedAnyString();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public timeIntervalExpression(): TimeIntervalExpressionContext {
        let localContext = new TimeIntervalExpressionContext(this.context, this.state);
        this.enterRule(localContext, 356, SparkSQLParser.RULE_timeIntervalExpression);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2833;
            this.match(SparkSQLParser.KW_INTERVAL);
            this.state = 2836;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 319, this.context) ) {
            case 1:
                {
                this.state = 2834;
                this.errorCapturingMultiUnitsInterval();
                }
                break;
            case 2:
                {
                this.state = 2835;
                this.errorCapturingUnitToUnitInterval();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public errorCapturingMultiUnitsInterval(): ErrorCapturingMultiUnitsIntervalContext {
        let localContext = new ErrorCapturingMultiUnitsIntervalContext(this.context, this.state);
        this.enterRule(localContext, 358, SparkSQLParser.RULE_errorCapturingMultiUnitsInterval);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2838;
            this.multiUnitsInterval();
            this.state = 2840;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 320, this.context) ) {
            case 1:
                {
                this.state = 2839;
                this.unitToUnitInterval();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public multiUnitsInterval(): MultiUnitsIntervalContext {
        let localContext = new MultiUnitsIntervalContext(this.context, this.state);
        this.enterRule(localContext, 360, SparkSQLParser.RULE_multiUnitsInterval);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2845;
            this.errorHandler.sync(this);
            alternative = 1;
            do {
                switch (alternative) {
                case 1:
                    {
                    {
                    this.state = 2842;
                    this.intervalValue();
                    this.state = 2843;
                    this.timeIntervalUnit();
                    }
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                this.state = 2847;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 321, this.context);
            } while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public errorCapturingUnitToUnitInterval(): ErrorCapturingUnitToUnitIntervalContext {
        let localContext = new ErrorCapturingUnitToUnitIntervalContext(this.context, this.state);
        this.enterRule(localContext, 362, SparkSQLParser.RULE_errorCapturingUnitToUnitInterval);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2849;
            localContext._body = this.unitToUnitInterval();
            this.state = 2852;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 322, this.context) ) {
            case 1:
                {
                this.state = 2850;
                localContext._error1 = this.multiUnitsInterval();
                }
                break;
            case 2:
                {
                this.state = 2851;
                localContext._error2 = this.unitToUnitInterval();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public unitToUnitInterval(): UnitToUnitIntervalContext {
        let localContext = new UnitToUnitIntervalContext(this.context, this.state);
        this.enterRule(localContext, 364, SparkSQLParser.RULE_unitToUnitInterval);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2854;
            localContext._value = this.intervalValue();
            this.state = 2855;
            localContext._from_ = this.timeIntervalUnit();
            this.state = 2856;
            this.match(SparkSQLParser.KW_TO);
            this.state = 2857;
            localContext._to = this.timeIntervalUnit();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public intervalValue(): IntervalValueContext {
        let localContext = new IntervalValueContext(this.context, this.state);
        this.enterRule(localContext, 366, SparkSQLParser.RULE_intervalValue);
        let _la: number;
        try {
            this.state = 2864;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case SparkSQLParser.HYPNEN_SIGN:
            case SparkSQLParser.ADD_SIGN:
            case SparkSQLParser.DIG_LITERAL:
            case SparkSQLParser.REAL_LITERAL:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2860;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 490 || _la === 491) {
                    {
                    this.state = 2859;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 490 || _la === 491)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                }

                this.state = 2862;
                _la = this.tokenStream.LA(1);
                if(!(_la === 499 || _la === 500)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            case SparkSQLParser.STRING_LITERAL:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2863;
                this.match(SparkSQLParser.STRING_LITERAL);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public columnAlias(): ColumnAliasContext {
        let localContext = new ColumnAliasContext(this.context, this.state);
        this.enterRule(localContext, 368, SparkSQLParser.RULE_columnAlias);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2866;
            this.anyAlias();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tableAlias(): TableAliasContext {
        let localContext = new TableAliasContext(this.context, this.state);
        this.enterRule(localContext, 370, SparkSQLParser.RULE_tableAlias);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2868;
            this.anyAlias();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public anyAlias(): AnyAliasContext {
        let localContext = new AnyAliasContext(this.context, this.state);
        this.enterRule(localContext, 372, SparkSQLParser.RULE_anyAlias);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2871;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 212) {
                {
                this.state = 2870;
                this.match(SparkSQLParser.KW_AS);
                }
            }

            this.state = 2873;
            this.identifier();
            this.state = 2875;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 326, this.context) ) {
            case 1:
                {
                this.state = 2874;
                this.identifierList();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public errorCapturingIdentifier(): ErrorCapturingIdentifierContext {
        let localContext = new ErrorCapturingIdentifierContext(this.context, this.state);
        this.enterRule(localContext, 374, SparkSQLParser.RULE_errorCapturingIdentifier);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2877;
            this.identifier();
            this.state = 2878;
            this.errorCapturingIdentifierExtra();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public errorCapturingIdentifierExtra(): ErrorCapturingIdentifierExtraContext {
        let localContext = new ErrorCapturingIdentifierExtraContext(this.context, this.state);
        this.enterRule(localContext, 376, SparkSQLParser.RULE_errorCapturingIdentifierExtra);
        let _la: number;
        try {
            localContext = new ErrorIdentContext(localContext);
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2884;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 344) {
                {
                {
                this.state = 2880;
                this.match(SparkSQLParser.KW_MINUS);
                this.state = 2881;
                this.identifier();
                }
                }
                this.state = 2886;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public identifierList(): IdentifierListContext {
        let localContext = new IdentifierListContext(this.context, this.state);
        this.enterRule(localContext, 378, SparkSQLParser.RULE_identifierList);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2887;
            this.match(SparkSQLParser.LR_BRACKET);
            this.state = 2888;
            this.identifierSeq();
            this.state = 2889;
            this.match(SparkSQLParser.RR_BRACKET);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public identifierSeq(): IdentifierSeqContext {
        let localContext = new IdentifierSeqContext(this.context, this.state);
        this.enterRule(localContext, 380, SparkSQLParser.RULE_identifierSeq);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2891;
            this.identifier();
            this.state = 2896;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 480) {
                {
                {
                this.state = 2892;
                this.match(SparkSQLParser.COMMA);
                this.state = 2893;
                this.identifier();
                }
                }
                this.state = 2898;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public identifier(): IdentifierContext {
        let localContext = new IdentifierContext(this.context, this.state);
        this.enterRule(localContext, 382, SparkSQLParser.RULE_identifier);
        try {
            this.state = 2903;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case SparkSQLParser.DIG_LITERAL:
            case SparkSQLParser.ID_LITERAL:
                localContext = new UnquotedIdentifierAlternativeContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2899;
                this.unquotedIdentifier();
                }
                break;
            case SparkSQLParser.STRING_LITERAL:
                localContext = new QuotedIdentifierAlternativeContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2900;
                this.match(SparkSQLParser.STRING_LITERAL);
                }
                break;
            case SparkSQLParser.KW_ADD:
            case SparkSQLParser.KW_ADMIN:
            case SparkSQLParser.KW_AFTER:
            case SparkSQLParser.KW_ANALYZE:
            case SparkSQLParser.KW_ASC:
            case SparkSQLParser.KW_BEFORE:
            case SparkSQLParser.KW_BYTES:
            case SparkSQLParser.KW_CASCADE:
            case SparkSQLParser.KW_CATALOG:
            case SparkSQLParser.KW_CATALOGS:
            case SparkSQLParser.KW_CENTURY:
            case SparkSQLParser.KW_CHAIN:
            case SparkSQLParser.KW_CHANGELOG_MODE:
            case SparkSQLParser.KW_CHARACTERS:
            case SparkSQLParser.KW_COMMENT:
            case SparkSQLParser.KW_COMPACT:
            case SparkSQLParser.KW_COLUMNS:
            case SparkSQLParser.KW_CONSTRAINTS:
            case SparkSQLParser.KW_CONSTRUCTOR:
            case SparkSQLParser.KW_COMPUTE:
            case SparkSQLParser.KW_CUMULATE:
            case SparkSQLParser.KW_DATA:
            case SparkSQLParser.KW_DATABASE:
            case SparkSQLParser.KW_DATABASES:
            case SparkSQLParser.KW_DAYS:
            case SparkSQLParser.KW_DECADE:
            case SparkSQLParser.KW_DEFINED:
            case SparkSQLParser.KW_DESC:
            case SparkSQLParser.KW_DESCRIPTOR:
            case SparkSQLParser.KW_DIV:
            case SparkSQLParser.KW_ENCODING:
            case SparkSQLParser.KW_ENFORCED:
            case SparkSQLParser.KW_ENGINE:
            case SparkSQLParser.KW_ERROR:
            case SparkSQLParser.KW_ESTIMATED_COST:
            case SparkSQLParser.KW_EXCEPTION:
            case SparkSQLParser.KW_EXCLUDE:
            case SparkSQLParser.KW_EXCLUDING:
            case SparkSQLParser.KW_EXTENDED:
            case SparkSQLParser.KW_FILE:
            case SparkSQLParser.KW_FINAL:
            case SparkSQLParser.KW_FIRST:
            case SparkSQLParser.KW_FOLLOWING:
            case SparkSQLParser.KW_FORMAT:
            case SparkSQLParser.KW_FORTRAN:
            case SparkSQLParser.KW_FOUND:
            case SparkSQLParser.KW_FRAC_SECOND:
            case SparkSQLParser.KW_FUNCTIONS:
            case SparkSQLParser.KW_GENERAL:
            case SparkSQLParser.KW_GENERATED:
            case SparkSQLParser.KW_GO:
            case SparkSQLParser.KW_GOTO:
            case SparkSQLParser.KW_GRANTED:
            case SparkSQLParser.KW_HOP:
            case SparkSQLParser.KW_HOURS:
            case SparkSQLParser.KW_IF:
            case SparkSQLParser.KW_IGNORE:
            case SparkSQLParser.KW_INCREMENT:
            case SparkSQLParser.KW_INPUT:
            case SparkSQLParser.KW_INVOKER:
            case SparkSQLParser.KW_JAR:
            case SparkSQLParser.KW_JARS:
            case SparkSQLParser.KW_JAVA:
            case SparkSQLParser.KW_JSON:
            case SparkSQLParser.KW_JSON_EXECUTION_PLAN:
            case SparkSQLParser.KW_KEY:
            case SparkSQLParser.KW_KEY_MEMBER:
            case SparkSQLParser.KW_KEY_TYPE:
            case SparkSQLParser.KW_LABEL:
            case SparkSQLParser.KW_LAST:
            case SparkSQLParser.KW_LENGTH:
            case SparkSQLParser.KW_LEVEL:
            case SparkSQLParser.KW_LOAD:
            case SparkSQLParser.KW_MAP:
            case SparkSQLParser.KW_MICROSECOND:
            case SparkSQLParser.KW_MILLENNIUM:
            case SparkSQLParser.KW_MILLISECOND:
            case SparkSQLParser.KW_MINUTES:
            case SparkSQLParser.KW_MINVALUE:
            case SparkSQLParser.KW_MODIFY:
            case SparkSQLParser.KW_MODULES:
            case SparkSQLParser.KW_MONTHS:
            case SparkSQLParser.KW_NANOSECOND:
            case SparkSQLParser.KW_NULLS:
            case SparkSQLParser.KW_NUMBER:
            case SparkSQLParser.KW_OPTION:
            case SparkSQLParser.KW_OPTIONS:
            case SparkSQLParser.KW_ORDERING:
            case SparkSQLParser.KW_OUTPUT:
            case SparkSQLParser.KW_OVERWRITE:
            case SparkSQLParser.KW_OVERWRITING:
            case SparkSQLParser.KW_PARTITIONED:
            case SparkSQLParser.KW_PARTITIONS:
            case SparkSQLParser.KW_PASSING:
            case SparkSQLParser.KW_PAST:
            case SparkSQLParser.KW_PATH:
            case SparkSQLParser.KW_PLACING:
            case SparkSQLParser.KW_PLAN:
            case SparkSQLParser.KW_PRECEDING:
            case SparkSQLParser.KW_PRESERVE:
            case SparkSQLParser.KW_PRIOR:
            case SparkSQLParser.KW_PRIVILEGES:
            case SparkSQLParser.KW_PUBLIC:
            case SparkSQLParser.KW_PYTHON:
            case SparkSQLParser.KW_PYTHON_FILES:
            case SparkSQLParser.KW_PYTHON_REQUIREMENTS:
            case SparkSQLParser.KW_PYTHON_DEPENDENCIES:
            case SparkSQLParser.KW_PYTHON_JAR:
            case SparkSQLParser.KW_PYTHON_ARCHIVES:
            case SparkSQLParser.KW_PYTHON_PARAMETER:
            case SparkSQLParser.KW_QUARTER:
            case SparkSQLParser.KW_RAW:
            case SparkSQLParser.KW_READ:
            case SparkSQLParser.KW_RELATIVE:
            case SparkSQLParser.KW_REMOVE:
            case SparkSQLParser.KW_RENAME:
            case SparkSQLParser.KW_REPLACE:
            case SparkSQLParser.KW_RESPECT:
            case SparkSQLParser.KW_RESTART:
            case SparkSQLParser.KW_RESTRICT:
            case SparkSQLParser.KW_ROLE:
            case SparkSQLParser.KW_ROW_COUNT:
            case SparkSQLParser.KW_SCALA:
            case SparkSQLParser.KW_SCALAR:
            case SparkSQLParser.KW_SCALE:
            case SparkSQLParser.KW_SCHEMA:
            case SparkSQLParser.KW_SECONDS:
            case SparkSQLParser.KW_SECTION:
            case SparkSQLParser.KW_SECURITY:
            case SparkSQLParser.KW_SELF:
            case SparkSQLParser.KW_SERVER:
            case SparkSQLParser.KW_SERVER_NAME:
            case SparkSQLParser.KW_SESSION:
            case SparkSQLParser.KW_SETS:
            case SparkSQLParser.KW_SIMPLE:
            case SparkSQLParser.KW_SIZE:
            case SparkSQLParser.KW_SLIDE:
            case SparkSQLParser.KW_SOURCE:
            case SparkSQLParser.KW_SPACE:
            case SparkSQLParser.KW_STATE:
            case SparkSQLParser.KW_STATEMENT:
            case SparkSQLParser.KW_STEP:
            case SparkSQLParser.KW_STRING:
            case SparkSQLParser.KW_STRUCTURE:
            case SparkSQLParser.KW_STYLE:
            case SparkSQLParser.KW_TABLES:
            case SparkSQLParser.KW_TEMPORARY:
            case SparkSQLParser.KW_TIMECOL:
            case SparkSQLParser.KW_FLOOR:
            case SparkSQLParser.KW_TIMESTAMP_LTZ:
            case SparkSQLParser.KW_TIMESTAMPADD:
            case SparkSQLParser.KW_TIMESTAMPDIFF:
            case SparkSQLParser.KW_TOTIMESTAMP:
            case SparkSQLParser.KW_TRANSFORM:
            case SparkSQLParser.KW_TUMBLE:
            case SparkSQLParser.KW_TYPE:
            case SparkSQLParser.KW_UNDER:
            case SparkSQLParser.KW_UNLOAD:
            case SparkSQLParser.KW_USAGE:
            case SparkSQLParser.KW_USE:
            case SparkSQLParser.KW_UTF16:
            case SparkSQLParser.KW_UTF32:
            case SparkSQLParser.KW_UTF8:
            case SparkSQLParser.KW_VERSION:
            case SparkSQLParser.KW_VIEW:
            case SparkSQLParser.KW_VIEWS:
            case SparkSQLParser.KW_VIRTUAL:
            case SparkSQLParser.KW_WATERMARK:
            case SparkSQLParser.KW_WATERMARKS:
            case SparkSQLParser.KW_WEEK:
            case SparkSQLParser.KW_WORK:
            case SparkSQLParser.KW_WRAPPER:
            case SparkSQLParser.KW_YEARS:
            case SparkSQLParser.KW_ZONE:
            case SparkSQLParser.KW_LOCALTIMESTAMP:
                localContext = new NonReservedKeywordsAlternativeContext(localContext);
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 2901;
                this.nonReservedKeywords();
                }
                break;
            case SparkSQLParser.DOLLAR:
                localContext = new UrefVarAlternativeContext(localContext);
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 2902;
                this.refVar();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public unquotedAnyString(): UnquotedAnyStringContext {
        let localContext = new UnquotedAnyStringContext(this.context, this.state);
        this.enterRule(localContext, 384, SparkSQLParser.RULE_unquotedAnyString);
        try {
            this.state = 2909;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 330, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2905;
                this.unquotedIdentifier();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2906;
                this.reservedKeywordsUsedAsFuncParam();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 2907;
                this.nonReservedKeywords();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 2908;
                this.reservedKeywordsUsedAsFuncName();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public refVar(): RefVarContext {
        let localContext = new RefVarContext(this.context, this.state);
        this.enterRule(localContext, 386, SparkSQLParser.RULE_refVar);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2911;
            this.match(SparkSQLParser.DOLLAR);
            this.state = 2912;
            this.match(SparkSQLParser.LB_BRACKET);
            this.state = 2913;
            this.unquotedIdentifier();
            this.state = 2914;
            this.match(SparkSQLParser.RB_BRACKET);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public unquotedIdentifier(): UnquotedIdentifierContext {
        let localContext = new UnquotedIdentifierContext(this.context, this.state);
        this.enterRule(localContext, 388, SparkSQLParser.RULE_unquotedIdentifier);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2916;
            _la = this.tokenStream.LA(1);
            if(!(_la === 499 || _la === 501)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public whenClause(): WhenClauseContext {
        let localContext = new WhenClauseContext(this.context, this.state);
        this.enterRule(localContext, 390, SparkSQLParser.RULE_whenClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2918;
            this.match(SparkSQLParser.KW_WHEN);
            this.state = 2919;
            localContext._condition = this.expression();
            this.state = 2920;
            this.match(SparkSQLParser.KW_THEN);
            this.state = 2921;
            localContext._result = this.expression();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public catalogPath(): CatalogPathContext {
        let localContext = new CatalogPathContext(this.context, this.state);
        this.enterRule(localContext, 392, SparkSQLParser.RULE_catalogPath);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2923;
            this.uid();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public databasePath(): DatabasePathContext {
        let localContext = new DatabasePathContext(this.context, this.state);
        this.enterRule(localContext, 394, SparkSQLParser.RULE_databasePath);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2925;
            this.uid();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public databasePathCreate(): DatabasePathCreateContext {
        let localContext = new DatabasePathCreateContext(this.context, this.state);
        this.enterRule(localContext, 396, SparkSQLParser.RULE_databasePathCreate);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2927;
            this.uid();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tablePathCreate(): TablePathCreateContext {
        let localContext = new TablePathCreateContext(this.context, this.state);
        this.enterRule(localContext, 398, SparkSQLParser.RULE_tablePathCreate);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2929;
            this.uid();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tablePath(): TablePathContext {
        let localContext = new TablePathContext(this.context, this.state);
        this.enterRule(localContext, 400, SparkSQLParser.RULE_tablePath);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2931;
            this.uid();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public anonymousWindowsName(): AnonymousWindowsNameContext {
        let localContext = new AnonymousWindowsNameContext(this.context, this.state);
        this.enterRule(localContext, 402, SparkSQLParser.RULE_anonymousWindowsName);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2933;
            this.identifier();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public uid(): UidContext {
        let localContext = new UidContext(this.context, this.state);
        this.enterRule(localContext, 404, SparkSQLParser.RULE_uid);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2935;
            this.identifier();
            this.state = 2940;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 331, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 2936;
                    this.match(SparkSQLParser.DOT);
                    this.state = 2937;
                    this.identifier();
                    }
                    }
                }
                this.state = 2942;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 331, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public withOption(): WithOptionContext {
        let localContext = new WithOptionContext(this.context, this.state);
        this.enterRule(localContext, 406, SparkSQLParser.RULE_withOption);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2943;
            this.match(SparkSQLParser.KW_WITH);
            this.state = 2945;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 34 || _la === 423) {
                {
                this.state = 2944;
                _la = this.tokenStream.LA(1);
                if(!(_la === 34 || _la === 423)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
            }

            this.state = 2947;
            this.tablePropertyList();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public ifNotExists(): IfNotExistsContext {
        let localContext = new IfNotExistsContext(this.context, this.state);
        this.enterRule(localContext, 408, SparkSQLParser.RULE_ifNotExists);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2949;
            this.match(SparkSQLParser.KW_IF);
            this.state = 2950;
            this.match(SparkSQLParser.KW_NOT);
            this.state = 2951;
            this.match(SparkSQLParser.KW_EXISTS);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public ifExists(): IfExistsContext {
        let localContext = new IfExistsContext(this.context, this.state);
        this.enterRule(localContext, 410, SparkSQLParser.RULE_ifExists);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2953;
            this.match(SparkSQLParser.KW_IF);
            this.state = 2954;
            this.match(SparkSQLParser.KW_EXISTS);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tablePropertyList(): TablePropertyListContext {
        let localContext = new TablePropertyListContext(this.context, this.state);
        this.enterRule(localContext, 412, SparkSQLParser.RULE_tablePropertyList);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2956;
            this.match(SparkSQLParser.LR_BRACKET);
            this.state = 2957;
            this.tableProperty();
            this.state = 2962;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 480) {
                {
                {
                this.state = 2958;
                this.match(SparkSQLParser.COMMA);
                this.state = 2959;
                this.tableProperty();
                }
                }
                this.state = 2964;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 2965;
            this.match(SparkSQLParser.RR_BRACKET);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tableProperty(): TablePropertyContext {
        let localContext = new TablePropertyContext(this.context, this.state);
        this.enterRule(localContext, 414, SparkSQLParser.RULE_tableProperty);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2967;
            this.tablePropertyKey();
            this.state = 2968;
            this.match(SparkSQLParser.EQUAL_SYMBOL);
            this.state = 2970;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 259) {
                {
                this.state = 2969;
                this.match(SparkSQLParser.KW_DATE);
                }
            }

            this.state = 2972;
            this.tablePropertyValue();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tablePropertyKey(): TablePropertyKeyContext {
        let localContext = new TablePropertyKeyContext(this.context, this.state);
        this.enterRule(localContext, 416, SparkSQLParser.RULE_tablePropertyKey);
        try {
            this.state = 2978;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 335, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2974;
                this.identifier();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2975;
                this.uid();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 2976;
                this.stringLiteral();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 2977;
                this.functionParam();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public propertyName(): PropertyNameContext {
        let localContext = new PropertyNameContext(this.context, this.state);
        this.enterRule(localContext, 418, SparkSQLParser.RULE_propertyName);
        try {
            this.state = 2985;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case SparkSQLParser.SINGLE_QUOTE_SYMB:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2980;
                this.match(SparkSQLParser.SINGLE_QUOTE_SYMB);
                this.state = 2981;
                this.constant();
                this.state = 2982;
                this.match(SparkSQLParser.SINGLE_QUOTE_SYMB);
                }
                break;
            case SparkSQLParser.KW_MICROSECOND:
            case SparkSQLParser.KW_MILLISECOND:
            case SparkSQLParser.KW_QUARTER:
            case SparkSQLParser.KW_WEEK:
            case SparkSQLParser.KW_DAY:
            case SparkSQLParser.KW_FALSE:
            case SparkSQLParser.KW_HOUR:
            case SparkSQLParser.KW_INTERVAL:
            case SparkSQLParser.KW_MINUTE:
            case SparkSQLParser.KW_MONTH:
            case SparkSQLParser.KW_NOT:
            case SparkSQLParser.KW_NULL:
            case SparkSQLParser.KW_SECOND:
            case SparkSQLParser.KW_TRUE:
            case SparkSQLParser.KW_YEAR:
            case SparkSQLParser.HYPNEN_SIGN:
            case SparkSQLParser.STRING_LITERAL:
            case SparkSQLParser.DIG_LITERAL:
            case SparkSQLParser.REAL_LITERAL:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2984;
                this.constant();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tablePropertyValue(): TablePropertyValueContext {
        let localContext = new TablePropertyValueContext(this.context, this.state);
        this.enterRule(localContext, 420, SparkSQLParser.RULE_tablePropertyValue);
        try {
            this.state = 2997;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 337, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2987;
                this.match(SparkSQLParser.DIG_LITERAL);
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2988;
                this.match(SparkSQLParser.REAL_LITERAL);
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 2989;
                this.booleanLiteral();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 2990;
                this.uid();
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 2991;
                this.constant();
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 2992;
                this.refVar();
                }
                break;
            case 7:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 2993;
                this.match(SparkSQLParser.SINGLE_QUOTE_SYMB);
                this.state = 2994;
                this.refVar();
                this.state = 2995;
                this.match(SparkSQLParser.SINGLE_QUOTE_SYMB);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public comparisonOperator(): ComparisonOperatorContext {
        let localContext = new ComparisonOperatorContext(this.context, this.state);
        this.enterRule(localContext, 422, SparkSQLParser.RULE_comparisonOperator);
        try {
            this.state = 3013;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 338, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2999;
                this.match(SparkSQLParser.EQUAL_SYMBOL);
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3000;
                this.match(SparkSQLParser.GREATER_SYMBOL);
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 3001;
                this.match(SparkSQLParser.LESS_SYMBOL);
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 3002;
                this.match(SparkSQLParser.LESS_SYMBOL);
                this.state = 3003;
                this.match(SparkSQLParser.EQUAL_SYMBOL);
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 3004;
                this.match(SparkSQLParser.GREATER_SYMBOL);
                this.state = 3005;
                this.match(SparkSQLParser.EQUAL_SYMBOL);
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 3006;
                this.match(SparkSQLParser.LESS_SYMBOL);
                this.state = 3007;
                this.match(SparkSQLParser.GREATER_SYMBOL);
                }
                break;
            case 7:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 3008;
                this.match(SparkSQLParser.EXCLAMATION_SYMBOL);
                this.state = 3009;
                this.match(SparkSQLParser.EQUAL_SYMBOL);
                }
                break;
            case 8:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 3010;
                this.match(SparkSQLParser.LESS_SYMBOL);
                this.state = 3011;
                this.match(SparkSQLParser.EQUAL_SYMBOL);
                this.state = 3012;
                this.match(SparkSQLParser.GREATER_SYMBOL);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public constant(): ConstantContext {
        let localContext = new ConstantContext(this.context, this.state);
        this.enterRule(localContext, 424, SparkSQLParser.RULE_constant);
        let _la: number;
        try {
            this.state = 3028;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case SparkSQLParser.KW_INTERVAL:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3015;
                this.timeIntervalExpression();
                }
                break;
            case SparkSQLParser.KW_MICROSECOND:
            case SparkSQLParser.KW_MILLISECOND:
            case SparkSQLParser.KW_QUARTER:
            case SparkSQLParser.KW_WEEK:
            case SparkSQLParser.KW_DAY:
            case SparkSQLParser.KW_HOUR:
            case SparkSQLParser.KW_MINUTE:
            case SparkSQLParser.KW_MONTH:
            case SparkSQLParser.KW_SECOND:
            case SparkSQLParser.KW_YEAR:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3016;
                this.timePointLiteral();
                }
                break;
            case SparkSQLParser.STRING_LITERAL:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 3017;
                this.stringLiteral();
                }
                break;
            case SparkSQLParser.HYPNEN_SIGN:
            case SparkSQLParser.DIG_LITERAL:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 3019;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 490) {
                    {
                    this.state = 3018;
                    this.match(SparkSQLParser.HYPNEN_SIGN);
                    }
                }

                this.state = 3021;
                this.decimalLiteral();
                }
                break;
            case SparkSQLParser.KW_FALSE:
            case SparkSQLParser.KW_TRUE:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 3022;
                this.booleanLiteral();
                }
                break;
            case SparkSQLParser.REAL_LITERAL:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 3023;
                this.match(SparkSQLParser.REAL_LITERAL);
                }
                break;
            case SparkSQLParser.KW_NOT:
            case SparkSQLParser.KW_NULL:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 3025;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 354) {
                    {
                    this.state = 3024;
                    this.match(SparkSQLParser.KW_NOT);
                    }
                }

                this.state = 3027;
                this.match(SparkSQLParser.KW_NULL);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public timePointLiteral(): TimePointLiteralContext {
        let localContext = new TimePointLiteralContext(this.context, this.state);
        this.enterRule(localContext, 426, SparkSQLParser.RULE_timePointLiteral);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3030;
            this.timePointUnit();
            this.state = 3031;
            this.stringLiteral();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public stringLiteral(): StringLiteralContext {
        let localContext = new StringLiteralContext(this.context, this.state);
        this.enterRule(localContext, 428, SparkSQLParser.RULE_stringLiteral);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3033;
            this.match(SparkSQLParser.STRING_LITERAL);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public decimalLiteral(): DecimalLiteralContext {
        let localContext = new DecimalLiteralContext(this.context, this.state);
        this.enterRule(localContext, 430, SparkSQLParser.RULE_decimalLiteral);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3035;
            this.match(SparkSQLParser.DIG_LITERAL);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public booleanLiteral(): BooleanLiteralContext {
        let localContext = new BooleanLiteralContext(this.context, this.state);
        this.enterRule(localContext, 432, SparkSQLParser.RULE_booleanLiteral);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3037;
            _la = this.tokenStream.LA(1);
            if(!(_la === 292 || _la === 435)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public setQuantifier(): SetQuantifierContext {
        let localContext = new SetQuantifierContext(this.context, this.state);
        this.enterRule(localContext, 434, SparkSQLParser.RULE_setQuantifier);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3039;
            _la = this.tokenStream.LA(1);
            if(!(_la === 205 || _la === 271)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public timePointUnit(): TimePointUnitContext {
        let localContext = new TimePointUnitContext(this.context, this.state);
        this.enterRule(localContext, 436, SparkSQLParser.RULE_timePointUnit);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3041;
            _la = this.tokenStream.LA(1);
            if(!(_la === 92 || _la === 94 || _la === 129 || _la === 198 || _la === 261 || _la === 307 || _la === 345 || _la === 348 || _la === 400 || _la === 456)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public timeIntervalUnit(): TimeIntervalUnitContext {
        let localContext = new TimeIntervalUnitContext(this.context, this.state);
        this.enterRule(localContext, 438, SparkSQLParser.RULE_timeIntervalUnit);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3043;
            _la = this.tokenStream.LA(1);
            if(!(((((_la - 19)) & ~0x1F) === 0 && ((1 << (_la - 19)) & 16859137) !== 0) || ((((_la - 67)) & ~0x1F) === 0 && ((1 << (_la - 67)) & 503316481) !== 0) || ((((_la - 99)) & ~0x1F) === 0 && ((1 << (_la - 99)) & 1073741827) !== 0) || _la === 149 || ((((_la - 198)) & ~0x1F) === 0 && ((1 << (_la - 198)) & 19) !== 0) || _la === 261 || _la === 307 || _la === 345 || _la === 348 || _la === 400 || _la === 456)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public reservedKeywordsUsedAsFuncParam(): ReservedKeywordsUsedAsFuncParamContext {
        let localContext = new ReservedKeywordsUsedAsFuncParamContext(this.context, this.state);
        this.enterRule(localContext, 440, SparkSQLParser.RULE_reservedKeywordsUsedAsFuncParam);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3045;
            _la = this.tokenStream.LA(1);
            if(!(_la === 205 || _la === 223 || _la === 271 || _la === 332 || _la === 434 || _la === 488)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public reservedKeywordsUsedAsFuncName(): ReservedKeywordsUsedAsFuncNameContext {
        let localContext = new ReservedKeywordsUsedAsFuncNameContext(this.context, this.state);
        this.enterRule(localContext, 442, SparkSQLParser.RULE_reservedKeywordsUsedAsFuncName);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3047;
            _la = this.tokenStream.LA(1);
            if(!(_la === 68 || _la === 91 || _la === 129 || ((((_la - 198)) & ~0x1F) === 0 && ((1 << (_la - 198)) & 139329) !== 0) || ((((_la - 231)) & ~0x1F) === 0 && ((1 << (_la - 231)) & 269224451) !== 0) || ((((_la - 287)) & ~0x1F) === 0 && ((1 << (_la - 287)) & 1115153) !== 0) || ((((_la - 327)) & ~0x1F) === 0 && ((1 << (_la - 327)) & 270794841) !== 0) || ((((_la - 369)) & ~0x1F) === 0 && ((1 << (_la - 369)) & 2182748609) !== 0) || ((((_la - 416)) & ~0x1F) === 0 && ((1 << (_la - 416)) & 68220931) !== 0) || _la === 456)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public nonReservedKeywords(): NonReservedKeywordsContext {
        let localContext = new NonReservedKeywordsContext(this.context, this.state);
        this.enterRule(localContext, 444, SparkSQLParser.RULE_nonReservedKeywords);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3049;
            _la = this.tokenStream.LA(1);
            if(!((((_la) & ~0x1F) === 0 && ((1 << _la) & 4294684608) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & 4293654523) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & 4185849791) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & 4294967263) !== 0) || ((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & 3757047707) !== 0) || ((((_la - 160)) & ~0x1F) === 0 && ((1 << (_la - 160)) & 4252958679) !== 0) || ((((_la - 192)) & ~0x1F) === 0 && ((1 << (_la - 192)) & 3967) !== 0) || _la === 338)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public sqlStatement(): SqlStatementContext {
        let localContext = new SqlStatementContext(this.context, this.state);
        this.enterRule(localContext, 446, SparkSQLParser.RULE_sqlStatement);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3055;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 342, this.context) ) {
            case 1:
                {
                this.state = 3051;
                this.queryStatement(0);
                }
                break;
            case 2:
                {
                this.state = 3052;
                this.insertStatement();
                }
                break;
            case 3:
                {
                this.state = 3053;
                this.createStatement();
                }
                break;
            case 4:
                {
                this.state = 3054;
                this.plusStatement();
                }
                break;
            }
            this.state = 3057;
            this.match(SparkSQLParser.SEMICOLON);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public selectStatement(): SelectStatementContext {
        let localContext = new SelectStatementContext(this.context, this.state);
        this.enterRule(localContext, 448, SparkSQLParser.RULE_selectStatement);
        try {
            this.state = 3096;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 351, this.context) ) {
            case 1:
                localContext = new CommonSelectContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3059;
                this.selectClause();
                this.state = 3060;
                this.fromClause();
                this.state = 3062;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 343, this.context) ) {
                case 1:
                    {
                    this.state = 3061;
                    this.whereClause();
                    }
                    break;
                }
                this.state = 3065;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 344, this.context) ) {
                case 1:
                    {
                    this.state = 3064;
                    this.someByClause();
                    }
                    break;
                }
                this.state = 3068;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 345, this.context) ) {
                case 1:
                    {
                    this.state = 3067;
                    this.havingClause();
                    }
                    break;
                }
                this.state = 3071;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 346, this.context) ) {
                case 1:
                    {
                    this.state = 3070;
                    this.windowClause();
                    }
                    break;
                }
                }
                break;
            case 2:
                localContext = new SparkStyleSelectContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3073;
                this.fromClause();
                this.state = 3074;
                this.selectClause();
                this.state = 3076;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 347, this.context) ) {
                case 1:
                    {
                    this.state = 3075;
                    this.whereClause();
                    }
                    break;
                }
                this.state = 3079;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 348, this.context) ) {
                case 1:
                    {
                    this.state = 3078;
                    this.someByClause();
                    }
                    break;
                }
                this.state = 3082;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 349, this.context) ) {
                case 1:
                    {
                    this.state = 3081;
                    this.havingClause();
                    }
                    break;
                }
                this.state = 3085;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 350, this.context) ) {
                case 1:
                    {
                    this.state = 3084;
                    this.windowClause();
                    }
                    break;
                }
                }
                break;
            case 3:
                localContext = new MatchRecognizeSelectContext(localContext);
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 3087;
                this.selectClause();
                this.state = 3088;
                this.fromClause();
                this.state = 3089;
                this.matchRecognizeClause();
                }
                break;
            case 4:
                localContext = new TableSampleContext(localContext);
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 3091;
                this.selectClause();
                this.state = 3092;
                this.fromClause();
                this.state = 3093;
                this.samplingQueries();
                }
                break;
            case 5:
                localContext = new SelectPlusContext(localContext);
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 3095;
                this.selectStatementPlus();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public projectItemDefinition(): ProjectItemDefinitionContext {
        let localContext = new ProjectItemDefinitionContext(this.context, this.state);
        this.enterRule(localContext, 450, SparkSQLParser.RULE_projectItemDefinition);
        let _la: number;
        try {
            this.state = 3117;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 357, this.context) ) {
            case 1:
                localContext = new WindowsProrjectItemContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3098;
                this.overWindowItem();
                this.state = 3103;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 353, this.context) ) {
                case 1:
                    {
                    this.state = 3100;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 212) {
                        {
                        this.state = 3099;
                        this.match(SparkSQLParser.KW_AS);
                        }
                    }

                    this.state = 3102;
                    this.identifier();
                    }
                    break;
                }
                }
                break;
            case 2:
                localContext = new ExpressionProjectItemContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3105;
                this.expression();
                this.state = 3108;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 354, this.context) ) {
                case 1:
                    {
                    this.state = 3106;
                    this.match(SparkSQLParser.KW_AS);
                    this.state = 3107;
                    this.expression();
                    }
                    break;
                }
                }
                break;
            case 3:
                localContext = new HiveStyleProjectItemContext(localContext);
                this.enterOuterAlt(localContext, 3);
                {
                {
                this.state = 3110;
                this.hiveOverWindowItem();
                this.state = 3115;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 356, this.context) ) {
                case 1:
                    {
                    this.state = 3112;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 212) {
                        {
                        this.state = 3111;
                        this.match(SparkSQLParser.KW_AS);
                        }
                    }

                    this.state = 3114;
                    this.identifier();
                    }
                    break;
                }
                }
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public hiveOverWindowItem(): HiveOverWindowItemContext {
        let localContext = new HiveOverWindowItemContext(this.context, this.state);
        this.enterRule(localContext, 452, SparkSQLParser.RULE_hiveOverWindowItem);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3119;
            this.windowFunctioPart();
            this.state = 3122;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 69 || _la === 139) {
                {
                this.state = 3120;
                _la = this.tokenStream.LA(1);
                if(!(_la === 69 || _la === 139)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 3121;
                this.match(SparkSQLParser.KW_NULLS);
                }
            }

            this.state = 3124;
            this.match(SparkSQLParser.KW_OVER);
            this.state = 3126;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 359, this.context) ) {
            case 1:
                {
                this.state = 3125;
                this.identifier();
                }
                break;
            }
            this.state = 3138;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 362, this.context) ) {
            case 1:
                {
                this.state = 3128;
                this.match(SparkSQLParser.LR_BRACKET);
                this.state = 3130;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 274 || _la === 371) {
                    {
                    this.state = 3129;
                    this.overClause();
                    }
                }

                this.state = 3132;
                this.orderByCaluse();
                this.state = 3134;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 386 || _la === 399) {
                    {
                    this.state = 3133;
                    this.windowFrameForWindowsQuery();
                    }
                }

                this.state = 3136;
                this.match(SparkSQLParser.RR_BRACKET);
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public selectStatementPlus(): SelectStatementPlusContext {
        let localContext = new SelectStatementPlusContext(this.context, this.state);
        this.enterRule(localContext, 454, SparkSQLParser.RULE_selectStatementPlus);
        try {
            this.state = 3161;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 367, this.context) ) {
            case 1:
                localContext = new SelectTvfContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                {
                this.state = 3140;
                this.selectClause();
                this.state = 3141;
                this.tvfClause();
                }
                }
                break;
            case 2:
                localContext = new SelectInlineTableContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                {
                this.state = 3143;
                this.match(SparkSQLParser.KW_SELECT);
                this.state = 3144;
                this.inlineTableClause();
                }
                }
                break;
            case 3:
                localContext = new SelectTransformContext(localContext);
                this.enterOuterAlt(localContext, 3);
                {
                {
                this.state = 3145;
                this.match(SparkSQLParser.KW_SELECT);
                this.state = 3146;
                this.transformClause();
                this.state = 3147;
                this.fromClause();
                this.state = 3149;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 363, this.context) ) {
                case 1:
                    {
                    this.state = 3148;
                    this.whereClause();
                    }
                    break;
                }
                this.state = 3152;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 364, this.context) ) {
                case 1:
                    {
                    this.state = 3151;
                    this.someByClause();
                    }
                    break;
                }
                this.state = 3155;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 365, this.context) ) {
                case 1:
                    {
                    this.state = 3154;
                    this.havingClause();
                    }
                    break;
                }
                this.state = 3158;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 366, this.context) ) {
                case 1:
                    {
                    this.state = 3157;
                    this.windowClause();
                    }
                    break;
                }
                }
                }
                break;
            case 4:
                localContext = new SelectSemicolonContext(localContext);
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 3160;
                this.match(SparkSQLParser.SEMICOLON);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public plusStatement(): PlusStatementContext {
        let localContext = new PlusStatementContext(this.context, this.state);
        this.enterRule(localContext, 456, SparkSQLParser.RULE_plusStatement);
        let _la: number;
        try {
            this.state = 3202;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 370, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3163;
                this.describeStatement();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3164;
                this.explainStatement();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 3165;
                this.useStatement();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 3166;
                this.showStatement();
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 3167;
                this.loadStatement();
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 3168;
                this.unloadStatement();
                }
                break;
            case 7:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 3169;
                this.setStatement();
                }
                break;
            case 8:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 3170;
                this.resetStatement();
                }
                break;
            case 9:
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 3171;
                this.fileStatement();
                }
                break;
            case 10:
                this.enterOuterAlt(localContext, 10);
                {
                this.state = 3172;
                this.refreshStatement();
                }
                break;
            case 11:
                this.enterOuterAlt(localContext, 11);
                {
                this.state = 3173;
                this.analyzeStatement();
                }
                break;
            case 12:
                this.enterOuterAlt(localContext, 12);
                {
                this.state = 3174;
                this.cacheStatement();
                }
                break;
            case 13:
                this.enterOuterAlt(localContext, 13);
                {
                this.state = 3175;
                this.replaceTable();
                }
                break;
            case 14:
                this.enterOuterAlt(localContext, 14);
                {
                this.state = 3176;
                this.truncateTable();
                }
                break;
            case 15:
                this.enterOuterAlt(localContext, 15);
                {
                this.state = 3177;
                this.repairTable();
                }
                break;
            case 16:
                this.enterOuterAlt(localContext, 16);
                {
                this.state = 3178;
                this.alterTable();
                }
                break;
            case 17:
                this.enterOuterAlt(localContext, 17);
                {
                this.state = 3179;
                this.alterMaterializedTable();
                }
                break;
            case 18:
                this.enterOuterAlt(localContext, 18);
                {
                this.state = 3180;
                this.dropTable();
                }
                break;
            case 19:
                this.enterOuterAlt(localContext, 19);
                {
                this.state = 3181;
                this.alterDatabase();
                }
                break;
            case 20:
                this.enterOuterAlt(localContext, 20);
                {
                this.state = 3182;
                this.dropDatabase();
                }
                break;
            case 21:
                this.enterOuterAlt(localContext, 21);
                {
                this.state = 3183;
                this.alertView();
                }
                break;
            case 22:
                this.enterOuterAlt(localContext, 22);
                {
                this.state = 3184;
                this.dropView();
                }
                break;
            case 23:
                this.enterOuterAlt(localContext, 23);
                {
                this.state = 3185;
                this.alterFunction();
                }
                break;
            case 24:
                this.enterOuterAlt(localContext, 24);
                {
                this.state = 3186;
                this.dropFunction();
                }
                break;
            case 25:
                this.enterOuterAlt(localContext, 25);
                {
                this.state = 3187;
                this.dropCatalog();
                }
                break;
            case 26:
                this.enterOuterAlt(localContext, 26);
                {
                this.state = 3188;
                this.createDatabase();
                }
                break;
            case 27:
                this.enterOuterAlt(localContext, 27);
                {
                this.state = 3189;
                this.createView();
                }
                break;
            case 28:
                this.enterOuterAlt(localContext, 28);
                {
                this.state = 3190;
                this.createFunction();
                }
                break;
            case 29:
                this.enterOuterAlt(localContext, 29);
                {
                this.state = 3191;
                this.createCatalog();
                }
                break;
            case 30:
                this.enterOuterAlt(localContext, 30);
                {
                this.state = 3192;
                this.hiveFormatCreate();
                }
                break;
            case 31:
                this.enterOuterAlt(localContext, 31);
                {
                this.state = 3193;
                this.createExternalTable();
                }
                break;
            case 32:
                this.enterOuterAlt(localContext, 32);
                {
                this.state = 3200;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 369, this.context) ) {
                case 1:
                    {
                    this.state = 3195;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 284) {
                        {
                        this.state = 3194;
                        this.match(SparkSQLParser.KW_EXECUTE);
                        }
                    }

                    this.state = 3197;
                    this.insertSparkDirectoryStatement();
                    }
                    break;
                case 2:
                    {
                    this.state = 3198;
                    this.insertHiveDirectoryStatement();
                    }
                    break;
                case 3:
                    {
                    this.state = 3199;
                    this.insertFromTable();
                    }
                    break;
                }
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public describeStatement(): DescribeStatementContext {
        let localContext = new DescribeStatementContext(this.context, this.state);
        this.enterRule(localContext, 458, SparkSQLParser.RULE_describeStatement);
        let _la: number;
        try {
            this.state = 3303;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 382, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3204;
                _la = this.tokenStream.LA(1);
                if(!(_la === 37 || _la === 269)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 3206;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 371, this.context) ) {
                case 1:
                    {
                    this.state = 3205;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 31 || _la === 422)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                    break;
                }
                this.state = 3209;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 372, this.context) ) {
                case 1:
                    {
                    this.state = 3208;
                    this.match(SparkSQLParser.KW_EXTENDED);
                    }
                    break;
                }
                this.state = 3212;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 373, this.context) ) {
                case 1:
                    {
                    this.state = 3211;
                    this.tableAlias();
                    }
                    break;
                }
                this.state = 3214;
                this.tablePath();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3215;
                _la = this.tokenStream.LA(1);
                if(!(_la === 37 || _la === 269)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 3216;
                this.match(SparkSQLParser.KW_FUNCTION);
                this.state = 3218;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 374, this.context) ) {
                case 1:
                    {
                    this.state = 3217;
                    this.match(SparkSQLParser.KW_EXTENDED);
                    }
                    break;
                }
                this.state = 3220;
                this.functionName();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 3221;
                _la = this.tokenStream.LA(1);
                if(!(_la === 37 || _la === 269)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 3222;
                this.match(SparkSQLParser.KW_QUERY);
                this.state = 3223;
                this.match(SparkSQLParser.KW_TABLE);
                this.state = 3224;
                this.tablePath();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 3225;
                _la = this.tokenStream.LA(1);
                if(!(_la === 37 || _la === 269)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 3226;
                this.match(SparkSQLParser.KW_FROM);
                this.state = 3227;
                this.tablePath();
                this.state = 3228;
                this.match(SparkSQLParser.KW_SELECT);
                this.state = 3229;
                this.columnName();
                this.state = 3234;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 480) {
                    {
                    {
                    this.state = 3230;
                    this.match(SparkSQLParser.COMMA);
                    this.state = 3231;
                    this.columnName();
                    }
                    }
                    this.state = 3236;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 3237;
                _la = this.tokenStream.LA(1);
                if(!(_la === 37 || _la === 269)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 3238;
                this.match(SparkSQLParser.KW_QUERY);
                this.state = 3251;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 377, this.context) ) {
                case 1:
                    {
                    this.state = 3239;
                    this.queryStatement(0);
                    }
                    break;
                case 2:
                    {
                    this.state = 3240;
                    this.match(SparkSQLParser.KW_FROM);
                    this.state = 3241;
                    this.tablePath();
                    {
                    this.state = 3242;
                    this.match(SparkSQLParser.KW_SELECT);
                    this.state = 3243;
                    this.columnName();
                    this.state = 3248;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    while (_la === 480) {
                        {
                        {
                        this.state = 3244;
                        this.match(SparkSQLParser.COMMA);
                        this.state = 3245;
                        this.columnName();
                        }
                        }
                        this.state = 3250;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                    }
                    }
                    }
                    break;
                }
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 3253;
                _la = this.tokenStream.LA(1);
                if(!(_la === 37 || _la === 269)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 3254;
                this.match(SparkSQLParser.KW_QUERY);
                this.state = 3255;
                this.valuesCaluse();
                this.state = 3256;
                this.match(SparkSQLParser.KW_AS);
                this.state = 3257;
                this.tablePath();
                this.state = 3258;
                this.match(SparkSQLParser.LR_BRACKET);
                this.state = 3259;
                this.columnName();
                this.state = 3264;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 480) {
                    {
                    {
                    this.state = 3260;
                    this.match(SparkSQLParser.COMMA);
                    this.state = 3261;
                    this.columnName();
                    }
                    }
                    this.state = 3266;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 3267;
                this.match(SparkSQLParser.RR_BRACKET);
                }
                break;
            case 7:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 3269;
                _la = this.tokenStream.LA(1);
                if(!(_la === 37 || _la === 269)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 3270;
                this.tablePath();
                this.state = 3271;
                this.match(SparkSQLParser.LR_BRACKET);
                this.state = 3272;
                this.columnName();
                this.state = 3277;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 480) {
                    {
                    {
                    this.state = 3273;
                    this.match(SparkSQLParser.COMMA);
                    this.state = 3274;
                    this.columnName();
                    }
                    }
                    this.state = 3279;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 3280;
                this.match(SparkSQLParser.RR_BRACKET);
                }
                break;
            case 8:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 3282;
                _la = this.tokenStream.LA(1);
                if(!(_la === 37 || _la === 269)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 3283;
                this.tablePath();
                this.state = 3284;
                this.propertyName();
                this.state = 3289;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 473) {
                    {
                    {
                    this.state = 3285;
                    this.match(SparkSQLParser.DOT);
                    this.state = 3286;
                    this.propertyName();
                    }
                    }
                    this.state = 3291;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                }
                break;
            case 9:
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 3292;
                _la = this.tokenStream.LA(1);
                if(!(_la === 37 || _la === 269)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 3293;
                this.match(SparkSQLParser.KW_TABLE);
                this.state = 3295;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 381, this.context) ) {
                case 1:
                    {
                    this.state = 3294;
                    this.match(SparkSQLParser.KW_EXTENDED);
                    }
                    break;
                }
                this.state = 3297;
                this.tablePath();
                this.state = 3298;
                this.match(SparkSQLParser.KW_PARTITION);
                this.state = 3299;
                this.match(SparkSQLParser.LR_BRACKET);
                this.state = 3300;
                this.tableProperty();
                this.state = 3301;
                this.match(SparkSQLParser.RR_BRACKET);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public explainStatement(): ExplainStatementContext {
        let localContext = new ExplainStatementContext(this.context, this.state);
        this.enterRule(localContext, 460, SparkSQLParser.RULE_explainStatement);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3305;
            this.match(SparkSQLParser.KW_EXPLAIN);
            this.state = 3307;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 383, this.context) ) {
            case 1:
                {
                this.state = 3306;
                this.match(SparkSQLParser.KW_EXTENDED);
                }
                break;
            }
            this.state = 3313;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case SparkSQLParser.KW_CHANGELOG_MODE:
            case SparkSQLParser.KW_ESTIMATED_COST:
            case SparkSQLParser.KW_JSON_EXECUTION_PLAN:
                {
                this.state = 3309;
                this.explainDetails();
                }
                break;
            case SparkSQLParser.KW_PLAN:
                {
                this.state = 3310;
                this.match(SparkSQLParser.KW_PLAN);
                this.state = 3311;
                this.match(SparkSQLParser.KW_FOR);
                }
                break;
            case SparkSQLParser.KW_EXTENDED:
                {
                this.state = 3312;
                this.match(SparkSQLParser.KW_EXTENDED);
                }
                break;
            case SparkSQLParser.KW_STATEMENT:
            case SparkSQLParser.KW_FROM:
            case SparkSQLParser.KW_INSERT:
            case SparkSQLParser.KW_SELECT:
            case SparkSQLParser.KW_VALUES:
            case SparkSQLParser.KW_WITH:
            case SparkSQLParser.LR_BRACKET:
            case SparkSQLParser.SEMICOLON:
                break;
            default:
                break;
            }
            this.state = 3319;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case SparkSQLParser.KW_FROM:
            case SparkSQLParser.KW_SELECT:
            case SparkSQLParser.KW_WITH:
            case SparkSQLParser.LR_BRACKET:
            case SparkSQLParser.SEMICOLON:
                {
                this.state = 3315;
                this.queryStatement(0);
                }
                break;
            case SparkSQLParser.KW_INSERT:
                {
                this.state = 3316;
                this.insertSimpleStatement();
                }
                break;
            case SparkSQLParser.KW_STATEMENT:
                {
                this.state = 3317;
                this.insertMulStatement();
                }
                break;
            case SparkSQLParser.KW_VALUES:
                {
                this.state = 3318;
                this.valuesDefinition();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public explainDetails(): ExplainDetailsContext {
        let localContext = new ExplainDetailsContext(this.context, this.state);
        this.enterRule(localContext, 462, SparkSQLParser.RULE_explainDetails);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3321;
            this.explainDetail();
            this.state = 3326;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 480) {
                {
                {
                this.state = 3322;
                this.match(SparkSQLParser.COMMA);
                this.state = 3323;
                this.explainDetail();
                }
                }
                this.state = 3328;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public explainDetail(): ExplainDetailContext {
        let localContext = new ExplainDetailContext(this.context, this.state);
        this.enterRule(localContext, 464, SparkSQLParser.RULE_explainDetail);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3329;
            _la = this.tokenStream.LA(1);
            if(!(_la === 21 || _la === 45 || _la === 78)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public useStatement(): UseStatementContext {
        let localContext = new UseStatementContext(this.context, this.state);
        this.enterRule(localContext, 466, SparkSQLParser.RULE_useStatement);
        try {
            this.state = 3337;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 387, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3331;
                this.match(SparkSQLParser.KW_USE);
                this.state = 3332;
                this.match(SparkSQLParser.KW_CATALOG);
                this.state = 3333;
                this.catalogPath();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3334;
                this.match(SparkSQLParser.KW_USE);
                this.state = 3335;
                this.databasePath();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 3336;
                this.useModuleStatement();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public useModuleStatement(): UseModuleStatementContext {
        let localContext = new UseModuleStatementContext(this.context, this.state);
        this.enterRule(localContext, 468, SparkSQLParser.RULE_useModuleStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3339;
            this.match(SparkSQLParser.KW_USE);
            this.state = 3340;
            this.match(SparkSQLParser.KW_MODULES);
            this.state = 3341;
            this.uid();
            this.state = 3346;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 480) {
                {
                {
                this.state = 3342;
                this.match(SparkSQLParser.COMMA);
                this.state = 3343;
                this.uid();
                }
                }
                this.state = 3348;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public showStatement(): ShowStatementContext {
        let localContext = new ShowStatementContext(this.context, this.state);
        this.enterRule(localContext, 470, SparkSQLParser.RULE_showStatement);
        let _la: number;
        try {
            this.state = 3436;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 403, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3349;
                this.match(SparkSQLParser.KW_SHOW);
                this.state = 3350;
                _la = this.tokenStream.LA(1);
                if(!(_la === 17 || _la === 75 || _la === 147 || _la === 148)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3351;
                this.match(SparkSQLParser.KW_SHOW);
                this.state = 3352;
                this.match(SparkSQLParser.KW_CURRENT);
                this.state = 3353;
                _la = this.tokenStream.LA(1);
                if(!(_la === 16 || _la === 31)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 3354;
                this.match(SparkSQLParser.KW_SHOW);
                this.state = 3355;
                _la = this.tokenStream.LA(1);
                if(!(_la === 171 || _la === 194)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 3361;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 296 || _la === 309) {
                    {
                    this.state = 3356;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 296 || _la === 309)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 3359;
                    this.errorHandler.sync(this);
                    switch (this.tokenStream.LA(1)) {
                    case SparkSQLParser.KW_DEFAULT:
                        {
                        this.state = 3357;
                        this.match(SparkSQLParser.KW_DEFAULT);
                        }
                        break;
                    case SparkSQLParser.KW_ADD:
                    case SparkSQLParser.KW_ADMIN:
                    case SparkSQLParser.KW_AFTER:
                    case SparkSQLParser.KW_ANALYZE:
                    case SparkSQLParser.KW_ASC:
                    case SparkSQLParser.KW_BEFORE:
                    case SparkSQLParser.KW_BYTES:
                    case SparkSQLParser.KW_CASCADE:
                    case SparkSQLParser.KW_CATALOG:
                    case SparkSQLParser.KW_CATALOGS:
                    case SparkSQLParser.KW_CENTURY:
                    case SparkSQLParser.KW_CHAIN:
                    case SparkSQLParser.KW_CHANGELOG_MODE:
                    case SparkSQLParser.KW_CHARACTERS:
                    case SparkSQLParser.KW_COMMENT:
                    case SparkSQLParser.KW_COMPACT:
                    case SparkSQLParser.KW_COLUMNS:
                    case SparkSQLParser.KW_CONSTRAINTS:
                    case SparkSQLParser.KW_CONSTRUCTOR:
                    case SparkSQLParser.KW_COMPUTE:
                    case SparkSQLParser.KW_CUMULATE:
                    case SparkSQLParser.KW_DATA:
                    case SparkSQLParser.KW_DATABASE:
                    case SparkSQLParser.KW_DATABASES:
                    case SparkSQLParser.KW_DAYS:
                    case SparkSQLParser.KW_DECADE:
                    case SparkSQLParser.KW_DEFINED:
                    case SparkSQLParser.KW_DESC:
                    case SparkSQLParser.KW_DESCRIPTOR:
                    case SparkSQLParser.KW_DIV:
                    case SparkSQLParser.KW_ENCODING:
                    case SparkSQLParser.KW_ENFORCED:
                    case SparkSQLParser.KW_ENGINE:
                    case SparkSQLParser.KW_ERROR:
                    case SparkSQLParser.KW_ESTIMATED_COST:
                    case SparkSQLParser.KW_EXCEPTION:
                    case SparkSQLParser.KW_EXCLUDE:
                    case SparkSQLParser.KW_EXCLUDING:
                    case SparkSQLParser.KW_EXTENDED:
                    case SparkSQLParser.KW_FILE:
                    case SparkSQLParser.KW_FINAL:
                    case SparkSQLParser.KW_FIRST:
                    case SparkSQLParser.KW_FOLLOWING:
                    case SparkSQLParser.KW_FORMAT:
                    case SparkSQLParser.KW_FORTRAN:
                    case SparkSQLParser.KW_FOUND:
                    case SparkSQLParser.KW_FRAC_SECOND:
                    case SparkSQLParser.KW_FUNCTIONS:
                    case SparkSQLParser.KW_GENERAL:
                    case SparkSQLParser.KW_GENERATED:
                    case SparkSQLParser.KW_GO:
                    case SparkSQLParser.KW_GOTO:
                    case SparkSQLParser.KW_GRANTED:
                    case SparkSQLParser.KW_HOP:
                    case SparkSQLParser.KW_HOURS:
                    case SparkSQLParser.KW_IF:
                    case SparkSQLParser.KW_IGNORE:
                    case SparkSQLParser.KW_INCREMENT:
                    case SparkSQLParser.KW_INPUT:
                    case SparkSQLParser.KW_INVOKER:
                    case SparkSQLParser.KW_JAR:
                    case SparkSQLParser.KW_JARS:
                    case SparkSQLParser.KW_JAVA:
                    case SparkSQLParser.KW_JSON:
                    case SparkSQLParser.KW_JSON_EXECUTION_PLAN:
                    case SparkSQLParser.KW_KEY:
                    case SparkSQLParser.KW_KEY_MEMBER:
                    case SparkSQLParser.KW_KEY_TYPE:
                    case SparkSQLParser.KW_LABEL:
                    case SparkSQLParser.KW_LAST:
                    case SparkSQLParser.KW_LENGTH:
                    case SparkSQLParser.KW_LEVEL:
                    case SparkSQLParser.KW_LOAD:
                    case SparkSQLParser.KW_MAP:
                    case SparkSQLParser.KW_MICROSECOND:
                    case SparkSQLParser.KW_MILLENNIUM:
                    case SparkSQLParser.KW_MILLISECOND:
                    case SparkSQLParser.KW_MINUTES:
                    case SparkSQLParser.KW_MINVALUE:
                    case SparkSQLParser.KW_MODIFY:
                    case SparkSQLParser.KW_MODULES:
                    case SparkSQLParser.KW_MONTHS:
                    case SparkSQLParser.KW_NANOSECOND:
                    case SparkSQLParser.KW_NULLS:
                    case SparkSQLParser.KW_NUMBER:
                    case SparkSQLParser.KW_OPTION:
                    case SparkSQLParser.KW_OPTIONS:
                    case SparkSQLParser.KW_ORDERING:
                    case SparkSQLParser.KW_OUTPUT:
                    case SparkSQLParser.KW_OVERWRITE:
                    case SparkSQLParser.KW_OVERWRITING:
                    case SparkSQLParser.KW_PARTITIONED:
                    case SparkSQLParser.KW_PARTITIONS:
                    case SparkSQLParser.KW_PASSING:
                    case SparkSQLParser.KW_PAST:
                    case SparkSQLParser.KW_PATH:
                    case SparkSQLParser.KW_PLACING:
                    case SparkSQLParser.KW_PLAN:
                    case SparkSQLParser.KW_PRECEDING:
                    case SparkSQLParser.KW_PRESERVE:
                    case SparkSQLParser.KW_PRIOR:
                    case SparkSQLParser.KW_PRIVILEGES:
                    case SparkSQLParser.KW_PUBLIC:
                    case SparkSQLParser.KW_PYTHON:
                    case SparkSQLParser.KW_PYTHON_FILES:
                    case SparkSQLParser.KW_PYTHON_REQUIREMENTS:
                    case SparkSQLParser.KW_PYTHON_DEPENDENCIES:
                    case SparkSQLParser.KW_PYTHON_JAR:
                    case SparkSQLParser.KW_PYTHON_ARCHIVES:
                    case SparkSQLParser.KW_PYTHON_PARAMETER:
                    case SparkSQLParser.KW_QUARTER:
                    case SparkSQLParser.KW_RAW:
                    case SparkSQLParser.KW_READ:
                    case SparkSQLParser.KW_RELATIVE:
                    case SparkSQLParser.KW_REMOVE:
                    case SparkSQLParser.KW_RENAME:
                    case SparkSQLParser.KW_REPLACE:
                    case SparkSQLParser.KW_RESPECT:
                    case SparkSQLParser.KW_RESTART:
                    case SparkSQLParser.KW_RESTRICT:
                    case SparkSQLParser.KW_ROLE:
                    case SparkSQLParser.KW_ROW_COUNT:
                    case SparkSQLParser.KW_SCALA:
                    case SparkSQLParser.KW_SCALAR:
                    case SparkSQLParser.KW_SCALE:
                    case SparkSQLParser.KW_SCHEMA:
                    case SparkSQLParser.KW_SECONDS:
                    case SparkSQLParser.KW_SECTION:
                    case SparkSQLParser.KW_SECURITY:
                    case SparkSQLParser.KW_SELF:
                    case SparkSQLParser.KW_SERVER:
                    case SparkSQLParser.KW_SERVER_NAME:
                    case SparkSQLParser.KW_SESSION:
                    case SparkSQLParser.KW_SETS:
                    case SparkSQLParser.KW_SIMPLE:
                    case SparkSQLParser.KW_SIZE:
                    case SparkSQLParser.KW_SLIDE:
                    case SparkSQLParser.KW_SOURCE:
                    case SparkSQLParser.KW_SPACE:
                    case SparkSQLParser.KW_STATE:
                    case SparkSQLParser.KW_STATEMENT:
                    case SparkSQLParser.KW_STEP:
                    case SparkSQLParser.KW_STRING:
                    case SparkSQLParser.KW_STRUCTURE:
                    case SparkSQLParser.KW_STYLE:
                    case SparkSQLParser.KW_TABLES:
                    case SparkSQLParser.KW_TEMPORARY:
                    case SparkSQLParser.KW_TIMECOL:
                    case SparkSQLParser.KW_FLOOR:
                    case SparkSQLParser.KW_TIMESTAMP_LTZ:
                    case SparkSQLParser.KW_TIMESTAMPADD:
                    case SparkSQLParser.KW_TIMESTAMPDIFF:
                    case SparkSQLParser.KW_TOTIMESTAMP:
                    case SparkSQLParser.KW_TRANSFORM:
                    case SparkSQLParser.KW_TUMBLE:
                    case SparkSQLParser.KW_TYPE:
                    case SparkSQLParser.KW_UNDER:
                    case SparkSQLParser.KW_UNLOAD:
                    case SparkSQLParser.KW_USAGE:
                    case SparkSQLParser.KW_USE:
                    case SparkSQLParser.KW_UTF16:
                    case SparkSQLParser.KW_UTF32:
                    case SparkSQLParser.KW_UTF8:
                    case SparkSQLParser.KW_VERSION:
                    case SparkSQLParser.KW_VIEW:
                    case SparkSQLParser.KW_VIEWS:
                    case SparkSQLParser.KW_VIRTUAL:
                    case SparkSQLParser.KW_WATERMARK:
                    case SparkSQLParser.KW_WATERMARKS:
                    case SparkSQLParser.KW_WEEK:
                    case SparkSQLParser.KW_WORK:
                    case SparkSQLParser.KW_WRAPPER:
                    case SparkSQLParser.KW_YEARS:
                    case SparkSQLParser.KW_ZONE:
                    case SparkSQLParser.KW_LOCALTIMESTAMP:
                    case SparkSQLParser.DOLLAR:
                    case SparkSQLParser.STRING_LITERAL:
                    case SparkSQLParser.DIG_LITERAL:
                    case SparkSQLParser.ID_LITERAL:
                        {
                        this.state = 3358;
                        this.tablePath();
                        }
                        break;
                    default:
                        throw new antlr.NoViableAltException(this);
                    }
                    }
                }

                this.state = 3364;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 334 || _la === 354 || _la === 390 || _la === 395) {
                    {
                    this.state = 3363;
                    this.likePredicate();
                    }
                }

                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 3366;
                this.match(SparkSQLParser.KW_SHOW);
                this.state = 3367;
                this.match(SparkSQLParser.KW_COLUMNS);
                this.state = 3368;
                _la = this.tokenStream.LA(1);
                if(!(_la === 296 || _la === 309)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 3369;
                this.uid();
                this.state = 3372;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 296 || _la === 309) {
                    {
                    this.state = 3370;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 296 || _la === 309)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 3371;
                    this.uid();
                    }
                }

                this.state = 3375;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 334 || _la === 354 || _la === 390 || _la === 395) {
                    {
                    this.state = 3374;
                    this.likePredicate();
                    }
                }

                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 3377;
                this.match(SparkSQLParser.KW_SHOW);
                this.state = 3378;
                this.match(SparkSQLParser.KW_CREATE);
                this.state = 3379;
                this.match(SparkSQLParser.KW_VIEW);
                this.state = 3380;
                this.uid();
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 3381;
                this.match(SparkSQLParser.KW_SHOW);
                this.state = 3383;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 419 || _la === 444) {
                    {
                    this.state = 3382;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 419 || _la === 444)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                }

                this.state = 3385;
                this.match(SparkSQLParser.KW_FUNCTIONS);
                this.state = 3387;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 4294684608) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & 4293654523) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & 4185849791) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & 4294967263) !== 0) || ((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & 3757047707) !== 0) || ((((_la - 160)) & ~0x1F) === 0 && ((1 << (_la - 160)) & 4252958679) !== 0) || ((((_la - 192)) & ~0x1F) === 0 && ((1 << (_la - 192)) & 3967) !== 0) || _la === 296 || _la === 334 || _la === 338 || ((((_la - 483)) & ~0x1F) === 0 && ((1 << (_la - 483)) & 360449) !== 0)) {
                    {
                    this.state = 3386;
                    this.showFunctionStatementBody();
                    }
                }

                }
                break;
            case 7:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 3389;
                this.match(SparkSQLParser.KW_SHOW);
                this.state = 3391;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 298) {
                    {
                    this.state = 3390;
                    this.match(SparkSQLParser.KW_FULL);
                    }
                }

                this.state = 3393;
                this.match(SparkSQLParser.KW_MODULES);
                }
                break;
            case 8:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 3394;
                this.match(SparkSQLParser.KW_SHOW);
                this.state = 3395;
                this.match(SparkSQLParser.KW_DATABASES);
                this.state = 3397;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 334) {
                    {
                    this.state = 3396;
                    this.likeDefinition();
                    }
                }

                }
                break;
            case 9:
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 3399;
                this.match(SparkSQLParser.KW_SHOW);
                this.state = 3400;
                this.match(SparkSQLParser.KW_TBLPROPERTIES);
                this.state = 3401;
                this.tablePath();
                this.state = 3416;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 476) {
                    {
                    this.state = 3402;
                    this.match(SparkSQLParser.LR_BRACKET);
                    this.state = 3412;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 399, this.context) ) {
                    case 1:
                        {
                        this.state = 3403;
                        this.tablePath();
                        }
                        break;
                    case 2:
                        {
                        {
                        this.state = 3404;
                        this.constant();
                        this.state = 3409;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                        while (_la === 473) {
                            {
                            {
                            this.state = 3405;
                            this.match(SparkSQLParser.DOT);
                            this.state = 3406;
                            this.constant();
                            }
                            }
                            this.state = 3411;
                            this.errorHandler.sync(this);
                            _la = this.tokenStream.LA(1);
                        }
                        }
                        }
                        break;
                    }
                    this.state = 3414;
                    this.match(SparkSQLParser.RR_BRACKET);
                    }
                }

                }
                break;
            case 10:
                this.enterOuterAlt(localContext, 10);
                {
                this.state = 3418;
                this.match(SparkSQLParser.KW_SHOW);
                this.state = 3419;
                this.match(SparkSQLParser.KW_PARTITIONS);
                this.state = 3420;
                this.tablePath();
                this.state = 3423;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 371) {
                    {
                    this.state = 3421;
                    this.match(SparkSQLParser.KW_PARTITION);
                    this.state = 3422;
                    this.tablePropertyList();
                    }
                }

                }
                break;
            case 11:
                this.enterOuterAlt(localContext, 11);
                {
                this.state = 3425;
                this.match(SparkSQLParser.KW_SHOW);
                this.state = 3426;
                this.match(SparkSQLParser.KW_CREATE);
                this.state = 3427;
                this.match(SparkSQLParser.KW_TABLE);
                this.state = 3428;
                this.tableExpression(0);
                this.state = 3431;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 212) {
                    {
                    this.state = 3429;
                    this.match(SparkSQLParser.KW_AS);
                    this.state = 3430;
                    this.match(SparkSQLParser.KW_SERDE);
                    }
                }

                }
                break;
            case 12:
                this.enterOuterAlt(localContext, 12);
                {
                this.state = 3433;
                this.match(SparkSQLParser.KW_SHOW);
                this.state = 3434;
                this.match(SparkSQLParser.KW_TABLE);
                this.state = 3435;
                this.showTableStatementBody();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public loadStatement(): LoadStatementContext {
        let localContext = new LoadStatementContext(this.context, this.state);
        this.enterRule(localContext, 472, SparkSQLParser.RULE_loadStatement);
        let _la: number;
        try {
            this.state = 3458;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 406, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3438;
                this.match(SparkSQLParser.KW_LOAD);
                this.state = 3439;
                this.match(SparkSQLParser.KW_MODULE);
                this.state = 3440;
                this.uid();
                this.state = 3443;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 453) {
                    {
                    this.state = 3441;
                    this.match(SparkSQLParser.KW_WITH);
                    this.state = 3442;
                    this.tablePropertyList();
                    }
                }

                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3445;
                this.match(SparkSQLParser.KW_LOAD);
                this.state = 3446;
                this.match(SparkSQLParser.KW_DATA);
                this.state = 3447;
                this.match(SparkSQLParser.KW_LOCAL);
                this.state = 3448;
                this.match(SparkSQLParser.KW_INPATH);
                this.state = 3449;
                this.jarFileName();
                this.state = 3450;
                this.match(SparkSQLParser.KW_OVERWRITE);
                this.state = 3451;
                this.match(SparkSQLParser.KW_INTO);
                this.state = 3452;
                this.match(SparkSQLParser.KW_TABLE);
                this.state = 3453;
                this.tablePath();
                this.state = 3456;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 371) {
                    {
                    this.state = 3454;
                    this.match(SparkSQLParser.KW_PARTITION);
                    this.state = 3455;
                    this.tablePropertyList();
                    }
                }

                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public unloadStatement(): UnloadStatementContext {
        let localContext = new UnloadStatementContext(this.context, this.state);
        this.enterRule(localContext, 474, SparkSQLParser.RULE_unloadStatement);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3460;
            this.match(SparkSQLParser.KW_UNLOAD);
            this.state = 3461;
            this.match(SparkSQLParser.KW_MODULE);
            this.state = 3462;
            this.uid();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public setStatement(): SetStatementContext {
        let localContext = new SetStatementContext(this.context, this.state);
        this.enterRule(localContext, 476, SparkSQLParser.RULE_setStatement);
        let _la: number;
        try {
            this.state = 3473;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 409, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3464;
                this.match(SparkSQLParser.KW_SET);
                this.state = 3466;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 4294684608) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & 4293918715) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & 4185849791) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & 4294967263) !== 0) || ((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & 3757047707) !== 0) || ((((_la - 160)) & ~0x1F) === 0 && ((1 << (_la - 160)) & 4252958679) !== 0) || ((((_la - 192)) & ~0x1F) === 0 && ((1 << (_la - 192)) & 2156412927) !== 0) || ((((_la - 230)) & ~0x1F) === 0 && ((1 << (_la - 230)) & 2685932551) !== 0) || ((((_la - 271)) & ~0x1F) === 0 && ((1 << (_la - 271)) & 70336513) !== 0) || ((((_la - 303)) & ~0x1F) === 0 && ((1 << (_la - 303)) & 2030075921) !== 0) || ((((_la - 338)) & ~0x1F) === 0 && ((1 << (_la - 338)) & 2148205697) !== 0) || ((((_la - 375)) & ~0x1F) === 0 && ((1 << (_la - 375)) & 42494055) !== 0) || ((((_la - 414)) & ~0x1F) === 0 && ((1 << (_la - 414)) & 276029453) !== 0) || ((((_la - 456)) & ~0x1F) === 0 && ((1 << (_la - 456)) & 135266817) !== 0) || ((((_la - 488)) & ~0x1F) === 0 && ((1 << (_la - 488)) & 15373) !== 0)) {
                    {
                    this.state = 3465;
                    this.tableProperty();
                    }
                }

                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3468;
                this.match(SparkSQLParser.KW_SET);
                this.state = 3470;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 408, this.context) ) {
                case 1:
                    {
                    this.state = 3469;
                    this.match(SparkSQLParser.HYPNEN_SIGN);
                    }
                    break;
                }
                {
                this.state = 3472;
                this.tablePropertyKey();
                }
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public resetStatement(): ResetStatementContext {
        let localContext = new ResetStatementContext(this.context, this.state);
        this.enterRule(localContext, 478, SparkSQLParser.RULE_resetStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3475;
            this.match(SparkSQLParser.KW_RESET);
            this.state = 3477;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 4294684608) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & 4293918715) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & 4185849791) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & 4294967263) !== 0) || ((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & 3757047707) !== 0) || ((((_la - 160)) & ~0x1F) === 0 && ((1 << (_la - 160)) & 4252958679) !== 0) || ((((_la - 192)) & ~0x1F) === 0 && ((1 << (_la - 192)) & 2156412927) !== 0) || ((((_la - 230)) & ~0x1F) === 0 && ((1 << (_la - 230)) & 2685932551) !== 0) || ((((_la - 271)) & ~0x1F) === 0 && ((1 << (_la - 271)) & 70336513) !== 0) || ((((_la - 303)) & ~0x1F) === 0 && ((1 << (_la - 303)) & 2030075921) !== 0) || ((((_la - 338)) & ~0x1F) === 0 && ((1 << (_la - 338)) & 2148205697) !== 0) || ((((_la - 375)) & ~0x1F) === 0 && ((1 << (_la - 375)) & 42494055) !== 0) || ((((_la - 414)) & ~0x1F) === 0 && ((1 << (_la - 414)) & 276029453) !== 0) || ((((_la - 456)) & ~0x1F) === 0 && ((1 << (_la - 456)) & 135266817) !== 0) || ((((_la - 488)) & ~0x1F) === 0 && ((1 << (_la - 488)) & 15373) !== 0)) {
                {
                this.state = 3476;
                this.tablePropertyKey();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public fileStatement(): FileStatementContext {
        let localContext = new FileStatementContext(this.context, this.state);
        this.enterRule(localContext, 480, SparkSQLParser.RULE_fileStatement);
        let _la: number;
        try {
            this.state = 3508;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 414, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3479;
                _la = this.tokenStream.LA(1);
                if(!(_la === 6 || _la === 136)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 3480;
                this.match(SparkSQLParser.KW_JAR);
                this.state = 3481;
                this.jarFileName();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3482;
                _la = this.tokenStream.LA(1);
                if(!(_la === 6 || _la === 136)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 3483;
                this.match(SparkSQLParser.KW_FILE);
                this.state = 3484;
                this.filePath();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 3485;
                this.match(SparkSQLParser.KW_LIST);
                this.state = 3486;
                this.match(SparkSQLParser.KW_JAR);
                this.state = 3490;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 495 || _la === 498) {
                    {
                    {
                    this.state = 3487;
                    this.jarFileName();
                    }
                    }
                    this.state = 3492;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 3493;
                this.match(SparkSQLParser.KW_ADD);
                this.state = 3494;
                _la = this.tokenStream.LA(1);
                if(!(_la === 52 || _la === 75)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 3496;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                do {
                    {
                    {
                    this.state = 3495;
                    this.filePath();
                    }
                    }
                    this.state = 3498;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                } while (_la === 495 || _la === 498);
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 3500;
                this.match(SparkSQLParser.KW_LIST);
                this.state = 3501;
                this.match(SparkSQLParser.KW_FILE);
                this.state = 3505;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 495 || _la === 498) {
                    {
                    {
                    this.state = 3502;
                    this.filePath();
                    }
                    }
                    this.state = 3507;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public refreshStatement(): RefreshStatementContext {
        let localContext = new RefreshStatementContext(this.context, this.state);
        this.enterRule(localContext, 482, SparkSQLParser.RULE_refreshStatement);
        let _la: number;
        try {
            this.state = 3520;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 416, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3510;
                this.match(SparkSQLParser.KW_REFRESH);
                this.state = 3511;
                _la = this.tokenStream.LA(1);
                if(!(_la === 299 || _la === 422)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 3512;
                this.uid();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3513;
                this.match(SparkSQLParser.KW_REFRESH);
                this.state = 3517;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 495 || _la === 498) {
                    {
                    {
                    this.state = 3514;
                    this.jarFileName();
                    }
                    }
                    this.state = 3519;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public analyzeStatement(): AnalyzeStatementContext {
        let localContext = new AnalyzeStatementContext(this.context, this.state);
        this.enterRule(localContext, 484, SparkSQLParser.RULE_analyzeStatement);
        let _la: number;
        try {
            this.state = 3554;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 422, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3522;
                this.match(SparkSQLParser.KW_ANALYZE);
                this.state = 3523;
                this.match(SparkSQLParser.KW_TABLE);
                this.state = 3525;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 417, this.context) ) {
                case 1:
                    {
                    this.state = 3524;
                    this.tablePath();
                    }
                    break;
                }
                this.state = 3528;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 371) {
                    {
                    this.state = 3527;
                    this.analyzePartitionDefinition();
                    }
                }

                this.state = 3530;
                this.match(SparkSQLParser.KW_COMPUTE);
                this.state = 3531;
                this.match(SparkSQLParser.KW_STATISTICS);
                this.state = 3545;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 420, this.context) ) {
                case 1:
                    {
                    this.state = 3532;
                    this.match(SparkSQLParser.KW_FOR);
                    this.state = 3533;
                    this.match(SparkSQLParser.KW_COLUMNS);
                    this.state = 3534;
                    this.columnName();
                    this.state = 3539;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    while (_la === 480) {
                        {
                        {
                        this.state = 3535;
                        this.match(SparkSQLParser.COMMA);
                        this.state = 3536;
                        this.columnName();
                        }
                        }
                        this.state = 3541;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                    }
                    }
                    break;
                case 2:
                    {
                    this.state = 3542;
                    this.match(SparkSQLParser.KW_FOR);
                    this.state = 3543;
                    this.match(SparkSQLParser.KW_ALL);
                    this.state = 3544;
                    this.match(SparkSQLParser.KW_COLUMNS);
                    }
                    break;
                }
                this.state = 3548;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 101) {
                    {
                    this.state = 3547;
                    this.match(SparkSQLParser.KW_NOSCAN);
                    }
                }

                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3550;
                this.match(SparkSQLParser.KW_ANALYZE);
                this.state = 3551;
                this.match(SparkSQLParser.KW_TABLES);
                this.state = 3552;
                this.match(SparkSQLParser.KW_COMPUTE);
                this.state = 3553;
                this.match(SparkSQLParser.KW_STATISTICS);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public analyzePartitionDefinition(): AnalyzePartitionDefinitionContext {
        let localContext = new AnalyzePartitionDefinitionContext(this.context, this.state);
        this.enterRule(localContext, 486, SparkSQLParser.RULE_analyzePartitionDefinition);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3556;
            this.match(SparkSQLParser.KW_PARTITION);
            this.state = 3557;
            this.tableCanHasKeyPropertyList();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createCatalog(): CreateCatalogContext {
        let localContext = new CreateCatalogContext(this.context, this.state);
        this.enterRule(localContext, 488, SparkSQLParser.RULE_createCatalog);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3559;
            this.match(SparkSQLParser.KW_CREATE);
            this.state = 3560;
            this.match(SparkSQLParser.KW_CATALOG);
            this.state = 3561;
            this.uid();
            this.state = 3562;
            this.withOption();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createDatabase(): CreateDatabaseContext {
        let localContext = new CreateDatabaseContext(this.context, this.state);
        this.enterRule(localContext, 490, SparkSQLParser.RULE_createDatabase);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3564;
            this.match(SparkSQLParser.KW_CREATE);
            this.state = 3565;
            this.match(SparkSQLParser.KW_DATABASE);
            this.state = 3567;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 423, this.context) ) {
            case 1:
                {
                this.state = 3566;
                this.ifNotExists();
                }
                break;
            }
            this.state = 3569;
            this.databasePathCreate();
            this.state = 3571;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 23) {
                {
                this.state = 3570;
                this.commentSpec();
                }
            }

            this.state = 3575;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 89) {
                {
                this.state = 3573;
                this.match(SparkSQLParser.KW_LOCATION);
                this.state = 3574;
                this.match(SparkSQLParser.STRING_LITERAL);
                }
            }

            this.state = 3578;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 453) {
                {
                this.state = 3577;
                this.withOption();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createView(): CreateViewContext {
        let localContext = new CreateViewContext(this.context, this.state);
        this.enterRule(localContext, 492, SparkSQLParser.RULE_createView);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3580;
            this.match(SparkSQLParser.KW_CREATE);
            this.state = 3583;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 363) {
                {
                this.state = 3581;
                this.match(SparkSQLParser.KW_OR);
                this.state = 3582;
                this.match(SparkSQLParser.KW_REPLACE);
                }
            }

            this.state = 3589;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 172 || _la === 300) {
                {
                this.state = 3586;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 300) {
                    {
                    this.state = 3585;
                    this.match(SparkSQLParser.KW_GLOBAL);
                    }
                }

                this.state = 3588;
                this.match(SparkSQLParser.KW_TEMPORARY);
                }
            }

            this.state = 3591;
            this.match(SparkSQLParser.KW_VIEW);
            this.state = 3593;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 430, this.context) ) {
            case 1:
                {
                this.state = 3592;
                this.ifNotExists();
                }
                break;
            }
            this.state = 3595;
            this.uid();
            this.state = 3597;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 476) {
                {
                this.state = 3596;
                this.columnNameList();
                }
            }

            this.state = 3600;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 23) {
                {
                this.state = 3599;
                this.commentSpec();
                }
            }

            this.state = 3602;
            this.match(SparkSQLParser.KW_AS);
            this.state = 3603;
            this.queryStatement(0);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createFunction(): CreateFunctionContext {
        let localContext = new CreateFunctionContext(this.context, this.state);
        this.enterRule(localContext, 494, SparkSQLParser.RULE_createFunction);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3605;
            this.match(SparkSQLParser.KW_CREATE);
            this.state = 3608;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 363) {
                {
                this.state = 3606;
                this.match(SparkSQLParser.KW_OR);
                this.state = 3607;
                this.match(SparkSQLParser.KW_REPLACE);
                }
            }

            this.state = 3613;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 434, this.context) ) {
            case 1:
                {
                this.state = 3610;
                this.match(SparkSQLParser.KW_TEMPORARY);
                }
                break;
            case 2:
                {
                this.state = 3611;
                this.match(SparkSQLParser.KW_TEMPORARY);
                this.state = 3612;
                this.match(SparkSQLParser.KW_SYSTEM);
                }
                break;
            }
            this.state = 3615;
            this.match(SparkSQLParser.KW_FUNCTION);
            this.state = 3617;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 435, this.context) ) {
            case 1:
                {
                this.state = 3616;
                this.ifNotExists();
                }
                break;
            }
            this.state = 3619;
            this.functionName();
            this.state = 3620;
            this.match(SparkSQLParser.KW_AS);
            this.state = 3621;
            this.identifier();
            this.state = 3630;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 437, this.context) ) {
            case 1:
                {
                {
                this.state = 3624;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 328) {
                    {
                    this.state = 3622;
                    this.match(SparkSQLParser.KW_LANGUAGE);
                    this.state = 3623;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 76 || _la === 122 || _la === 144)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                }

                this.state = 3626;
                this.usingClause();
                }
                }
                break;
            case 2:
                {
                this.state = 3627;
                this.match(SparkSQLParser.KW_USING);
                this.state = 3628;
                this.match(SparkSQLParser.KW_JAR);
                this.state = 3629;
                this.jarFileName();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public replaceTable(): ReplaceTableContext {
        let localContext = new ReplaceTableContext(this.context, this.state);
        this.enterRule(localContext, 496, SparkSQLParser.RULE_replaceTable);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3632;
            this.match(SparkSQLParser.KW_REPLACE);
            this.state = 3633;
            this.match(SparkSQLParser.KW_TABLE);
            this.state = 3634;
            this.tablePathCreate();
            this.state = 3635;
            this.withOption();
            this.state = 3638;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 212) {
                {
                this.state = 3636;
                this.match(SparkSQLParser.KW_AS);
                this.state = 3637;
                this.queryStatement(0);
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public cacheStatement(): CacheStatementContext {
        let localContext = new CacheStatementContext(this.context, this.state);
        this.enterRule(localContext, 498, SparkSQLParser.RULE_cacheStatement);
        let _la: number;
        try {
            this.state = 3660;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case SparkSQLParser.KW_CACHE:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3640;
                this.match(SparkSQLParser.KW_CACHE);
                this.state = 3641;
                this.match(SparkSQLParser.KW_TABLE);
                this.state = 3642;
                this.uid();
                this.state = 3643;
                this.match(SparkSQLParser.KW_OPTIONS);
                this.state = 3644;
                this.match(SparkSQLParser.LR_BRACKET);
                this.state = 3645;
                this.uid();
                this.state = 3649;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while ((((_la) & ~0x1F) === 0 && ((1 << _la) & 4294684608) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & 4293654523) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & 4185849791) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & 4294967263) !== 0) || ((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & 3757047707) !== 0) || ((((_la - 160)) & ~0x1F) === 0 && ((1 << (_la - 160)) & 4252958679) !== 0) || ((((_la - 192)) & ~0x1F) === 0 && ((1 << (_la - 192)) & 3967) !== 0) || _la === 338 || ((((_la - 483)) & ~0x1F) === 0 && ((1 << (_la - 483)) & 360449) !== 0)) {
                    {
                    {
                    this.state = 3646;
                    this.uid();
                    }
                    }
                    this.state = 3651;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 3652;
                this.match(SparkSQLParser.RR_BRACKET);
                this.state = 3653;
                this.queryStatement(0);
                }
                break;
            case SparkSQLParser.KW_CLEAR:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3655;
                this.match(SparkSQLParser.KW_CLEAR);
                this.state = 3656;
                this.match(SparkSQLParser.KW_CACHE);
                }
                break;
            case SparkSQLParser.KW_UNCACHE:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 3657;
                this.match(SparkSQLParser.KW_UNCACHE);
                this.state = 3658;
                this.match(SparkSQLParser.KW_TABLE);
                this.state = 3659;
                this.tablePath();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterMaterializedTable(): AlterMaterializedTableContext {
        let localContext = new AlterMaterializedTableContext(this.context, this.state);
        this.enterRule(localContext, 500, SparkSQLParser.RULE_alterMaterializedTable);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3662;
            this.match(SparkSQLParser.KW_ALTER);
            this.state = 3663;
            this.match(SparkSQLParser.KW_MATERIALIZED);
            this.state = 3664;
            this.match(SparkSQLParser.KW_TABLE);
            this.state = 3665;
            this.tablePath();
            this.state = 3679;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case SparkSQLParser.KW_SUSPEND:
                {
                this.state = 3666;
                this.match(SparkSQLParser.KW_SUSPEND);
                }
                break;
            case SparkSQLParser.KW_RESUME:
                {
                this.state = 3667;
                this.match(SparkSQLParser.KW_RESUME);
                this.state = 3669;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 453) {
                    {
                    this.state = 3668;
                    this.withOption();
                    }
                }

                }
                break;
            case SparkSQLParser.KW_REFRESH:
                {
                this.state = 3671;
                this.match(SparkSQLParser.KW_REFRESH);
                this.state = 3672;
                this.match(SparkSQLParser.KW_PARTITION);
                this.state = 3673;
                this.match(SparkSQLParser.LR_BRACKET);
                this.state = 3674;
                this.identifier();
                this.state = 3675;
                this.match(SparkSQLParser.EQUAL_SYMBOL);
                this.state = 3676;
                this.identifier();
                this.state = 3677;
                this.match(SparkSQLParser.RR_BRACKET);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterTable(): AlterTableContext {
        let localContext = new AlterTableContext(this.context, this.state);
        this.enterRule(localContext, 502, SparkSQLParser.RULE_alterTable);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3681;
            this.match(SparkSQLParser.KW_ALTER);
            this.state = 3682;
            this.match(SparkSQLParser.KW_TABLE);
            this.state = 3684;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 443, this.context) ) {
            case 1:
                {
                this.state = 3683;
                this.ifExists();
                }
                break;
            }
            this.state = 3688;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 265) {
                {
                this.state = 3686;
                this.match(SparkSQLParser.KW_DEFAULT);
                this.state = 3687;
                this.match(SparkSQLParser.DOT);
                }
            }

            this.state = 3690;
            this.tablePath();
            this.state = 3691;
            this.alterTableBody();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterTableBody(): AlterTableBodyContext {
        let localContext = new AlterTableBodyContext(this.context, this.state);
        this.enterRule(localContext, 504, SparkSQLParser.RULE_alterTableBody);
        let _la: number;
        try {
            this.state = 3851;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 467, this.context) ) {
            case 1:
                localContext = new AlterContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3698;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 445, this.context) ) {
                case 1:
                    {
                    this.state = 3693;
                    this.renameDefinition();
                    }
                    break;
                case 2:
                    {
                    this.state = 3694;
                    this.setKeyValueDefinition();
                    }
                    break;
                case 3:
                    {
                    this.state = 3695;
                    this.addConstraint();
                    }
                    break;
                case 4:
                    {
                    this.state = 3696;
                    this.dropConstraint();
                    }
                    break;
                case 5:
                    {
                    this.state = 3697;
                    this.addUnique();
                    }
                    break;
                }
                }
                break;
            case 2:
                localContext = new AddOrModifyNewColumnContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3703;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case SparkSQLParser.KW_MODIFY:
                    {
                    this.state = 3700;
                    this.match(SparkSQLParser.KW_MODIFY);
                    }
                    break;
                case SparkSQLParser.KW_ADD:
                    {
                    this.state = 3701;
                    this.match(SparkSQLParser.KW_ADD);
                    this.state = 3702;
                    this.match(SparkSQLParser.KW_COLUMNS);
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                this.state = 3705;
                this.columnsBody();
                this.state = 3707;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 23) {
                    {
                    this.state = 3706;
                    this.commentSpec();
                    }
                }

                this.state = 3710;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 110) {
                    {
                    this.state = 3709;
                    this.partitionDefinition();
                    }
                }

                this.state = 3713;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 453) {
                    {
                    this.state = 3712;
                    this.withOption();
                    }
                }

                }
                break;
            case 3:
                localContext = new AddOrModifyNewColumnsContext(localContext);
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 3720;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case SparkSQLParser.KW_MODIFY:
                    {
                    this.state = 3715;
                    this.match(SparkSQLParser.KW_MODIFY);
                    }
                    break;
                case SparkSQLParser.KW_ADD:
                    {
                    this.state = 3716;
                    this.match(SparkSQLParser.KW_ADD);
                    this.state = 3718;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 68) {
                        {
                        this.state = 3717;
                        this.ifExistsPart();
                        }
                    }

                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                this.state = 3722;
                this.match(SparkSQLParser.LR_BRACKET);
                this.state = 3723;
                this.columnOptionDefinition();
                this.state = 3725;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 8 || _la === 11 || _la === 54 || _la === 84) {
                    {
                    this.state = 3724;
                    this.columnPosition();
                    }
                }

                this.state = 3734;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 480) {
                    {
                    {
                    this.state = 3727;
                    this.match(SparkSQLParser.COMMA);
                    this.state = 3728;
                    this.columnOptionDefinition();
                    this.state = 3730;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 8 || _la === 11 || _la === 54 || _la === 84) {
                        {
                        this.state = 3729;
                        this.columnPosition();
                        }
                    }

                    }
                    }
                    this.state = 3736;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 3737;
                this.match(SparkSQLParser.RR_BRACKET);
                this.state = 3739;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 8 || _la === 11 || _la === 54 || _la === 84) {
                    {
                    this.state = 3738;
                    this.columnPosition();
                    }
                }

                this.state = 3742;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 23) {
                    {
                    this.state = 3741;
                    this.commentSpec();
                    }
                }

                }
                break;
            case 4:
                localContext = new AddNewPartitionsContext(localContext);
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 3744;
                this.match(SparkSQLParser.KW_ADD);
                this.state = 3746;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 68) {
                    {
                    this.state = 3745;
                    this.ifExistsPart();
                    }
                }

                this.state = 3750;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                do {
                    {
                    {
                    this.state = 3748;
                    this.match(SparkSQLParser.KW_PARTITION);
                    this.state = 3749;
                    this.tablePropertyList();
                    }
                    }
                    this.state = 3752;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                } while (_la === 371);
                }
                break;
            case 5:
                localContext = new DropcolumnContext(localContext);
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 3754;
                this.match(SparkSQLParser.KW_DROP);
                this.state = 3756;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 68) {
                    {
                    this.state = 3755;
                    this.ifExistsPart();
                    }
                }

                this.state = 3758;
                this.match(SparkSQLParser.KW_COLUMNS);
                this.state = 3759;
                this.match(SparkSQLParser.LR_BRACKET);
                this.state = 3760;
                this.uid();
                this.state = 3765;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 480) {
                    {
                    {
                    this.state = 3761;
                    this.match(SparkSQLParser.COMMA);
                    this.state = 3762;
                    this.uid();
                    }
                    }
                    this.state = 3767;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 3768;
                this.match(SparkSQLParser.RR_BRACKET);
                }
                break;
            case 6:
                localContext = new ReplaceColumnsContext(localContext);
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 3770;
                this.match(SparkSQLParser.KW_REPLACE);
                this.state = 3771;
                this.match(SparkSQLParser.KW_COLUMNS);
                this.state = 3772;
                this.columnsBody();
                }
                break;
            case 7:
                localContext = new AlterColumnCommentContext(localContext);
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 3773;
                this.match(SparkSQLParser.KW_ALTER);
                this.state = 3774;
                this.match(SparkSQLParser.KW_COLUMN);
                this.state = 3775;
                this.uid();
                this.state = 3776;
                this.commentSpec();
                }
                break;
            case 8:
                localContext = new DropColumnListContext(localContext);
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 3778;
                this.match(SparkSQLParser.KW_DROP);
                this.state = 3780;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 68) {
                    {
                    this.state = 3779;
                    this.ifExistsPart();
                    }
                }

                this.state = 3782;
                this.match(SparkSQLParser.LR_BRACKET);
                this.state = 3783;
                this.uid();
                this.state = 3788;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 480) {
                    {
                    {
                    this.state = 3784;
                    this.match(SparkSQLParser.COMMA);
                    this.state = 3785;
                    this.uid();
                    }
                    }
                    this.state = 3790;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 3791;
                this.match(SparkSQLParser.RR_BRACKET);
                }
                break;
            case 9:
                localContext = new DropPrimaryKeyContext(localContext);
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 3793;
                this.match(SparkSQLParser.KW_DROP);
                this.state = 3794;
                this.match(SparkSQLParser.KW_PRIMARY);
                this.state = 3795;
                this.match(SparkSQLParser.KW_KEY);
                }
                break;
            case 10:
                localContext = new RenamePartitionColumnContext(localContext);
                this.enterOuterAlt(localContext, 10);
                {
                this.state = 3796;
                this.match(SparkSQLParser.KW_PARTITION);
                this.state = 3797;
                this.tablePropertyList();
                this.state = 3798;
                this.match(SparkSQLParser.KW_RENAME);
                this.state = 3799;
                this.match(SparkSQLParser.KW_TO);
                this.state = 3800;
                this.match(SparkSQLParser.KW_PARTITION);
                this.state = 3801;
                this.tablePropertyList();
                }
                break;
            case 11:
                localContext = new DropPartitionsContext(localContext);
                this.enterOuterAlt(localContext, 11);
                {
                this.state = 3803;
                this.match(SparkSQLParser.KW_DROP);
                this.state = 3805;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 68) {
                    {
                    this.state = 3804;
                    this.ifExistsPart();
                    }
                }

                this.state = 3807;
                this.match(SparkSQLParser.KW_PARTITION);
                this.state = 3808;
                this.tablePropertyList();
                this.state = 3814;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 480) {
                    {
                    {
                    this.state = 3809;
                    this.match(SparkSQLParser.COMMA);
                    this.state = 3810;
                    this.match(SparkSQLParser.KW_PARTITION);
                    this.state = 3811;
                    this.tablePropertyList();
                    }
                    }
                    this.state = 3816;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                }
                break;
            case 12:
                localContext = new DropWatermarkContext(localContext);
                this.enterOuterAlt(localContext, 12);
                {
                this.state = 3817;
                this.match(SparkSQLParser.KW_DROP);
                this.state = 3818;
                this.match(SparkSQLParser.KW_WATERMARK);
                }
                break;
            case 13:
                localContext = new RenameColumnContext(localContext);
                this.enterOuterAlt(localContext, 13);
                {
                this.state = 3819;
                this.match(SparkSQLParser.KW_RENAME);
                this.state = 3820;
                this.match(SparkSQLParser.KW_COLUMN);
                this.state = 3821;
                this.uid();
                this.state = 3822;
                this.match(SparkSQLParser.KW_TO);
                this.state = 3823;
                this.uid();
                }
                break;
            case 14:
                localContext = new RenameTableContext(localContext);
                this.enterOuterAlt(localContext, 14);
                {
                this.state = 3825;
                this.match(SparkSQLParser.KW_RENAME);
                this.state = 3826;
                this.tablePath();
                }
                break;
            case 15:
                localContext = new SetPropertiyContext(localContext);
                this.enterOuterAlt(localContext, 15);
                {
                this.state = 3827;
                this.match(SparkSQLParser.KW_SET);
                this.state = 3828;
                this.setPart();
                }
                break;
            case 16:
                localContext = new SetPartitionPropertyContext(localContext);
                this.enterOuterAlt(localContext, 16);
                {
                this.state = 3829;
                this.match(SparkSQLParser.KW_PARTITION);
                this.state = 3831;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                do {
                    {
                    {
                    this.state = 3830;
                    this.tablePropertyList();
                    }
                    }
                    this.state = 3833;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                } while (_la === 476);
                this.state = 3835;
                this.match(SparkSQLParser.KW_SET);
                this.state = 3836;
                this.setPart();
                }
                break;
            case 17:
                localContext = new ResetPropertiyContext(localContext);
                this.enterOuterAlt(localContext, 17);
                {
                this.state = 3838;
                this.match(SparkSQLParser.KW_RESET);
                this.state = 3839;
                this.transformList();
                }
                break;
            case 18:
                localContext = new UnsetContext(localContext);
                this.enterOuterAlt(localContext, 18);
                {
                this.state = 3840;
                this.match(SparkSQLParser.KW_UNSET);
                this.state = 3841;
                this.match(SparkSQLParser.KW_TBLPROPERTIES);
                this.state = 3847;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 466, this.context) ) {
                case 1:
                    {
                    this.state = 3842;
                    this.tablePropertyList();
                    }
                    break;
                case 2:
                    {
                    this.state = 3843;
                    this.match(SparkSQLParser.LR_BRACKET);
                    this.state = 3844;
                    this.tablePropertyKey();
                    this.state = 3845;
                    this.match(SparkSQLParser.RR_BRACKET);
                    }
                    break;
                }
                }
                break;
            case 19:
                localContext = new UnsetContext(localContext);
                this.enterOuterAlt(localContext, 19);
                {
                this.state = 3849;
                this.match(SparkSQLParser.KW_RECOVER);
                this.state = 3850;
                this.match(SparkSQLParser.KW_PARTITIONS);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public setPart(): SetPartContext {
        let localContext = new SetPartContext(this.context, this.state);
        this.enterRule(localContext, 506, SparkSQLParser.RULE_setPart);
        let _la: number;
        try {
            this.state = 3869;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case SparkSQLParser.KW_ADD:
            case SparkSQLParser.KW_ADMIN:
            case SparkSQLParser.KW_AFTER:
            case SparkSQLParser.KW_ANALYZE:
            case SparkSQLParser.KW_ASC:
            case SparkSQLParser.KW_BEFORE:
            case SparkSQLParser.KW_BYTES:
            case SparkSQLParser.KW_CASCADE:
            case SparkSQLParser.KW_CATALOG:
            case SparkSQLParser.KW_CATALOGS:
            case SparkSQLParser.KW_CENTURY:
            case SparkSQLParser.KW_CHAIN:
            case SparkSQLParser.KW_CHANGELOG_MODE:
            case SparkSQLParser.KW_CHARACTERS:
            case SparkSQLParser.KW_COMMENT:
            case SparkSQLParser.KW_COMPACT:
            case SparkSQLParser.KW_COLUMNS:
            case SparkSQLParser.KW_CONSTRAINTS:
            case SparkSQLParser.KW_CONSTRUCTOR:
            case SparkSQLParser.KW_COMPUTE:
            case SparkSQLParser.KW_CUMULATE:
            case SparkSQLParser.KW_DATA:
            case SparkSQLParser.KW_DATABASE:
            case SparkSQLParser.KW_DATABASES:
            case SparkSQLParser.KW_DAYS:
            case SparkSQLParser.KW_DECADE:
            case SparkSQLParser.KW_DEFINED:
            case SparkSQLParser.KW_DESC:
            case SparkSQLParser.KW_DESCRIPTOR:
            case SparkSQLParser.KW_DIV:
            case SparkSQLParser.KW_ENCODING:
            case SparkSQLParser.KW_ENFORCED:
            case SparkSQLParser.KW_ENGINE:
            case SparkSQLParser.KW_ERROR:
            case SparkSQLParser.KW_ESTIMATED_COST:
            case SparkSQLParser.KW_EXCEPTION:
            case SparkSQLParser.KW_EXCLUDE:
            case SparkSQLParser.KW_EXCLUDING:
            case SparkSQLParser.KW_EXTENDED:
            case SparkSQLParser.KW_FILE:
            case SparkSQLParser.KW_FINAL:
            case SparkSQLParser.KW_FIRST:
            case SparkSQLParser.KW_FOLLOWING:
            case SparkSQLParser.KW_FORMAT:
            case SparkSQLParser.KW_FORTRAN:
            case SparkSQLParser.KW_FOUND:
            case SparkSQLParser.KW_FRAC_SECOND:
            case SparkSQLParser.KW_FUNCTIONS:
            case SparkSQLParser.KW_GENERAL:
            case SparkSQLParser.KW_GENERATED:
            case SparkSQLParser.KW_GO:
            case SparkSQLParser.KW_GOTO:
            case SparkSQLParser.KW_GRANTED:
            case SparkSQLParser.KW_HOP:
            case SparkSQLParser.KW_HOURS:
            case SparkSQLParser.KW_IF:
            case SparkSQLParser.KW_IGNORE:
            case SparkSQLParser.KW_INCREMENT:
            case SparkSQLParser.KW_INPUT:
            case SparkSQLParser.KW_INVOKER:
            case SparkSQLParser.KW_JAR:
            case SparkSQLParser.KW_JARS:
            case SparkSQLParser.KW_JAVA:
            case SparkSQLParser.KW_JSON:
            case SparkSQLParser.KW_JSON_EXECUTION_PLAN:
            case SparkSQLParser.KW_KEY:
            case SparkSQLParser.KW_KEY_MEMBER:
            case SparkSQLParser.KW_KEY_TYPE:
            case SparkSQLParser.KW_LABEL:
            case SparkSQLParser.KW_LAST:
            case SparkSQLParser.KW_LENGTH:
            case SparkSQLParser.KW_LEVEL:
            case SparkSQLParser.KW_LOAD:
            case SparkSQLParser.KW_MAP:
            case SparkSQLParser.KW_MICROSECOND:
            case SparkSQLParser.KW_MILLENNIUM:
            case SparkSQLParser.KW_MILLISECOND:
            case SparkSQLParser.KW_MINUTES:
            case SparkSQLParser.KW_MINVALUE:
            case SparkSQLParser.KW_MODIFY:
            case SparkSQLParser.KW_MODULES:
            case SparkSQLParser.KW_MONTHS:
            case SparkSQLParser.KW_NANOSECOND:
            case SparkSQLParser.KW_NULLS:
            case SparkSQLParser.KW_NUMBER:
            case SparkSQLParser.KW_OPTION:
            case SparkSQLParser.KW_OPTIONS:
            case SparkSQLParser.KW_ORDERING:
            case SparkSQLParser.KW_OUTPUT:
            case SparkSQLParser.KW_OVERWRITE:
            case SparkSQLParser.KW_OVERWRITING:
            case SparkSQLParser.KW_PARTITIONED:
            case SparkSQLParser.KW_PARTITIONS:
            case SparkSQLParser.KW_PASSING:
            case SparkSQLParser.KW_PAST:
            case SparkSQLParser.KW_PATH:
            case SparkSQLParser.KW_PLACING:
            case SparkSQLParser.KW_PLAN:
            case SparkSQLParser.KW_PRECEDING:
            case SparkSQLParser.KW_PRESERVE:
            case SparkSQLParser.KW_PRIOR:
            case SparkSQLParser.KW_PRIVILEGES:
            case SparkSQLParser.KW_PUBLIC:
            case SparkSQLParser.KW_PYTHON:
            case SparkSQLParser.KW_PYTHON_FILES:
            case SparkSQLParser.KW_PYTHON_REQUIREMENTS:
            case SparkSQLParser.KW_PYTHON_DEPENDENCIES:
            case SparkSQLParser.KW_PYTHON_JAR:
            case SparkSQLParser.KW_PYTHON_ARCHIVES:
            case SparkSQLParser.KW_PYTHON_PARAMETER:
            case SparkSQLParser.KW_QUARTER:
            case SparkSQLParser.KW_RAW:
            case SparkSQLParser.KW_READ:
            case SparkSQLParser.KW_RELATIVE:
            case SparkSQLParser.KW_REMOVE:
            case SparkSQLParser.KW_RENAME:
            case SparkSQLParser.KW_REPLACE:
            case SparkSQLParser.KW_RESPECT:
            case SparkSQLParser.KW_RESTART:
            case SparkSQLParser.KW_RESTRICT:
            case SparkSQLParser.KW_ROLE:
            case SparkSQLParser.KW_ROW_COUNT:
            case SparkSQLParser.KW_SCALA:
            case SparkSQLParser.KW_SCALAR:
            case SparkSQLParser.KW_SCALE:
            case SparkSQLParser.KW_SCHEMA:
            case SparkSQLParser.KW_SECONDS:
            case SparkSQLParser.KW_SECTION:
            case SparkSQLParser.KW_SECURITY:
            case SparkSQLParser.KW_SELF:
            case SparkSQLParser.KW_SERVER:
            case SparkSQLParser.KW_SERVER_NAME:
            case SparkSQLParser.KW_SESSION:
            case SparkSQLParser.KW_SETS:
            case SparkSQLParser.KW_SIMPLE:
            case SparkSQLParser.KW_SIZE:
            case SparkSQLParser.KW_SLIDE:
            case SparkSQLParser.KW_SOURCE:
            case SparkSQLParser.KW_SPACE:
            case SparkSQLParser.KW_STATE:
            case SparkSQLParser.KW_STATEMENT:
            case SparkSQLParser.KW_STEP:
            case SparkSQLParser.KW_STRING:
            case SparkSQLParser.KW_STRUCTURE:
            case SparkSQLParser.KW_STYLE:
            case SparkSQLParser.KW_TABLES:
            case SparkSQLParser.KW_TEMPORARY:
            case SparkSQLParser.KW_TIMECOL:
            case SparkSQLParser.KW_FLOOR:
            case SparkSQLParser.KW_TIMESTAMP_LTZ:
            case SparkSQLParser.KW_TIMESTAMPADD:
            case SparkSQLParser.KW_TIMESTAMPDIFF:
            case SparkSQLParser.KW_TOTIMESTAMP:
            case SparkSQLParser.KW_TRANSFORM:
            case SparkSQLParser.KW_TUMBLE:
            case SparkSQLParser.KW_TYPE:
            case SparkSQLParser.KW_UNDER:
            case SparkSQLParser.KW_UNLOAD:
            case SparkSQLParser.KW_USAGE:
            case SparkSQLParser.KW_USE:
            case SparkSQLParser.KW_UTF16:
            case SparkSQLParser.KW_UTF32:
            case SparkSQLParser.KW_UTF8:
            case SparkSQLParser.KW_VERSION:
            case SparkSQLParser.KW_VIEW:
            case SparkSQLParser.KW_VIEWS:
            case SparkSQLParser.KW_VIRTUAL:
            case SparkSQLParser.KW_WATERMARK:
            case SparkSQLParser.KW_WATERMARKS:
            case SparkSQLParser.KW_WEEK:
            case SparkSQLParser.KW_WORK:
            case SparkSQLParser.KW_WRAPPER:
            case SparkSQLParser.KW_YEARS:
            case SparkSQLParser.KW_ZONE:
            case SparkSQLParser.KW_LOCALTIMESTAMP:
            case SparkSQLParser.DOLLAR:
            case SparkSQLParser.STRING_LITERAL:
            case SparkSQLParser.DIG_LITERAL:
            case SparkSQLParser.ID_LITERAL:
                localContext = new CommonSetContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3857;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 468, this.context) ) {
                case 1:
                    {
                    this.state = 3853;
                    this.partitionDefinition();
                    }
                    break;
                case 2:
                    {
                    {
                    this.state = 3854;
                    this.identifier();
                    this.state = 3855;
                    this.identifier();
                    }
                    }
                    break;
                }
                }
                break;
            case SparkSQLParser.KW_LOCATION:
                localContext = new SetLocationContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                {
                this.state = 3859;
                this.match(SparkSQLParser.KW_LOCATION);
                this.state = 3860;
                this.stringLiteral();
                }
                }
                break;
            case SparkSQLParser.KW_SERDE:
                localContext = new SetSerdeContext(localContext);
                this.enterOuterAlt(localContext, 3);
                {
                {
                this.state = 3861;
                this.match(SparkSQLParser.KW_SERDE);
                this.state = 3862;
                this.stringLiteral();
                this.state = 3866;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 453) {
                    {
                    this.state = 3863;
                    this.match(SparkSQLParser.KW_WITH);
                    this.state = 3864;
                    this.match(SparkSQLParser.KW_SERDEPROPERTIES);
                    this.state = 3865;
                    this.tablePropertyList();
                    }
                }

                }
                }
                break;
            case SparkSQLParser.KW_TBLPROPERTIES:
                localContext = new SetTblProContext(localContext);
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 3868;
                this.tblProperties();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public dropCatalog(): DropCatalogContext {
        let localContext = new DropCatalogContext(this.context, this.state);
        this.enterRule(localContext, 508, SparkSQLParser.RULE_dropCatalog);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3871;
            this.match(SparkSQLParser.KW_DROP);
            this.state = 3872;
            this.match(SparkSQLParser.KW_CATALOG);
            this.state = 3874;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 471, this.context) ) {
            case 1:
                {
                this.state = 3873;
                this.ifExists();
                }
                break;
            }
            this.state = 3876;
            this.catalogPath();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public dropTable(): DropTableContext {
        let localContext = new DropTableContext(this.context, this.state);
        this.enterRule(localContext, 510, SparkSQLParser.RULE_dropTable);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3878;
            this.match(SparkSQLParser.KW_DROP);
            this.state = 3880;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 172) {
                {
                this.state = 3879;
                this.match(SparkSQLParser.KW_TEMPORARY);
                }
            }

            this.state = 3882;
            this.match(SparkSQLParser.KW_TABLE);
            this.state = 3884;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 473, this.context) ) {
            case 1:
                {
                this.state = 3883;
                this.ifExists();
                }
                break;
            }
            this.state = 3886;
            this.tablePath();
            this.state = 3888;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 385) {
                {
                this.state = 3887;
                this.match(SparkSQLParser.KW_PURGE);
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public dropDatabase(): DropDatabaseContext {
        let localContext = new DropDatabaseContext(this.context, this.state);
        this.enterRule(localContext, 512, SparkSQLParser.RULE_dropDatabase);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3890;
            this.match(SparkSQLParser.KW_DROP);
            this.state = 3891;
            this.match(SparkSQLParser.KW_DATABASE);
            this.state = 3893;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 475, this.context) ) {
            case 1:
                {
                this.state = 3892;
                this.ifExists();
                }
                break;
            }
            this.state = 3895;
            this.databasePath();
            this.state = 3897;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 15 || _la === 141) {
                {
                this.state = 3896;
                localContext._dropType = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(_la === 15 || _la === 141)) {
                    localContext._dropType = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public dropView(): DropViewContext {
        let localContext = new DropViewContext(this.context, this.state);
        this.enterRule(localContext, 514, SparkSQLParser.RULE_dropView);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3899;
            this.match(SparkSQLParser.KW_DROP);
            this.state = 3901;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 172) {
                {
                this.state = 3900;
                this.match(SparkSQLParser.KW_TEMPORARY);
                }
            }

            this.state = 3903;
            this.match(SparkSQLParser.KW_VIEW);
            this.state = 3905;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 478, this.context) ) {
            case 1:
                {
                this.state = 3904;
                this.ifExists();
                }
                break;
            }
            this.state = 3907;
            this.uid();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public dropFunction(): DropFunctionContext {
        let localContext = new DropFunctionContext(this.context, this.state);
        this.enterRule(localContext, 516, SparkSQLParser.RULE_dropFunction);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3909;
            this.match(SparkSQLParser.KW_DROP);
            this.state = 3913;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 479, this.context) ) {
            case 1:
                {
                this.state = 3910;
                this.match(SparkSQLParser.KW_TEMPORARY);
                }
                break;
            case 2:
                {
                this.state = 3911;
                this.match(SparkSQLParser.KW_TEMPORARY);
                this.state = 3912;
                this.match(SparkSQLParser.KW_SYSTEM);
                }
                break;
            }
            this.state = 3915;
            this.match(SparkSQLParser.KW_FUNCTION);
            this.state = 3917;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 480, this.context) ) {
            case 1:
                {
                this.state = 3916;
                this.ifExists();
                }
                break;
            }
            this.state = 3919;
            this.functionName();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public truncateTable(): TruncateTableContext {
        let localContext = new TruncateTableContext(this.context, this.state);
        this.enterRule(localContext, 518, SparkSQLParser.RULE_truncateTable);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3921;
            this.match(SparkSQLParser.KW_TRUNCATE);
            this.state = 3922;
            this.match(SparkSQLParser.KW_TABLE);
            this.state = 3923;
            this.tablePathCreate();
            this.state = 3926;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 371) {
                {
                this.state = 3924;
                this.match(SparkSQLParser.KW_PARTITION);
                this.state = 3925;
                this.tablePropertyList();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public repairTable(): RepairTableContext {
        let localContext = new RepairTableContext(this.context, this.state);
        this.enterRule(localContext, 520, SparkSQLParser.RULE_repairTable);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3928;
            this.match(SparkSQLParser.KW_REPAIR);
            this.state = 3929;
            this.match(SparkSQLParser.KW_TABLE);
            this.state = 3930;
            this.tablePath();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alertView(): AlertViewContext {
        let localContext = new AlertViewContext(this.context, this.state);
        this.enterRule(localContext, 522, SparkSQLParser.RULE_alertView);
        let _la: number;
        try {
            this.state = 3963;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 484, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                {
                this.state = 3932;
                this.match(SparkSQLParser.KW_ALTER);
                this.state = 3933;
                this.match(SparkSQLParser.KW_VIEW);
                this.state = 3934;
                this.tablePath();
                this.state = 3938;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case SparkSQLParser.KW_RENAME:
                    {
                    this.state = 3935;
                    this.renameDefinition();
                    }
                    break;
                case SparkSQLParser.KW_AS:
                    {
                    this.state = 3936;
                    this.match(SparkSQLParser.KW_AS);
                    this.state = 3937;
                    this.queryStatement(0);
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                {
                this.state = 3940;
                this.match(SparkSQLParser.KW_ALTER);
                this.state = 3941;
                this.match(SparkSQLParser.KW_VIEW);
                this.state = 3942;
                this.tablePath();
                this.state = 3943;
                this.match(SparkSQLParser.KW_SET);
                this.state = 3944;
                this.match(SparkSQLParser.KW_TBLPROPERTIES);
                this.state = 3945;
                this.tableCanHasKeyPropertyList();
                }
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                {
                this.state = 3947;
                this.match(SparkSQLParser.KW_ALTER);
                this.state = 3948;
                this.match(SparkSQLParser.KW_VIEW);
                this.state = 3949;
                this.tablePath();
                this.state = 3950;
                this.match(SparkSQLParser.KW_UNSET);
                this.state = 3951;
                this.match(SparkSQLParser.KW_TBLPROPERTIES);
                this.state = 3952;
                this.match(SparkSQLParser.LR_BRACKET);
                this.state = 3953;
                this.tablePropertyKey();
                this.state = 3958;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 480) {
                    {
                    {
                    this.state = 3954;
                    this.match(SparkSQLParser.COMMA);
                    this.state = 3955;
                    this.tablePropertyKey();
                    }
                    }
                    this.state = 3960;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 3961;
                this.match(SparkSQLParser.RR_BRACKET);
                }
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterDatabase(): AlterDatabaseContext {
        let localContext = new AlterDatabaseContext(this.context, this.state);
        this.enterRule(localContext, 524, SparkSQLParser.RULE_alterDatabase);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3965;
            this.match(SparkSQLParser.KW_ALTER);
            this.state = 3966;
            this.match(SparkSQLParser.KW_DATABASE);
            this.state = 3967;
            this.databasePath();
            this.state = 3975;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 485, this.context) ) {
            case 1:
                {
                this.state = 3968;
                this.setKeyValueDefinition();
                }
                break;
            case 2:
                {
                {
                this.state = 3969;
                this.match(SparkSQLParser.KW_SET);
                this.state = 3970;
                this.match(SparkSQLParser.KW_LOCATION);
                this.state = 3971;
                this.filePath();
                }
                }
                break;
            case 3:
                {
                {
                this.state = 3972;
                this.match(SparkSQLParser.KW_SET);
                this.state = 3973;
                this.match(SparkSQLParser.KW_DBPROPERTIES);
                this.state = 3974;
                this.tablePropertyList();
                }
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterFunction(): AlterFunctionContext {
        let localContext = new AlterFunctionContext(this.context, this.state);
        this.enterRule(localContext, 526, SparkSQLParser.RULE_alterFunction);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3977;
            this.match(SparkSQLParser.KW_ALTER);
            this.state = 3981;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 486, this.context) ) {
            case 1:
                {
                this.state = 3978;
                this.match(SparkSQLParser.KW_TEMPORARY);
                }
                break;
            case 2:
                {
                this.state = 3979;
                this.match(SparkSQLParser.KW_TEMPORARY);
                this.state = 3980;
                this.match(SparkSQLParser.KW_SYSTEM);
                }
                break;
            }
            this.state = 3983;
            this.match(SparkSQLParser.KW_FUNCTION);
            this.state = 3985;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 487, this.context) ) {
            case 1:
                {
                this.state = 3984;
                this.ifExists();
                }
                break;
            }
            this.state = 3987;
            this.uid();
            this.state = 3988;
            this.match(SparkSQLParser.KW_AS);
            this.state = 3989;
            this.identifier();
            this.state = 3992;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 328) {
                {
                this.state = 3990;
                this.match(SparkSQLParser.KW_LANGUAGE);
                this.state = 3991;
                _la = this.tokenStream.LA(1);
                if(!(_la === 76 || _la === 122 || _la === 144)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public inlineTableClause(): InlineTableClauseContext {
        let localContext = new InlineTableClauseContext(this.context, this.state);
        this.enterRule(localContext, 528, SparkSQLParser.RULE_inlineTableClause);
        let _la: number;
        try {
            this.state = 4030;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case SparkSQLParser.KW_EXPLODE:
            case SparkSQLParser.KW_EXPLODE_OUTER:
            case SparkSQLParser.KW_INLINE:
            case SparkSQLParser.KW_INLINE_OUTER:
            case SparkSQLParser.KW_POSEXPLODE:
            case SparkSQLParser.KW_POSEXPLODE_OUTER:
                localContext = new OneExpresionContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                {
                this.state = 3994;
                _la = this.tokenStream.LA(1);
                if(!(_la === 287 || _la === 288 || _la === 321 || _la === 322 || _la === 382 || _la === 383)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 3995;
                this.match(SparkSQLParser.LR_BRACKET);
                this.state = 3996;
                this.expression();
                this.state = 3997;
                this.match(SparkSQLParser.RR_BRACKET);
                }
                }
                break;
            case SparkSQLParser.KW_STACK:
                localContext = new StackContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                {
                this.state = 3999;
                this.match(SparkSQLParser.KW_STACK);
                this.state = 4000;
                this.match(SparkSQLParser.LR_BRACKET);
                this.state = 4001;
                this.constant();
                this.state = 4006;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 480) {
                    {
                    {
                    this.state = 4002;
                    this.match(SparkSQLParser.COMMA);
                    this.state = 4003;
                    this.expression();
                    }
                    }
                    this.state = 4008;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 4009;
                this.match(SparkSQLParser.RR_BRACKET);
                }
                }
                break;
            case SparkSQLParser.KW_JSON_TUPLE:
                localContext = new Json_tupleContext(localContext);
                this.enterOuterAlt(localContext, 3);
                {
                {
                this.state = 4011;
                this.match(SparkSQLParser.KW_JSON_TUPLE);
                this.state = 4012;
                this.match(SparkSQLParser.LR_BRACKET);
                this.state = 4013;
                this.stringLiteral();
                this.state = 4018;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 480) {
                    {
                    {
                    this.state = 4014;
                    this.match(SparkSQLParser.COMMA);
                    this.state = 4015;
                    this.expression();
                    }
                    }
                    this.state = 4020;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 4021;
                this.match(SparkSQLParser.RR_BRACKET);
                }
                }
                break;
            case SparkSQLParser.KW_PARSE_URL:
                localContext = new Parse_urlContext(localContext);
                this.enterOuterAlt(localContext, 4);
                {
                {
                this.state = 4023;
                this.match(SparkSQLParser.KW_PARSE_URL);
                this.state = 4024;
                this.match(SparkSQLParser.LR_BRACKET);
                this.state = 4025;
                this.stringLiteral();
                this.state = 4026;
                this.match(SparkSQLParser.COMMA);
                this.state = 4027;
                this.stringLiteral();
                this.state = 4028;
                this.match(SparkSQLParser.RR_BRACKET);
                }
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public showTableStatementBody(): ShowTableStatementBodyContext {
        let localContext = new ShowTableStatementBodyContext(this.context, this.state);
        this.enterRule(localContext, 530, SparkSQLParser.RULE_showTableStatementBody);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4033;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 49) {
                {
                this.state = 4032;
                this.match(SparkSQLParser.KW_EXTENDED);
                }
            }

            this.state = 4037;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 309) {
                {
                this.state = 4035;
                this.match(SparkSQLParser.KW_IN);
                this.state = 4036;
                this.match(SparkSQLParser.KW_DEFAULT);
                }
            }

            this.state = 4040;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 334) {
                {
                this.state = 4039;
                this.likeDefinition();
                }
            }

            this.state = 4047;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 371) {
                {
                this.state = 4042;
                this.match(SparkSQLParser.KW_PARTITION);
                this.state = 4043;
                this.match(SparkSQLParser.LR_BRACKET);
                this.state = 4044;
                this.tableProperty();
                this.state = 4045;
                this.match(SparkSQLParser.RR_BRACKET);
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public showFunctionStatementBody(): ShowFunctionStatementBodyContext {
        let localContext = new ShowFunctionStatementBodyContext(this.context, this.state);
        this.enterRule(localContext, 532, SparkSQLParser.RULE_showFunctionStatementBody);
        let _la: number;
        try {
            this.state = 4056;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case SparkSQLParser.KW_ADD:
            case SparkSQLParser.KW_ADMIN:
            case SparkSQLParser.KW_AFTER:
            case SparkSQLParser.KW_ANALYZE:
            case SparkSQLParser.KW_ASC:
            case SparkSQLParser.KW_BEFORE:
            case SparkSQLParser.KW_BYTES:
            case SparkSQLParser.KW_CASCADE:
            case SparkSQLParser.KW_CATALOG:
            case SparkSQLParser.KW_CATALOGS:
            case SparkSQLParser.KW_CENTURY:
            case SparkSQLParser.KW_CHAIN:
            case SparkSQLParser.KW_CHANGELOG_MODE:
            case SparkSQLParser.KW_CHARACTERS:
            case SparkSQLParser.KW_COMMENT:
            case SparkSQLParser.KW_COMPACT:
            case SparkSQLParser.KW_COLUMNS:
            case SparkSQLParser.KW_CONSTRAINTS:
            case SparkSQLParser.KW_CONSTRUCTOR:
            case SparkSQLParser.KW_COMPUTE:
            case SparkSQLParser.KW_CUMULATE:
            case SparkSQLParser.KW_DATA:
            case SparkSQLParser.KW_DATABASE:
            case SparkSQLParser.KW_DATABASES:
            case SparkSQLParser.KW_DAYS:
            case SparkSQLParser.KW_DECADE:
            case SparkSQLParser.KW_DEFINED:
            case SparkSQLParser.KW_DESC:
            case SparkSQLParser.KW_DESCRIPTOR:
            case SparkSQLParser.KW_DIV:
            case SparkSQLParser.KW_ENCODING:
            case SparkSQLParser.KW_ENFORCED:
            case SparkSQLParser.KW_ENGINE:
            case SparkSQLParser.KW_ERROR:
            case SparkSQLParser.KW_ESTIMATED_COST:
            case SparkSQLParser.KW_EXCEPTION:
            case SparkSQLParser.KW_EXCLUDE:
            case SparkSQLParser.KW_EXCLUDING:
            case SparkSQLParser.KW_EXTENDED:
            case SparkSQLParser.KW_FILE:
            case SparkSQLParser.KW_FINAL:
            case SparkSQLParser.KW_FIRST:
            case SparkSQLParser.KW_FOLLOWING:
            case SparkSQLParser.KW_FORMAT:
            case SparkSQLParser.KW_FORTRAN:
            case SparkSQLParser.KW_FOUND:
            case SparkSQLParser.KW_FRAC_SECOND:
            case SparkSQLParser.KW_FUNCTIONS:
            case SparkSQLParser.KW_GENERAL:
            case SparkSQLParser.KW_GENERATED:
            case SparkSQLParser.KW_GO:
            case SparkSQLParser.KW_GOTO:
            case SparkSQLParser.KW_GRANTED:
            case SparkSQLParser.KW_HOP:
            case SparkSQLParser.KW_HOURS:
            case SparkSQLParser.KW_IF:
            case SparkSQLParser.KW_IGNORE:
            case SparkSQLParser.KW_INCREMENT:
            case SparkSQLParser.KW_INPUT:
            case SparkSQLParser.KW_INVOKER:
            case SparkSQLParser.KW_JAR:
            case SparkSQLParser.KW_JARS:
            case SparkSQLParser.KW_JAVA:
            case SparkSQLParser.KW_JSON:
            case SparkSQLParser.KW_JSON_EXECUTION_PLAN:
            case SparkSQLParser.KW_KEY:
            case SparkSQLParser.KW_KEY_MEMBER:
            case SparkSQLParser.KW_KEY_TYPE:
            case SparkSQLParser.KW_LABEL:
            case SparkSQLParser.KW_LAST:
            case SparkSQLParser.KW_LENGTH:
            case SparkSQLParser.KW_LEVEL:
            case SparkSQLParser.KW_LOAD:
            case SparkSQLParser.KW_MAP:
            case SparkSQLParser.KW_MICROSECOND:
            case SparkSQLParser.KW_MILLENNIUM:
            case SparkSQLParser.KW_MILLISECOND:
            case SparkSQLParser.KW_MINUTES:
            case SparkSQLParser.KW_MINVALUE:
            case SparkSQLParser.KW_MODIFY:
            case SparkSQLParser.KW_MODULES:
            case SparkSQLParser.KW_MONTHS:
            case SparkSQLParser.KW_NANOSECOND:
            case SparkSQLParser.KW_NULLS:
            case SparkSQLParser.KW_NUMBER:
            case SparkSQLParser.KW_OPTION:
            case SparkSQLParser.KW_OPTIONS:
            case SparkSQLParser.KW_ORDERING:
            case SparkSQLParser.KW_OUTPUT:
            case SparkSQLParser.KW_OVERWRITE:
            case SparkSQLParser.KW_OVERWRITING:
            case SparkSQLParser.KW_PARTITIONED:
            case SparkSQLParser.KW_PARTITIONS:
            case SparkSQLParser.KW_PASSING:
            case SparkSQLParser.KW_PAST:
            case SparkSQLParser.KW_PATH:
            case SparkSQLParser.KW_PLACING:
            case SparkSQLParser.KW_PLAN:
            case SparkSQLParser.KW_PRECEDING:
            case SparkSQLParser.KW_PRESERVE:
            case SparkSQLParser.KW_PRIOR:
            case SparkSQLParser.KW_PRIVILEGES:
            case SparkSQLParser.KW_PUBLIC:
            case SparkSQLParser.KW_PYTHON:
            case SparkSQLParser.KW_PYTHON_FILES:
            case SparkSQLParser.KW_PYTHON_REQUIREMENTS:
            case SparkSQLParser.KW_PYTHON_DEPENDENCIES:
            case SparkSQLParser.KW_PYTHON_JAR:
            case SparkSQLParser.KW_PYTHON_ARCHIVES:
            case SparkSQLParser.KW_PYTHON_PARAMETER:
            case SparkSQLParser.KW_QUARTER:
            case SparkSQLParser.KW_RAW:
            case SparkSQLParser.KW_READ:
            case SparkSQLParser.KW_RELATIVE:
            case SparkSQLParser.KW_REMOVE:
            case SparkSQLParser.KW_RENAME:
            case SparkSQLParser.KW_REPLACE:
            case SparkSQLParser.KW_RESPECT:
            case SparkSQLParser.KW_RESTART:
            case SparkSQLParser.KW_RESTRICT:
            case SparkSQLParser.KW_ROLE:
            case SparkSQLParser.KW_ROW_COUNT:
            case SparkSQLParser.KW_SCALA:
            case SparkSQLParser.KW_SCALAR:
            case SparkSQLParser.KW_SCALE:
            case SparkSQLParser.KW_SCHEMA:
            case SparkSQLParser.KW_SECONDS:
            case SparkSQLParser.KW_SECTION:
            case SparkSQLParser.KW_SECURITY:
            case SparkSQLParser.KW_SELF:
            case SparkSQLParser.KW_SERVER:
            case SparkSQLParser.KW_SERVER_NAME:
            case SparkSQLParser.KW_SESSION:
            case SparkSQLParser.KW_SETS:
            case SparkSQLParser.KW_SIMPLE:
            case SparkSQLParser.KW_SIZE:
            case SparkSQLParser.KW_SLIDE:
            case SparkSQLParser.KW_SOURCE:
            case SparkSQLParser.KW_SPACE:
            case SparkSQLParser.KW_STATE:
            case SparkSQLParser.KW_STATEMENT:
            case SparkSQLParser.KW_STEP:
            case SparkSQLParser.KW_STRING:
            case SparkSQLParser.KW_STRUCTURE:
            case SparkSQLParser.KW_STYLE:
            case SparkSQLParser.KW_TABLES:
            case SparkSQLParser.KW_TEMPORARY:
            case SparkSQLParser.KW_TIMECOL:
            case SparkSQLParser.KW_FLOOR:
            case SparkSQLParser.KW_TIMESTAMP_LTZ:
            case SparkSQLParser.KW_TIMESTAMPADD:
            case SparkSQLParser.KW_TIMESTAMPDIFF:
            case SparkSQLParser.KW_TOTIMESTAMP:
            case SparkSQLParser.KW_TRANSFORM:
            case SparkSQLParser.KW_TUMBLE:
            case SparkSQLParser.KW_TYPE:
            case SparkSQLParser.KW_UNDER:
            case SparkSQLParser.KW_UNLOAD:
            case SparkSQLParser.KW_USAGE:
            case SparkSQLParser.KW_USE:
            case SparkSQLParser.KW_UTF16:
            case SparkSQLParser.KW_UTF32:
            case SparkSQLParser.KW_UTF8:
            case SparkSQLParser.KW_VERSION:
            case SparkSQLParser.KW_VIEW:
            case SparkSQLParser.KW_VIEWS:
            case SparkSQLParser.KW_VIRTUAL:
            case SparkSQLParser.KW_WATERMARK:
            case SparkSQLParser.KW_WATERMARKS:
            case SparkSQLParser.KW_WEEK:
            case SparkSQLParser.KW_WORK:
            case SparkSQLParser.KW_WRAPPER:
            case SparkSQLParser.KW_YEARS:
            case SparkSQLParser.KW_ZONE:
            case SparkSQLParser.KW_LOCALTIMESTAMP:
            case SparkSQLParser.DOLLAR:
            case SparkSQLParser.STRING_LITERAL:
            case SparkSQLParser.DIG_LITERAL:
            case SparkSQLParser.ID_LITERAL:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4049;
                this.uid();
                }
                break;
            case SparkSQLParser.KW_FROM:
            case SparkSQLParser.KW_LIKE:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4052;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 296) {
                    {
                    this.state = 4050;
                    this.match(SparkSQLParser.KW_FROM);
                    this.state = 4051;
                    this.uid();
                    }
                }

                this.state = 4054;
                this.match(SparkSQLParser.KW_LIKE);
                this.state = 4055;
                this.expression();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public transformClause(): TransformClauseContext {
        let localContext = new TransformClauseContext(this.context, this.state);
        this.enterRule(localContext, 534, SparkSQLParser.RULE_transformClause);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4058;
            this.match(SparkSQLParser.KW_TRANSFORM);
            this.state = 4059;
            this.columnNameList();
            this.state = 4071;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 500, this.context) ) {
            case 1:
                {
                {
                this.state = 4060;
                this.match(SparkSQLParser.KW_USING);
                this.state = 4061;
                this.stringLiteral();
                this.state = 4067;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 212) {
                    {
                    this.state = 4062;
                    this.match(SparkSQLParser.KW_AS);
                    this.state = 4065;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 498, this.context) ) {
                    case 1:
                        {
                        this.state = 4063;
                        this.columnNameList();
                        }
                        break;
                    case 2:
                        {
                        this.state = 4064;
                        this.physicalColumnDefinitionList();
                        }
                        break;
                    }
                    }
                }

                }
                }
                break;
            case 2:
                {
                this.state = 4069;
                this.rowFormatDelimited();
                }
                break;
            case 3:
                {
                this.state = 4070;
                this.hiveSerde();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public insertSparkDirectoryStatement(): InsertSparkDirectoryStatementContext {
        let localContext = new InsertSparkDirectoryStatementContext(this.context, this.state);
        this.enterRule(localContext, 536, SparkSQLParser.RULE_insertSparkDirectoryStatement);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4073;
            this.match(SparkSQLParser.KW_INSERT);
            this.state = 4074;
            this.match(SparkSQLParser.KW_OVERWRITE);
            this.state = 4075;
            this.match(SparkSQLParser.KW_DIRECTORY);
            this.state = 4076;
            this.insertSparkDirectoryBody();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public insertSparkDirectoryBody(): InsertSparkDirectoryBodyContext {
        let localContext = new InsertSparkDirectoryBodyContext(this.context, this.state);
        this.enterRule(localContext, 538, SparkSQLParser.RULE_insertSparkDirectoryBody);
        let _la: number;
        try {
            this.state = 4124;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 509, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                {
                this.state = 4079;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 495 || _la === 498) {
                    {
                    this.state = 4078;
                    this.filePath();
                    }
                }

                this.state = 4081;
                this.match(SparkSQLParser.KW_USING);
                this.state = 4082;
                this.match(SparkSQLParser.ID_LITERAL);
                this.state = 4083;
                this.match(SparkSQLParser.KW_OPTIONS);
                this.state = 4084;
                this.match(SparkSQLParser.LR_BRACKET);
                this.state = 4085;
                this.columnName();
                this.state = 4087;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 92 || _la === 94 || _la === 129 || _la === 198 || _la === 261 || _la === 292 || _la === 307 || _la === 318 || ((((_la - 345)) & ~0x1F) === 0 && ((1 << (_la - 345)) & 4617) !== 0) || _la === 400 || _la === 435 || _la === 456 || ((((_la - 490)) & ~0x1F) === 0 && ((1 << (_la - 490)) & 1793) !== 0)) {
                    {
                    this.state = 4086;
                    this.constant();
                    }
                }

                this.state = 4096;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 480) {
                    {
                    {
                    this.state = 4089;
                    this.match(SparkSQLParser.COMMA);
                    this.state = 4090;
                    this.columnName();
                    this.state = 4092;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 92 || _la === 94 || _la === 129 || _la === 198 || _la === 261 || _la === 292 || _la === 307 || _la === 318 || ((((_la - 345)) & ~0x1F) === 0 && ((1 << (_la - 345)) & 4617) !== 0) || _la === 400 || _la === 435 || _la === 456 || ((((_la - 490)) & ~0x1F) === 0 && ((1 << (_la - 490)) & 1793) !== 0)) {
                        {
                        this.state = 4091;
                        this.constant();
                        }
                    }

                    }
                    }
                    this.state = 4098;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 4099;
                this.match(SparkSQLParser.RR_BRACKET);
                this.state = 4100;
                this.queryStatement(0);
                }
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                {
                this.state = 4102;
                this.match(SparkSQLParser.KW_USING);
                this.state = 4103;
                this.match(SparkSQLParser.ID_LITERAL);
                this.state = 4104;
                this.match(SparkSQLParser.KW_OPTIONS);
                this.state = 4105;
                this.match(SparkSQLParser.LR_BRACKET);
                this.state = 4110;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 498) {
                    {
                    this.state = 4106;
                    this.match(SparkSQLParser.STRING_LITERAL);
                    this.state = 4108;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 495 || _la === 498) {
                        {
                        this.state = 4107;
                        this.filePath();
                        }
                    }

                    }
                }

                this.state = 4119;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 480) {
                    {
                    {
                    this.state = 4112;
                    this.match(SparkSQLParser.COMMA);
                    this.state = 4113;
                    this.columnName();
                    this.state = 4115;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 92 || _la === 94 || _la === 129 || _la === 198 || _la === 261 || _la === 292 || _la === 307 || _la === 318 || ((((_la - 345)) & ~0x1F) === 0 && ((1 << (_la - 345)) & 4617) !== 0) || _la === 400 || _la === 435 || _la === 456 || ((((_la - 490)) & ~0x1F) === 0 && ((1 << (_la - 490)) & 1793) !== 0)) {
                        {
                        this.state = 4114;
                        this.constant();
                        }
                    }

                    }
                    }
                    this.state = 4121;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 4122;
                this.match(SparkSQLParser.RR_BRACKET);
                this.state = 4123;
                this.queryStatement(0);
                }
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public insertHiveDirectoryStatement(): InsertHiveDirectoryStatementContext {
        let localContext = new InsertHiveDirectoryStatementContext(this.context, this.state);
        this.enterRule(localContext, 540, SparkSQLParser.RULE_insertHiveDirectoryStatement);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4126;
            this.match(SparkSQLParser.KW_INSERT);
            this.state = 4127;
            this.match(SparkSQLParser.KW_OVERWRITE);
            this.state = 4128;
            this.match(SparkSQLParser.KW_LOCAL);
            this.state = 4129;
            this.match(SparkSQLParser.KW_DIRECTORY);
            this.state = 4130;
            this.filePath();
            this.state = 4133;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case SparkSQLParser.KW_STORED:
                {
                this.state = 4131;
                this.storedAs();
                }
                break;
            case SparkSQLParser.KW_ROW:
                {
                this.state = 4132;
                this.hiveRowFormatPart();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            this.state = 4135;
            this.queryStatement(0);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public hiveRowFormatPart(): HiveRowFormatPartContext {
        let localContext = new HiveRowFormatPartContext(this.context, this.state);
        this.enterRule(localContext, 542, SparkSQLParser.RULE_hiveRowFormatPart);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4137;
            this.rowFormatDelimted();
            this.state = 4138;
            this.fieldsTerminatedBy();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public insertMulStatementCompatibility(): InsertMulStatementCompatibilityContext {
        let localContext = new InsertMulStatementCompatibilityContext(this.context, this.state);
        this.enterRule(localContext, 544, SparkSQLParser.RULE_insertMulStatementCompatibility);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4140;
            this.match(SparkSQLParser.KW_BEGIN);
            this.state = 4141;
            this.match(SparkSQLParser.KW_STATEMENT);
            this.state = 4142;
            this.match(SparkSQLParser.KW_SET);
            this.state = 4143;
            this.match(SparkSQLParser.SEMICOLON);
            this.state = 4147;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            do {
                {
                {
                this.state = 4144;
                this.insertSimpleStatement();
                this.state = 4145;
                this.match(SparkSQLParser.SEMICOLON);
                }
                }
                this.state = 4149;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            } while (_la === 314);
            this.state = 4151;
            this.match(SparkSQLParser.KW_END);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public insertMulStatement(): InsertMulStatementContext {
        let localContext = new InsertMulStatementContext(this.context, this.state);
        this.enterRule(localContext, 546, SparkSQLParser.RULE_insertMulStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4153;
            this.match(SparkSQLParser.KW_STATEMENT);
            this.state = 4154;
            this.match(SparkSQLParser.KW_SET);
            this.state = 4155;
            this.match(SparkSQLParser.KW_BEGIN);
            this.state = 4159;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            do {
                {
                {
                this.state = 4156;
                this.insertSimpleStatement();
                this.state = 4157;
                this.match(SparkSQLParser.SEMICOLON);
                }
                }
                this.state = 4161;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            } while (_la === 314);
            this.state = 4163;
            this.match(SparkSQLParser.KW_END);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public insertFromTable(): InsertFromTableContext {
        let localContext = new InsertFromTableContext(this.context, this.state);
        this.enterRule(localContext, 548, SparkSQLParser.RULE_insertFromTable);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4165;
            this.match(SparkSQLParser.KW_INSERT);
            this.state = 4166;
            _la = this.tokenStream.LA(1);
            if(!(_la === 108 || _la === 319)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            this.state = 4168;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 422) {
                {
                this.state = 4167;
                this.match(SparkSQLParser.KW_TABLE);
                }
            }

            this.state = 4170;
            this.tablePath();
            this.state = 4171;
            this.match(SparkSQLParser.KW_TABLE);
            this.state = 4172;
            this.tablePath();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createExternalTable(): CreateExternalTableContext {
        let localContext = new CreateExternalTableContext(this.context, this.state);
        this.enterRule(localContext, 550, SparkSQLParser.RULE_createExternalTable);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4174;
            this.match(SparkSQLParser.KW_CREATE);
            this.state = 4175;
            this.match(SparkSQLParser.KW_EXTERNAL);
            this.state = 4176;
            this.match(SparkSQLParser.KW_TABLE);
            this.state = 4178;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 514, this.context) ) {
            case 1:
                {
                this.state = 4177;
                this.ifNotExists();
                }
                break;
            }
            this.state = 4180;
            this.tablePathCreate();
            this.state = 4181;
            this.columnsBody();
            this.state = 4183;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            do {
                {
                {
                this.state = 4182;
                this.createExternalTableNoSortElement();
                }
                }
                this.state = 4185;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            } while (_la === 89 || _la === 91 || _la === 258 || _la === 282 || _la === 294 || _la === 335 || _la === 357 || _la === 367 || _la === 398 || _la === 408);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createExternalTableNoSortElement(): CreateExternalTableNoSortElementContext {
        let localContext = new CreateExternalTableNoSortElementContext(this.context, this.state);
        this.enterRule(localContext, 552, SparkSQLParser.RULE_createExternalTableNoSortElement);
        try {
            this.state = 4219;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 516, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4187;
                this.rowFormatDelimted();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4188;
                this.fieldsTerminatedBy();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                {
                this.state = 4189;
                this.match(SparkSQLParser.KW_ROW);
                this.state = 4190;
                this.match(SparkSQLParser.KW_FORMAT);
                this.state = 4191;
                this.match(SparkSQLParser.KW_SERDE);
                this.state = 4192;
                this.stringLiteral();
                }
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                {
                this.state = 4193;
                this.match(SparkSQLParser.KW_LINES);
                this.state = 4194;
                this.match(SparkSQLParser.KW_TERMINATED);
                this.state = 4195;
                this.match(SparkSQLParser.KW_BY);
                this.state = 4196;
                this.stringLiteral();
                }
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                {
                this.state = 4197;
                this.match(SparkSQLParser.KW_NULL);
                this.state = 4198;
                this.match(SparkSQLParser.KW_DEFINED);
                this.state = 4199;
                this.match(SparkSQLParser.KW_AS);
                this.state = 4200;
                this.stringLiteral();
                }
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                {
                this.state = 4201;
                this.match(SparkSQLParser.KW_ESCAPED);
                this.state = 4202;
                this.match(SparkSQLParser.KW_BY);
                this.state = 4203;
                this.stringLiteral();
                }
                }
                break;
            case 7:
                this.enterOuterAlt(localContext, 7);
                {
                {
                this.state = 4204;
                this.match(SparkSQLParser.KW_COLLECTION);
                this.state = 4205;
                this.match(SparkSQLParser.KW_ITEMS);
                this.state = 4206;
                this.match(SparkSQLParser.KW_TERMINATED);
                this.state = 4207;
                this.match(SparkSQLParser.KW_BY);
                this.state = 4208;
                this.stringLiteral();
                }
                }
                break;
            case 8:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 4209;
                this.storedAs();
                }
                break;
            case 9:
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 4210;
                this.storedAsInputformat();
                }
                break;
            case 10:
                this.enterOuterAlt(localContext, 10);
                {
                this.state = 4211;
                this.outputformat();
                }
                break;
            case 11:
                this.enterOuterAlt(localContext, 11);
                {
                this.state = 4212;
                this.location();
                }
                break;
            case 12:
                this.enterOuterAlt(localContext, 12);
                {
                {
                this.state = 4213;
                this.match(SparkSQLParser.KW_MAP);
                this.state = 4214;
                this.match(SparkSQLParser.KW_KEYS);
                this.state = 4215;
                this.match(SparkSQLParser.KW_TERMINATED);
                this.state = 4216;
                this.match(SparkSQLParser.KW_BY);
                this.state = 4217;
                this.stringLiteral();
                }
                }
                break;
            case 13:
                this.enterOuterAlt(localContext, 13);
                {
                this.state = 4218;
                this.rowFormatSerde();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public hiveFormatCreate(): HiveFormatCreateContext {
        let localContext = new HiveFormatCreateContext(this.context, this.state);
        this.enterRule(localContext, 554, SparkSQLParser.RULE_hiveFormatCreate);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4221;
            this.match(SparkSQLParser.KW_CREATE);
            this.state = 4223;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 172) {
                {
                this.state = 4222;
                this.match(SparkSQLParser.KW_TEMPORARY);
                }
            }

            this.state = 4225;
            this.match(SparkSQLParser.KW_TABLE);
            this.state = 4227;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 518, this.context) ) {
            case 1:
                {
                this.state = 4226;
                this.ifNotExists();
                }
                break;
            }
            this.state = 4229;
            this.tablePathCreate();
            this.state = 4231;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            do {
                {
                {
                this.state = 4230;
                this.hiveFormatCreateNoSortElement();
                }
                }
                this.state = 4233;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            } while (_la === 23 || _la === 110 || ((((_la - 212)) & ~0x1F) === 0 && ((1 << (_la - 212)) & 201326593) !== 0) || ((((_la - 274)) & ~0x1F) === 0 && ((1 << (_la - 274)) & 269484033) !== 0) || _la === 334 || _la === 367 || _la === 398 || _la === 408 || _la === 423 || _la === 453 || _la === 476);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public hiveFormatCreateNoSortElement(): HiveFormatCreateNoSortElementContext {
        let localContext = new HiveFormatCreateNoSortElementContext(this.context, this.state);
        this.enterRule(localContext, 556, SparkSQLParser.RULE_hiveFormatCreateNoSortElement);
        try {
            this.state = 4250;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 520, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4235;
                this.storedAs();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                {
                this.state = 4236;
                this.match(SparkSQLParser.KW_AS);
                this.state = 4237;
                this.queryStatement(0);
                }
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 4238;
                this.columnsBody();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 4239;
                this.hiveFormatpartitionDefinition();
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 4240;
                this.withOption();
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 4241;
                this.likeDefinition();
                }
                break;
            case 7:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 4242;
                this.someByClause();
                }
                break;
            case 8:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 4243;
                this.commentSpec();
                }
                break;
            case 9:
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 4244;
                this.rowFormatDelimted();
                }
                break;
            case 10:
                this.enterOuterAlt(localContext, 10);
                {
                this.state = 4245;
                this.fieldsTerminatedBy();
                }
                break;
            case 11:
                this.enterOuterAlt(localContext, 11);
                {
                this.state = 4246;
                this.tblProperties();
                }
                break;
            case 12:
                this.enterOuterAlt(localContext, 12);
                {
                this.state = 4247;
                this.storedAsInputformat();
                }
                break;
            case 13:
                this.enterOuterAlt(localContext, 13);
                {
                this.state = 4248;
                this.outputformat();
                }
                break;
            case 14:
                this.enterOuterAlt(localContext, 14);
                {
                this.state = 4249;
                this.rowFormatSerde();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }

    public override sempred(localContext: antlr.ParserRuleContext | null, ruleIndex: number, predIndex: number): boolean {
        switch (ruleIndex) {
        case 47:
            return this.queryStatement_sempred(localContext as QueryStatementContext, predIndex);
        case 64:
            return this.tableExpression_sempred(localContext as TableExpressionContext, predIndex);
        case 161:
            return this.booleanExpression_sempred(localContext as BooleanExpressionContext, predIndex);
        case 164:
            return this.valueExpression_sempred(localContext as ValueExpressionContext, predIndex);
        case 165:
            return this.primaryExpression_sempred(localContext as PrimaryExpressionContext, predIndex);
        }
        return true;
    }
    private queryStatement_sempred(localContext: QueryStatementContext | null, predIndex: number): boolean {
        switch (predIndex) {
        case 0:
            return this.precpred(this.context, 2);
        }
        return true;
    }
    private tableExpression_sempred(localContext: TableExpressionContext | null, predIndex: number): boolean {
        switch (predIndex) {
        case 1:
            return this.precpred(this.context, 4);
        }
        return true;
    }
    private booleanExpression_sempred(localContext: BooleanExpressionContext | null, predIndex: number): boolean {
        switch (predIndex) {
        case 2:
            return this.precpred(this.context, 3);
        case 3:
            return this.precpred(this.context, 2);
        case 4:
            return this.precpred(this.context, 1);
        }
        return true;
    }
    private valueExpression_sempred(localContext: ValueExpressionContext | null, predIndex: number): boolean {
        switch (predIndex) {
        case 5:
            return this.precpred(this.context, 6);
        case 6:
            return this.precpred(this.context, 5);
        case 7:
            return this.precpred(this.context, 4);
        case 8:
            return this.precpred(this.context, 3);
        case 9:
            return this.precpred(this.context, 2);
        case 10:
            return this.precpred(this.context, 1);
        }
        return true;
    }
    private primaryExpression_sempred(localContext: PrimaryExpressionContext | null, predIndex: number): boolean {
        switch (predIndex) {
        case 11:
            return this.precpred(this.context, 5);
        }
        return true;
    }

    public static readonly _serializedATN: number[] = [
        4,1,501,4253,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,
        72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,
        78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,
        85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,
        91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,
        98,7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,
        2,104,7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,
        7,109,2,110,7,110,2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,
        2,115,7,115,2,116,7,116,2,117,7,117,2,118,7,118,2,119,7,119,2,120,
        7,120,2,121,7,121,2,122,7,122,2,123,7,123,2,124,7,124,2,125,7,125,
        2,126,7,126,2,127,7,127,2,128,7,128,2,129,7,129,2,130,7,130,2,131,
        7,131,2,132,7,132,2,133,7,133,2,134,7,134,2,135,7,135,2,136,7,136,
        2,137,7,137,2,138,7,138,2,139,7,139,2,140,7,140,2,141,7,141,2,142,
        7,142,2,143,7,143,2,144,7,144,2,145,7,145,2,146,7,146,2,147,7,147,
        2,148,7,148,2,149,7,149,2,150,7,150,2,151,7,151,2,152,7,152,2,153,
        7,153,2,154,7,154,2,155,7,155,2,156,7,156,2,157,7,157,2,158,7,158,
        2,159,7,159,2,160,7,160,2,161,7,161,2,162,7,162,2,163,7,163,2,164,
        7,164,2,165,7,165,2,166,7,166,2,167,7,167,2,168,7,168,2,169,7,169,
        2,170,7,170,2,171,7,171,2,172,7,172,2,173,7,173,2,174,7,174,2,175,
        7,175,2,176,7,176,2,177,7,177,2,178,7,178,2,179,7,179,2,180,7,180,
        2,181,7,181,2,182,7,182,2,183,7,183,2,184,7,184,2,185,7,185,2,186,
        7,186,2,187,7,187,2,188,7,188,2,189,7,189,2,190,7,190,2,191,7,191,
        2,192,7,192,2,193,7,193,2,194,7,194,2,195,7,195,2,196,7,196,2,197,
        7,197,2,198,7,198,2,199,7,199,2,200,7,200,2,201,7,201,2,202,7,202,
        2,203,7,203,2,204,7,204,2,205,7,205,2,206,7,206,2,207,7,207,2,208,
        7,208,2,209,7,209,2,210,7,210,2,211,7,211,2,212,7,212,2,213,7,213,
        2,214,7,214,2,215,7,215,2,216,7,216,2,217,7,217,2,218,7,218,2,219,
        7,219,2,220,7,220,2,221,7,221,2,222,7,222,2,223,7,223,2,224,7,224,
        2,225,7,225,2,226,7,226,2,227,7,227,2,228,7,228,2,229,7,229,2,230,
        7,230,2,231,7,231,2,232,7,232,2,233,7,233,2,234,7,234,2,235,7,235,
        2,236,7,236,2,237,7,237,2,238,7,238,2,239,7,239,2,240,7,240,2,241,
        7,241,2,242,7,242,2,243,7,243,2,244,7,244,2,245,7,245,2,246,7,246,
        2,247,7,247,2,248,7,248,2,249,7,249,2,250,7,250,2,251,7,251,2,252,
        7,252,2,253,7,253,2,254,7,254,2,255,7,255,2,256,7,256,2,257,7,257,
        2,258,7,258,2,259,7,259,2,260,7,260,2,261,7,261,2,262,7,262,2,263,
        7,263,2,264,7,264,2,265,7,265,2,266,7,266,2,267,7,267,2,268,7,268,
        2,269,7,269,2,270,7,270,2,271,7,271,2,272,7,272,2,273,7,273,2,274,
        7,274,2,275,7,275,2,276,7,276,2,277,7,277,2,278,7,278,1,0,1,0,1,
        0,1,1,1,1,5,1,564,8,1,10,1,12,1,567,9,1,1,2,1,2,1,3,1,3,1,4,1,4,
        1,4,1,4,1,4,1,4,3,4,579,8,4,1,5,1,5,3,5,583,8,5,1,5,1,5,3,5,587,
        8,5,1,5,1,5,5,5,591,8,5,10,5,12,5,594,9,5,1,5,1,5,1,5,3,5,599,8,
        5,1,5,5,5,602,8,5,10,5,12,5,605,9,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,
        1,6,1,6,1,6,1,6,1,6,1,6,1,6,3,6,621,8,6,1,7,1,7,1,7,1,8,1,8,1,8,
        1,8,1,8,3,8,631,8,8,1,8,1,8,1,9,1,9,1,9,3,9,638,8,9,1,9,1,9,1,9,
        1,9,3,9,644,8,9,1,10,1,10,1,10,1,11,1,11,5,11,651,8,11,10,11,12,
        11,654,9,11,1,11,3,11,657,8,11,1,11,1,11,1,11,5,11,662,8,11,10,11,
        12,11,665,9,11,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,
        1,12,1,12,1,12,3,12,680,8,12,1,13,1,13,1,13,1,13,5,13,686,8,13,10,
        13,12,13,689,9,13,1,14,1,14,1,14,1,14,1,14,1,14,1,14,3,14,698,8,
        14,1,15,1,15,1,15,1,15,1,15,5,15,705,8,15,10,15,12,15,708,9,15,1,
        16,1,16,1,16,1,16,1,16,1,16,1,16,3,16,717,8,16,1,17,1,17,1,17,1,
        17,1,18,1,18,1,18,1,18,1,18,3,18,728,8,18,1,18,1,18,1,18,3,18,733,
        8,18,5,18,735,8,18,10,18,12,18,738,9,18,1,18,1,18,1,19,1,19,1,19,
        1,19,1,19,1,20,1,20,1,20,1,20,1,20,1,21,1,21,1,21,3,21,755,8,21,
        1,22,1,22,1,22,1,22,3,22,761,8,22,1,23,1,23,3,23,765,8,23,1,24,1,
        24,1,24,1,24,1,25,1,25,1,25,3,25,774,8,25,1,25,1,25,1,25,3,25,779,
        8,25,5,25,781,8,25,10,25,12,25,784,9,25,1,25,1,25,1,25,3,25,789,
        8,25,3,25,791,8,25,1,25,1,25,1,25,3,25,796,8,25,3,25,798,8,25,1,
        25,1,25,1,25,3,25,803,8,25,3,25,805,8,25,1,25,1,25,1,26,1,26,3,26,
        811,8,26,1,26,1,26,3,26,815,8,26,1,26,1,26,5,26,819,8,26,10,26,12,
        26,822,9,26,1,26,1,26,1,26,1,26,1,26,5,26,829,8,26,10,26,12,26,832,
        9,26,1,26,1,26,1,26,1,26,1,26,5,26,839,8,26,10,26,12,26,842,9,26,
        1,26,1,26,1,26,5,26,847,8,26,10,26,12,26,850,9,26,1,26,1,26,5,26,
        854,8,26,10,26,12,26,857,9,26,1,27,1,27,1,27,1,27,1,27,1,27,3,27,
        865,8,27,1,28,1,28,1,28,1,28,3,28,871,8,28,1,28,1,28,5,28,875,8,
        28,10,28,12,28,878,9,28,1,28,1,28,5,28,882,8,28,10,28,12,28,885,
        9,28,1,28,1,28,1,28,1,28,1,28,5,28,892,8,28,10,28,12,28,895,9,28,
        1,28,1,28,1,28,1,28,1,28,5,28,902,8,28,10,28,12,28,905,9,28,1,28,
        1,28,1,28,5,28,910,8,28,10,28,12,28,913,9,28,1,28,1,28,1,28,5,28,
        918,8,28,10,28,12,28,921,9,28,1,29,1,29,1,29,1,29,1,29,1,29,3,29,
        929,8,29,1,30,1,30,1,30,3,30,934,8,30,1,30,1,30,1,30,1,30,3,30,940,
        8,30,1,31,1,31,1,31,1,31,1,31,5,31,947,8,31,10,31,12,31,950,9,31,
        1,31,1,31,1,31,1,31,1,31,1,31,1,31,5,31,959,8,31,10,31,12,31,962,
        9,31,1,31,1,31,1,31,3,31,967,8,31,1,31,1,31,5,31,971,8,31,10,31,
        12,31,974,9,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,5,31,983,8,31,
        10,31,12,31,986,9,31,1,32,1,32,1,32,1,32,1,32,1,32,1,32,3,32,995,
        8,32,1,33,1,33,1,33,1,33,1,33,1,33,5,33,1003,8,33,10,33,12,33,1006,
        9,33,1,34,1,34,1,34,3,34,1011,8,34,1,35,1,35,1,35,3,35,1016,8,35,
        4,35,1018,8,35,11,35,12,35,1019,3,35,1022,8,35,1,36,1,36,3,36,1026,
        8,36,1,36,1,36,1,37,1,37,1,37,3,37,1033,8,37,1,38,1,38,3,38,1037,
        8,38,1,38,1,38,1,38,1,39,1,39,1,39,1,40,1,40,1,40,1,40,1,40,1,40,
        1,40,3,40,1052,8,40,1,41,1,41,1,41,1,41,1,42,1,42,1,42,1,42,1,43,
        1,43,1,43,1,44,3,44,1066,8,44,1,44,1,44,1,45,1,45,1,45,3,45,1073,
        8,45,1,45,1,45,3,45,1077,8,45,1,45,3,45,1080,8,45,1,45,1,45,1,45,
        1,45,1,45,1,45,1,45,1,45,3,45,1090,8,45,1,46,1,46,1,46,1,47,1,47,
        1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,3,47,1105,8,47,1,47,3,47,
        1108,8,47,1,47,3,47,1111,8,47,1,47,3,47,1114,8,47,1,47,3,47,1117,
        8,47,3,47,1119,8,47,1,47,1,47,1,47,3,47,1124,8,47,1,47,1,47,3,47,
        1128,8,47,1,47,3,47,1131,8,47,1,47,3,47,1134,8,47,1,47,3,47,1137,
        8,47,5,47,1139,8,47,10,47,12,47,1142,9,47,1,48,1,48,1,48,1,48,5,
        48,1148,8,48,10,48,12,48,1151,9,48,1,49,1,49,1,49,1,49,3,49,1157,
        8,49,1,49,5,49,1160,8,49,10,49,12,49,1163,9,49,1,50,1,50,1,50,1,
        50,5,50,1169,8,50,10,50,12,50,1172,9,50,1,50,1,50,1,51,1,51,1,51,
        1,51,1,51,5,51,1181,8,51,10,51,12,51,1184,9,51,1,51,1,51,3,51,1188,
        8,51,1,51,1,51,1,51,1,51,1,51,1,52,1,52,1,53,1,53,3,53,1199,8,53,
        1,53,1,53,1,53,5,53,1204,8,53,10,53,12,53,1207,9,53,1,54,1,54,1,
        54,1,54,1,54,1,55,1,55,1,55,3,55,1217,8,55,1,55,1,55,3,55,1221,8,
        55,1,55,1,55,3,55,1225,8,55,1,55,1,55,3,55,1229,8,55,1,55,1,55,3,
        55,1233,8,55,1,56,1,56,1,56,1,56,1,56,5,56,1240,8,56,10,56,12,56,
        1243,9,56,1,56,1,56,3,56,1247,8,56,1,57,1,57,1,57,1,57,1,57,5,57,
        1254,8,57,10,57,12,57,1257,9,57,3,57,1259,8,57,1,57,1,57,1,57,3,
        57,1264,8,57,1,58,1,58,3,58,1268,8,58,1,59,1,59,1,60,1,60,1,61,1,
        61,1,61,1,62,1,62,1,62,1,62,1,62,1,62,1,62,3,62,1284,8,62,1,63,1,
        63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,3,63,1298,8,
        63,1,64,1,64,1,64,1,64,5,64,1304,8,64,10,64,12,64,1307,9,64,1,64,
        1,64,1,64,3,64,1312,8,64,1,64,1,64,5,64,1316,8,64,10,64,12,64,1319,
        9,64,1,64,3,64,1322,8,64,1,64,1,64,1,64,3,64,1327,8,64,1,64,3,64,
        1330,8,64,1,64,1,64,3,64,1334,8,64,1,64,3,64,1337,8,64,1,64,3,64,
        1340,8,64,1,64,3,64,1343,8,64,1,64,1,64,1,64,3,64,1348,8,64,1,64,
        1,64,5,64,1352,8,64,10,64,12,64,1355,9,64,5,64,1357,8,64,10,64,12,
        64,1360,9,64,1,65,1,65,1,66,1,66,1,66,1,66,1,66,5,66,1369,8,66,10,
        66,12,66,1372,9,66,1,66,1,66,1,67,1,67,1,67,3,67,1379,8,67,1,67,
        1,67,3,67,1383,8,67,1,67,1,67,1,67,1,67,5,67,1389,8,67,10,67,12,
        67,1392,9,67,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,3,68,1402,8,
        68,1,68,1,68,1,68,1,68,3,68,1408,8,68,1,69,1,69,3,69,1412,8,69,1,
        70,3,70,1415,8,70,1,70,1,70,3,70,1419,8,70,1,70,1,70,1,70,1,70,3,
        70,1425,8,70,1,70,1,70,1,70,1,70,1,70,1,70,3,70,1433,8,70,1,70,1,
        70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,5,70,1444,8,70,10,70,12,70,
        1447,9,70,1,70,1,70,1,70,1,70,1,70,1,70,3,70,1455,8,70,1,71,1,71,
        1,71,1,71,3,71,1461,8,71,1,71,1,71,1,71,3,71,1466,8,71,5,71,1468,
        8,71,10,71,12,71,1471,9,71,1,71,1,71,1,71,1,71,1,71,1,71,3,71,1479,
        8,71,1,71,1,71,1,71,3,71,1484,8,71,5,71,1486,8,71,10,71,12,71,1489,
        9,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,5,71,1499,8,71,10,71,
        12,71,1502,9,71,3,71,1504,8,71,1,72,1,72,3,72,1508,8,72,1,72,1,72,
        1,72,1,72,1,72,1,73,1,73,1,73,1,73,1,73,1,73,1,73,3,73,1522,8,73,
        1,73,1,73,1,73,1,74,1,74,1,74,3,74,1530,8,74,1,75,1,75,1,75,1,75,
        5,75,1536,8,75,10,75,12,75,1539,9,75,1,75,1,75,1,76,1,76,1,76,1,
        76,1,76,1,76,1,77,1,77,1,78,1,78,1,78,5,78,1554,8,78,10,78,12,78,
        1557,9,78,1,78,3,78,1560,8,78,1,79,1,79,1,79,1,79,1,79,1,80,1,80,
        1,80,1,80,1,80,5,80,1572,8,80,10,80,12,80,1575,9,80,1,80,1,80,1,
        81,1,81,1,82,1,82,1,82,1,82,1,83,1,83,1,83,1,83,1,84,1,84,1,84,1,
        84,1,84,3,84,1594,8,84,1,85,1,85,1,85,1,85,3,85,1600,8,85,1,85,1,
        85,1,85,3,85,1605,8,85,1,85,1,85,3,85,1609,8,85,1,85,3,85,1612,8,
        85,1,85,1,85,3,85,1616,8,85,1,86,1,86,1,86,3,86,1621,8,86,1,86,1,
        86,1,86,3,86,1626,8,86,5,86,1628,8,86,10,86,12,86,1631,9,86,1,86,
        1,86,1,87,3,87,1636,8,87,1,87,3,87,1639,8,87,1,87,1,87,1,87,1,87,
        3,87,1645,8,87,1,87,1,87,1,87,1,87,3,87,1651,8,87,1,88,1,88,1,88,
        1,88,1,88,1,88,1,88,1,88,1,88,1,88,1,88,1,88,1,88,1,88,1,88,3,88,
        1668,8,88,1,89,1,89,1,90,1,90,1,90,1,90,1,90,1,91,1,91,1,91,1,91,
        1,91,1,91,1,91,5,91,1684,8,91,10,91,12,91,1687,9,91,1,91,1,91,3,
        91,1691,8,91,1,92,1,92,1,92,1,93,1,93,1,93,1,93,1,93,3,93,1701,8,
        93,1,93,1,93,1,93,1,93,1,93,1,93,3,93,1709,8,93,1,93,1,93,1,93,1,
        93,1,93,1,93,1,93,3,93,1718,8,93,1,93,1,93,1,93,1,93,3,93,1724,8,
        93,1,93,3,93,1727,8,93,1,94,1,94,1,94,1,94,3,94,1733,8,94,1,95,1,
        95,1,95,1,95,1,95,5,95,1740,8,95,10,95,12,95,1743,9,95,1,96,1,96,
        1,96,1,96,1,96,5,96,1750,8,96,10,96,12,96,1753,9,96,1,97,1,97,1,
        97,1,97,1,97,5,97,1760,8,97,10,97,12,97,1763,9,97,1,98,1,98,1,98,
        3,98,1768,8,98,1,98,1,98,5,98,1772,8,98,10,98,12,98,1775,9,98,1,
        98,3,98,1778,8,98,1,98,1,98,3,98,1782,8,98,1,99,1,99,1,99,5,99,1787,
        8,99,10,99,12,99,1790,9,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,5,
        99,1799,8,99,10,99,12,99,1802,9,99,1,99,1,99,1,99,1,99,1,99,1,99,
        1,99,5,99,1811,8,99,10,99,12,99,1814,9,99,1,99,1,99,3,99,1818,8,
        99,1,100,1,100,1,100,1,100,1,100,5,100,1825,8,100,10,100,12,100,
        1828,9,100,1,100,1,100,1,101,1,101,1,101,1,102,1,102,1,103,1,103,
        1,103,1,103,1,103,1,103,1,103,1,104,1,104,1,105,1,105,1,106,1,106,
        1,106,1,107,1,107,1,107,1,107,5,107,1855,8,107,10,107,12,107,1858,
        9,107,1,108,1,108,1,108,1,108,1,109,3,109,1865,8,109,1,109,1,109,
        3,109,1869,8,109,1,109,3,109,1872,8,109,1,109,3,109,1875,8,109,1,
        109,3,109,1878,8,109,1,109,1,109,1,110,1,110,1,110,3,110,1885,8,
        110,1,110,3,110,1888,8,110,1,110,3,110,1891,8,110,1,110,3,110,1894,
        8,110,1,110,3,110,1897,8,110,1,110,3,110,1900,8,110,1,110,3,110,
        1903,8,110,1,110,1,110,1,110,3,110,1908,8,110,1,110,3,110,1911,8,
        110,1,111,1,111,1,111,1,111,1,111,5,111,1918,8,111,10,111,12,111,
        1921,9,111,1,112,1,112,1,112,1,112,1,112,5,112,1928,8,112,10,112,
        12,112,1931,9,112,1,113,1,113,3,113,1935,8,113,1,113,1,113,3,113,
        1939,8,113,1,114,1,114,1,114,3,114,1944,8,114,1,115,1,115,1,115,
        3,115,1949,8,115,1,116,1,116,1,116,1,116,1,116,5,116,1956,8,116,
        10,116,12,116,1959,9,116,1,117,1,117,1,117,1,117,1,117,1,117,1,117,
        1,117,1,117,1,117,1,117,1,117,1,117,1,117,1,117,1,117,3,117,1977,
        8,117,1,118,1,118,1,118,1,118,5,118,1983,8,118,10,118,12,118,1986,
        9,118,1,119,1,119,1,119,4,119,1991,8,119,11,119,12,119,1992,1,119,
        1,119,3,119,1997,8,119,1,120,1,120,3,120,2001,8,120,1,121,1,121,
        1,121,1,121,1,121,1,121,1,121,1,121,3,121,2011,8,121,1,122,1,122,
        1,122,1,122,1,122,1,122,1,122,1,122,1,122,1,122,1,122,1,122,1,122,
        1,122,1,122,1,122,1,122,1,122,1,122,1,122,1,122,1,122,1,122,1,122,
        3,122,2037,8,122,1,123,1,123,1,123,1,123,5,123,2043,8,123,10,123,
        12,123,2046,9,123,1,124,1,124,1,124,1,124,1,124,1,124,1,124,1,124,
        1,124,3,124,2057,8,124,1,125,1,125,1,125,1,125,1,125,1,126,1,126,
        1,126,1,127,1,127,1,127,1,127,1,128,1,128,1,128,1,128,1,129,1,129,
        1,129,3,129,2078,8,129,1,129,1,129,1,129,3,129,2083,8,129,5,129,
        2085,8,129,10,129,12,129,2088,9,129,1,129,1,129,1,130,1,130,1,130,
        1,130,1,130,1,130,5,130,2098,8,130,10,130,12,130,2101,9,130,1,130,
        1,130,3,130,2105,8,130,1,131,1,131,3,131,2109,8,131,1,132,1,132,
        1,132,1,132,5,132,2115,8,132,10,132,12,132,2118,9,132,1,132,3,132,
        2121,8,132,1,133,1,133,1,133,3,133,2126,8,133,1,133,1,133,1,133,
        1,133,3,133,2132,8,133,1,133,3,133,2135,8,133,1,134,1,134,1,134,
        1,135,1,135,1,135,1,135,3,135,2144,8,135,1,136,1,136,1,136,3,136,
        2149,8,136,1,137,1,137,1,137,1,137,5,137,2155,8,137,10,137,12,137,
        2158,9,137,1,137,1,137,1,138,1,138,1,138,3,138,2165,8,138,1,138,
        3,138,2168,8,138,1,139,1,139,1,140,1,140,1,140,1,140,1,140,1,140,
        1,140,1,140,1,140,1,140,3,140,2182,8,140,1,140,1,140,1,140,3,140,
        2187,8,140,1,141,1,141,3,141,2191,8,141,1,141,1,141,1,141,1,141,
        1,141,1,141,1,142,1,142,1,143,1,143,1,143,1,143,5,143,2205,8,143,
        10,143,12,143,2208,9,143,1,144,1,144,1,144,1,144,5,144,2214,8,144,
        10,144,12,144,2217,9,144,1,144,1,144,1,145,1,145,1,145,1,145,1,146,
        1,146,1,146,1,146,3,146,2229,8,146,1,146,1,146,1,147,1,147,1,147,
        1,147,3,147,2237,8,147,1,147,1,147,1,148,1,148,1,148,1,148,5,148,
        2245,8,148,10,148,12,148,2248,9,148,1,148,1,148,1,149,1,149,1,149,
        1,149,1,149,1,149,1,149,1,150,1,150,1,150,1,150,1,150,1,150,1,150,
        5,150,2266,8,150,10,150,12,150,2269,9,150,1,150,1,150,1,151,1,151,
        1,151,1,151,1,151,1,151,1,151,1,151,1,151,5,151,2282,8,151,10,151,
        12,151,2285,9,151,1,151,1,151,1,152,1,152,3,152,2291,8,152,1,152,
        1,152,1,152,1,152,3,152,2297,8,152,1,152,3,152,2300,8,152,1,152,
        3,152,2303,8,152,1,153,1,153,1,153,1,154,1,154,1,154,1,154,1,154,
        3,154,2313,8,154,1,154,3,154,2316,8,154,1,155,1,155,1,156,1,156,
        1,156,1,156,3,156,2324,8,156,1,157,1,157,3,157,2328,8,157,1,158,
        1,158,1,158,3,158,2333,8,158,1,158,1,158,1,158,3,158,2338,8,158,
        5,158,2340,8,158,10,158,12,158,2343,9,158,1,158,1,158,1,159,1,159,
        1,159,3,159,2350,8,159,1,159,1,159,3,159,2354,8,159,1,159,1,159,
        3,159,2358,8,159,1,159,1,159,3,159,2362,8,159,1,159,1,159,3,159,
        2366,8,159,1,159,1,159,3,159,2370,8,159,1,159,1,159,3,159,2374,8,
        159,1,159,1,159,3,159,2378,8,159,1,159,1,159,3,159,2382,8,159,1,
        159,1,159,3,159,2386,8,159,1,159,1,159,3,159,2390,8,159,1,159,1,
        159,3,159,2394,8,159,1,159,1,159,3,159,2398,8,159,1,159,1,159,3,
        159,2402,8,159,1,159,1,159,3,159,2406,8,159,1,159,1,159,3,159,2410,
        8,159,1,159,1,159,3,159,2414,8,159,1,159,1,159,1,159,1,159,3,159,
        2420,8,159,3,159,2422,8,159,1,160,1,160,1,161,1,161,1,161,1,161,
        1,161,1,161,1,161,1,161,1,161,1,161,3,161,2436,8,161,3,161,2438,
        8,161,1,161,1,161,1,161,1,161,1,161,1,161,1,161,1,161,1,161,3,161,
        2449,8,161,1,161,5,161,2452,8,161,10,161,12,161,2455,9,161,1,162,
        3,162,2458,8,162,1,162,1,162,3,162,2462,8,162,1,162,1,162,1,162,
        1,162,1,162,3,162,2469,8,162,1,162,1,162,1,162,1,162,1,162,5,162,
        2476,8,162,10,162,12,162,2479,9,162,1,162,1,162,1,162,3,162,2484,
        8,162,1,162,1,162,1,162,1,162,1,162,1,162,1,162,1,162,1,162,1,162,
        1,162,3,162,2497,8,162,1,162,1,162,1,162,1,162,1,162,3,162,2504,
        8,162,1,162,1,162,1,162,3,162,2509,8,162,1,162,1,162,1,162,1,162,
        3,162,2515,8,162,1,162,1,162,1,162,1,162,1,162,3,162,2522,8,162,
        3,162,2524,8,162,1,163,3,163,2527,8,163,1,163,1,163,1,163,1,163,
        1,163,1,163,1,163,1,163,5,163,2537,8,163,10,163,12,163,2540,9,163,
        1,163,1,163,3,163,2544,8,163,1,163,3,163,2547,8,163,1,163,1,163,
        1,163,1,163,3,163,2553,8,163,1,163,3,163,2556,8,163,1,163,1,163,
        1,163,1,163,3,163,2562,8,163,3,163,2564,8,163,1,164,1,164,1,164,
        1,164,3,164,2570,8,164,1,164,1,164,1,164,1,164,1,164,1,164,1,164,
        1,164,1,164,1,164,1,164,1,164,1,164,1,164,1,164,1,164,1,164,1,164,
        1,164,5,164,2591,8,164,10,164,12,164,2594,9,164,1,165,1,165,1,165,
        4,165,2599,8,165,11,165,12,165,2600,1,165,1,165,3,165,2605,8,165,
        1,165,1,165,1,165,1,165,1,165,4,165,2612,8,165,11,165,12,165,2613,
        1,165,1,165,3,165,2618,8,165,1,165,1,165,1,165,1,165,1,165,1,165,
        1,165,1,165,1,165,1,165,1,165,1,165,1,165,1,165,3,165,2634,8,165,
        1,165,1,165,1,165,1,165,1,165,1,165,1,165,3,165,2643,8,165,1,165,
        1,165,1,165,1,165,1,165,1,165,1,165,1,165,1,165,1,165,1,165,1,165,
        1,165,1,165,1,165,1,165,1,165,1,165,1,165,1,165,1,165,1,165,1,165,
        5,165,2668,8,165,10,165,12,165,2671,9,165,1,165,1,165,1,165,1,165,
        1,165,3,165,2678,8,165,1,165,1,165,1,165,5,165,2683,8,165,10,165,
        12,165,2686,9,165,3,165,2688,8,165,1,165,1,165,1,165,1,165,1,165,
        1,165,1,165,1,165,1,165,1,165,1,165,1,165,3,165,2702,8,165,1,165,
        1,165,1,165,3,165,2707,8,165,1,165,1,165,1,165,1,165,1,165,1,165,
        1,165,1,165,1,165,1,165,3,165,2719,8,165,1,165,1,165,1,165,1,165,
        1,165,1,165,1,165,3,165,2728,8,165,1,165,1,165,1,165,1,165,1,165,
        5,165,2735,8,165,10,165,12,165,2738,9,165,1,166,1,166,1,166,1,166,
        3,166,2744,8,166,1,167,1,167,1,167,1,167,1,167,5,167,2751,8,167,
        10,167,12,167,2754,9,167,1,167,1,167,1,167,1,167,1,167,1,167,5,167,
        2762,8,167,10,167,12,167,2765,9,167,1,167,1,167,1,168,1,168,1,168,
        1,168,1,168,5,168,2774,8,168,10,168,12,168,2777,9,168,1,168,1,168,
        1,169,1,169,1,169,1,169,1,169,5,169,2786,8,169,10,169,12,169,2789,
        9,169,1,169,1,169,1,170,1,170,1,170,1,170,1,170,1,170,1,170,1,171,
        1,171,1,171,1,171,3,171,2804,8,171,1,172,1,172,1,173,1,173,1,173,
        3,173,2811,8,173,1,174,1,174,1,174,1,174,1,174,1,174,3,174,2819,
        8,174,1,175,1,175,1,175,1,175,1,175,1,175,1,176,1,176,1,177,1,177,
        1,177,3,177,2832,8,177,1,178,1,178,1,178,3,178,2837,8,178,1,179,
        1,179,3,179,2841,8,179,1,180,1,180,1,180,4,180,2846,8,180,11,180,
        12,180,2847,1,181,1,181,1,181,3,181,2853,8,181,1,182,1,182,1,182,
        1,182,1,182,1,183,3,183,2861,8,183,1,183,1,183,3,183,2865,8,183,
        1,184,1,184,1,185,1,185,1,186,3,186,2872,8,186,1,186,1,186,3,186,
        2876,8,186,1,187,1,187,1,187,1,188,1,188,5,188,2883,8,188,10,188,
        12,188,2886,9,188,1,189,1,189,1,189,1,189,1,190,1,190,1,190,5,190,
        2895,8,190,10,190,12,190,2898,9,190,1,191,1,191,1,191,1,191,3,191,
        2904,8,191,1,192,1,192,1,192,1,192,3,192,2910,8,192,1,193,1,193,
        1,193,1,193,1,193,1,194,1,194,1,195,1,195,1,195,1,195,1,195,1,196,
        1,196,1,197,1,197,1,198,1,198,1,199,1,199,1,200,1,200,1,201,1,201,
        1,202,1,202,1,202,5,202,2939,8,202,10,202,12,202,2942,9,202,1,203,
        1,203,3,203,2946,8,203,1,203,1,203,1,204,1,204,1,204,1,204,1,205,
        1,205,1,205,1,206,1,206,1,206,1,206,5,206,2961,8,206,10,206,12,206,
        2964,9,206,1,206,1,206,1,207,1,207,1,207,3,207,2971,8,207,1,207,
        1,207,1,208,1,208,1,208,1,208,3,208,2979,8,208,1,209,1,209,1,209,
        1,209,1,209,3,209,2986,8,209,1,210,1,210,1,210,1,210,1,210,1,210,
        1,210,1,210,1,210,1,210,3,210,2998,8,210,1,211,1,211,1,211,1,211,
        1,211,1,211,1,211,1,211,1,211,1,211,1,211,1,211,1,211,1,211,3,211,
        3014,8,211,1,212,1,212,1,212,1,212,3,212,3020,8,212,1,212,1,212,
        1,212,1,212,3,212,3026,8,212,1,212,3,212,3029,8,212,1,213,1,213,
        1,213,1,214,1,214,1,215,1,215,1,216,1,216,1,217,1,217,1,218,1,218,
        1,219,1,219,1,220,1,220,1,221,1,221,1,222,1,222,1,223,1,223,1,223,
        1,223,3,223,3056,8,223,1,223,1,223,1,224,1,224,1,224,3,224,3063,
        8,224,1,224,3,224,3066,8,224,1,224,3,224,3069,8,224,1,224,3,224,
        3072,8,224,1,224,1,224,1,224,3,224,3077,8,224,1,224,3,224,3080,8,
        224,1,224,3,224,3083,8,224,1,224,3,224,3086,8,224,1,224,1,224,1,
        224,1,224,1,224,1,224,1,224,1,224,1,224,3,224,3097,8,224,1,225,1,
        225,3,225,3101,8,225,1,225,3,225,3104,8,225,1,225,1,225,1,225,3,
        225,3109,8,225,1,225,1,225,3,225,3113,8,225,1,225,3,225,3116,8,225,
        3,225,3118,8,225,1,226,1,226,1,226,3,226,3123,8,226,1,226,1,226,
        3,226,3127,8,226,1,226,1,226,3,226,3131,8,226,1,226,1,226,3,226,
        3135,8,226,1,226,1,226,3,226,3139,8,226,1,227,1,227,1,227,1,227,
        1,227,1,227,1,227,1,227,1,227,3,227,3150,8,227,1,227,3,227,3153,
        8,227,1,227,3,227,3156,8,227,1,227,3,227,3159,8,227,1,227,3,227,
        3162,8,227,1,228,1,228,1,228,1,228,1,228,1,228,1,228,1,228,1,228,
        1,228,1,228,1,228,1,228,1,228,1,228,1,228,1,228,1,228,1,228,1,228,
        1,228,1,228,1,228,1,228,1,228,1,228,1,228,1,228,1,228,1,228,1,228,
        1,228,3,228,3196,8,228,1,228,1,228,1,228,3,228,3201,8,228,3,228,
        3203,8,228,1,229,1,229,3,229,3207,8,229,1,229,3,229,3210,8,229,1,
        229,3,229,3213,8,229,1,229,1,229,1,229,1,229,3,229,3219,8,229,1,
        229,1,229,1,229,1,229,1,229,1,229,1,229,1,229,1,229,1,229,1,229,
        1,229,5,229,3233,8,229,10,229,12,229,3236,9,229,1,229,1,229,1,229,
        1,229,1,229,1,229,1,229,1,229,1,229,5,229,3247,8,229,10,229,12,229,
        3250,9,229,3,229,3252,8,229,1,229,1,229,1,229,1,229,1,229,1,229,
        1,229,1,229,1,229,5,229,3263,8,229,10,229,12,229,3266,9,229,1,229,
        1,229,1,229,1,229,1,229,1,229,1,229,1,229,5,229,3276,8,229,10,229,
        12,229,3279,9,229,1,229,1,229,1,229,1,229,1,229,1,229,1,229,5,229,
        3288,8,229,10,229,12,229,3291,9,229,1,229,1,229,1,229,3,229,3296,
        8,229,1,229,1,229,1,229,1,229,1,229,1,229,3,229,3304,8,229,1,230,
        1,230,3,230,3308,8,230,1,230,1,230,1,230,1,230,3,230,3314,8,230,
        1,230,1,230,1,230,1,230,3,230,3320,8,230,1,231,1,231,1,231,5,231,
        3325,8,231,10,231,12,231,3328,9,231,1,232,1,232,1,233,1,233,1,233,
        1,233,1,233,1,233,3,233,3338,8,233,1,234,1,234,1,234,1,234,1,234,
        5,234,3345,8,234,10,234,12,234,3348,9,234,1,235,1,235,1,235,1,235,
        1,235,1,235,1,235,1,235,1,235,1,235,3,235,3360,8,235,3,235,3362,
        8,235,1,235,3,235,3365,8,235,1,235,1,235,1,235,1,235,1,235,1,235,
        3,235,3373,8,235,1,235,3,235,3376,8,235,1,235,1,235,1,235,1,235,
        1,235,1,235,3,235,3384,8,235,1,235,1,235,3,235,3388,8,235,1,235,
        1,235,3,235,3392,8,235,1,235,1,235,1,235,1,235,3,235,3398,8,235,
        1,235,1,235,1,235,1,235,1,235,1,235,1,235,1,235,5,235,3408,8,235,
        10,235,12,235,3411,9,235,3,235,3413,8,235,1,235,1,235,3,235,3417,
        8,235,1,235,1,235,1,235,1,235,1,235,3,235,3424,8,235,1,235,1,235,
        1,235,1,235,1,235,1,235,3,235,3432,8,235,1,235,1,235,1,235,3,235,
        3437,8,235,1,236,1,236,1,236,1,236,1,236,3,236,3444,8,236,1,236,
        1,236,1,236,1,236,1,236,1,236,1,236,1,236,1,236,1,236,1,236,3,236,
        3457,8,236,3,236,3459,8,236,1,237,1,237,1,237,1,237,1,238,1,238,
        3,238,3467,8,238,1,238,1,238,3,238,3471,8,238,1,238,3,238,3474,8,
        238,1,239,1,239,3,239,3478,8,239,1,240,1,240,1,240,1,240,1,240,1,
        240,1,240,1,240,1,240,5,240,3489,8,240,10,240,12,240,3492,9,240,
        1,240,1,240,1,240,4,240,3497,8,240,11,240,12,240,3498,1,240,1,240,
        1,240,5,240,3504,8,240,10,240,12,240,3507,9,240,3,240,3509,8,240,
        1,241,1,241,1,241,1,241,1,241,5,241,3516,8,241,10,241,12,241,3519,
        9,241,3,241,3521,8,241,1,242,1,242,1,242,3,242,3526,8,242,1,242,
        3,242,3529,8,242,1,242,1,242,1,242,1,242,1,242,1,242,1,242,5,242,
        3538,8,242,10,242,12,242,3541,9,242,1,242,1,242,1,242,3,242,3546,
        8,242,1,242,3,242,3549,8,242,1,242,1,242,1,242,1,242,3,242,3555,
        8,242,1,243,1,243,1,243,1,244,1,244,1,244,1,244,1,244,1,245,1,245,
        1,245,3,245,3568,8,245,1,245,1,245,3,245,3572,8,245,1,245,1,245,
        3,245,3576,8,245,1,245,3,245,3579,8,245,1,246,1,246,1,246,3,246,
        3584,8,246,1,246,3,246,3587,8,246,1,246,3,246,3590,8,246,1,246,1,
        246,3,246,3594,8,246,1,246,1,246,3,246,3598,8,246,1,246,3,246,3601,
        8,246,1,246,1,246,1,246,1,247,1,247,1,247,3,247,3609,8,247,1,247,
        1,247,1,247,3,247,3614,8,247,1,247,1,247,3,247,3618,8,247,1,247,
        1,247,1,247,1,247,1,247,3,247,3625,8,247,1,247,1,247,1,247,1,247,
        3,247,3631,8,247,1,248,1,248,1,248,1,248,1,248,1,248,3,248,3639,
        8,248,1,249,1,249,1,249,1,249,1,249,1,249,1,249,5,249,3648,8,249,
        10,249,12,249,3651,9,249,1,249,1,249,1,249,1,249,1,249,1,249,1,249,
        1,249,3,249,3661,8,249,1,250,1,250,1,250,1,250,1,250,1,250,1,250,
        3,250,3670,8,250,1,250,1,250,1,250,1,250,1,250,1,250,1,250,1,250,
        3,250,3680,8,250,1,251,1,251,1,251,3,251,3685,8,251,1,251,1,251,
        3,251,3689,8,251,1,251,1,251,1,251,1,252,1,252,1,252,1,252,1,252,
        3,252,3699,8,252,1,252,1,252,1,252,3,252,3704,8,252,1,252,1,252,
        3,252,3708,8,252,1,252,3,252,3711,8,252,1,252,3,252,3714,8,252,1,
        252,1,252,1,252,3,252,3719,8,252,3,252,3721,8,252,1,252,1,252,1,
        252,3,252,3726,8,252,1,252,1,252,1,252,3,252,3731,8,252,5,252,3733,
        8,252,10,252,12,252,3736,9,252,1,252,1,252,3,252,3740,8,252,1,252,
        3,252,3743,8,252,1,252,1,252,3,252,3747,8,252,1,252,1,252,4,252,
        3751,8,252,11,252,12,252,3752,1,252,1,252,3,252,3757,8,252,1,252,
        1,252,1,252,1,252,1,252,5,252,3764,8,252,10,252,12,252,3767,9,252,
        1,252,1,252,1,252,1,252,1,252,1,252,1,252,1,252,1,252,1,252,1,252,
        1,252,3,252,3781,8,252,1,252,1,252,1,252,1,252,5,252,3787,8,252,
        10,252,12,252,3790,9,252,1,252,1,252,1,252,1,252,1,252,1,252,1,252,
        1,252,1,252,1,252,1,252,1,252,1,252,1,252,3,252,3806,8,252,1,252,
        1,252,1,252,1,252,1,252,5,252,3813,8,252,10,252,12,252,3816,9,252,
        1,252,1,252,1,252,1,252,1,252,1,252,1,252,1,252,1,252,1,252,1,252,
        1,252,1,252,1,252,4,252,3832,8,252,11,252,12,252,3833,1,252,1,252,
        1,252,1,252,1,252,1,252,1,252,1,252,1,252,1,252,1,252,1,252,3,252,
        3848,8,252,1,252,1,252,3,252,3852,8,252,1,253,1,253,1,253,1,253,
        3,253,3858,8,253,1,253,1,253,1,253,1,253,1,253,1,253,1,253,3,253,
        3867,8,253,1,253,3,253,3870,8,253,1,254,1,254,1,254,3,254,3875,8,
        254,1,254,1,254,1,255,1,255,3,255,3881,8,255,1,255,1,255,3,255,3885,
        8,255,1,255,1,255,3,255,3889,8,255,1,256,1,256,1,256,3,256,3894,
        8,256,1,256,1,256,3,256,3898,8,256,1,257,1,257,3,257,3902,8,257,
        1,257,1,257,3,257,3906,8,257,1,257,1,257,1,258,1,258,1,258,1,258,
        3,258,3914,8,258,1,258,1,258,3,258,3918,8,258,1,258,1,258,1,259,
        1,259,1,259,1,259,1,259,3,259,3927,8,259,1,260,1,260,1,260,1,260,
        1,261,1,261,1,261,1,261,1,261,1,261,3,261,3939,8,261,1,261,1,261,
        1,261,1,261,1,261,1,261,1,261,1,261,1,261,1,261,1,261,1,261,1,261,
        1,261,1,261,1,261,5,261,3957,8,261,10,261,12,261,3960,9,261,1,261,
        1,261,3,261,3964,8,261,1,262,1,262,1,262,1,262,1,262,1,262,1,262,
        1,262,1,262,1,262,3,262,3976,8,262,1,263,1,263,1,263,1,263,3,263,
        3982,8,263,1,263,1,263,3,263,3986,8,263,1,263,1,263,1,263,1,263,
        1,263,3,263,3993,8,263,1,264,1,264,1,264,1,264,1,264,1,264,1,264,
        1,264,1,264,1,264,5,264,4005,8,264,10,264,12,264,4008,9,264,1,264,
        1,264,1,264,1,264,1,264,1,264,1,264,5,264,4017,8,264,10,264,12,264,
        4020,9,264,1,264,1,264,1,264,1,264,1,264,1,264,1,264,1,264,1,264,
        3,264,4031,8,264,1,265,3,265,4034,8,265,1,265,1,265,3,265,4038,8,
        265,1,265,3,265,4041,8,265,1,265,1,265,1,265,1,265,1,265,3,265,4048,
        8,265,1,266,1,266,1,266,3,266,4053,8,266,1,266,1,266,3,266,4057,
        8,266,1,267,1,267,1,267,1,267,1,267,1,267,1,267,3,267,4066,8,267,
        3,267,4068,8,267,1,267,1,267,3,267,4072,8,267,1,268,1,268,1,268,
        1,268,1,268,1,269,3,269,4080,8,269,1,269,1,269,1,269,1,269,1,269,
        1,269,3,269,4088,8,269,1,269,1,269,1,269,3,269,4093,8,269,5,269,
        4095,8,269,10,269,12,269,4098,9,269,1,269,1,269,1,269,1,269,1,269,
        1,269,1,269,1,269,1,269,3,269,4109,8,269,3,269,4111,8,269,1,269,
        1,269,1,269,3,269,4116,8,269,5,269,4118,8,269,10,269,12,269,4121,
        9,269,1,269,1,269,3,269,4125,8,269,1,270,1,270,1,270,1,270,1,270,
        1,270,1,270,3,270,4134,8,270,1,270,1,270,1,271,1,271,1,271,1,272,
        1,272,1,272,1,272,1,272,1,272,1,272,4,272,4148,8,272,11,272,12,272,
        4149,1,272,1,272,1,273,1,273,1,273,1,273,1,273,1,273,4,273,4160,
        8,273,11,273,12,273,4161,1,273,1,273,1,274,1,274,1,274,3,274,4169,
        8,274,1,274,1,274,1,274,1,274,1,275,1,275,1,275,1,275,3,275,4179,
        8,275,1,275,1,275,1,275,4,275,4184,8,275,11,275,12,275,4185,1,276,
        1,276,1,276,1,276,1,276,1,276,1,276,1,276,1,276,1,276,1,276,1,276,
        1,276,1,276,1,276,1,276,1,276,1,276,1,276,1,276,1,276,1,276,1,276,
        1,276,1,276,1,276,1,276,1,276,1,276,1,276,1,276,1,276,3,276,4220,
        8,276,1,277,1,277,3,277,4224,8,277,1,277,1,277,3,277,4228,8,277,
        1,277,1,277,4,277,4232,8,277,11,277,12,277,4233,1,278,1,278,1,278,
        1,278,1,278,1,278,1,278,1,278,1,278,1,278,1,278,1,278,1,278,1,278,
        1,278,3,278,4251,8,278,1,278,0,5,94,128,322,328,330,279,0,2,4,6,
        8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,
        52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,
        96,98,100,102,104,106,108,110,112,114,116,118,120,122,124,126,128,
        130,132,134,136,138,140,142,144,146,148,150,152,154,156,158,160,
        162,164,166,168,170,172,174,176,178,180,182,184,186,188,190,192,
        194,196,198,200,202,204,206,208,210,212,214,216,218,220,222,224,
        226,228,230,232,234,236,238,240,242,244,246,248,250,252,254,256,
        258,260,262,264,266,268,270,272,274,276,278,280,282,284,286,288,
        290,292,294,296,298,300,302,304,306,308,310,312,314,316,318,320,
        322,324,326,328,330,332,334,336,338,340,342,344,346,348,350,352,
        354,356,358,360,362,364,366,368,370,372,374,376,378,380,382,384,
        386,388,390,392,394,396,398,400,402,404,406,408,410,412,414,416,
        418,420,422,424,426,428,430,432,434,436,438,440,442,444,446,448,
        450,452,454,456,458,460,462,464,466,468,470,472,474,476,478,480,
        482,484,486,488,490,492,494,496,498,500,502,504,506,508,510,512,
        514,516,518,520,522,524,526,528,530,532,534,536,538,540,542,544,
        546,548,550,552,554,556,0,61,2,0,10,10,37,37,4,0,261,261,307,307,
        345,345,400,400,2,0,298,298,461,461,2,0,54,54,84,84,2,0,8,8,11,11,
        2,0,108,108,319,319,4,0,283,283,317,317,344,344,437,437,2,0,205,
        205,271,271,2,0,69,69,139,139,2,0,274,274,371,371,5,0,254,254,291,
        291,327,327,330,331,356,356,4,0,270,270,355,355,375,375,389,389,
        2,0,386,386,399,399,5,0,252,252,298,298,312,312,333,333,394,394,
        2,0,47,47,70,70,3,0,29,29,66,66,181,181,5,0,30,30,159,160,167,167,
        173,173,360,360,2,0,253,253,397,397,3,0,66,66,155,155,181,181,2,
        0,48,48,310,310,3,0,26,26,111,111,205,205,3,0,48,48,109,109,310,
        310,3,0,62,62,105,105,197,197,3,0,222,222,259,259,357,357,11,0,13,
        13,168,168,175,175,218,219,233,233,260,260,315,316,410,410,427,427,
        432,432,448,449,2,0,453,453,455,455,4,0,262,263,275,275,293,293,
        358,358,2,0,211,211,349,349,4,0,292,292,357,357,435,435,439,439,
        2,0,213,213,418,418,2,0,205,205,209,209,2,0,334,334,395,395,2,0,
        390,390,395,395,2,0,465,465,490,491,4,0,39,39,488,488,492,492,495,
        495,2,0,490,491,493,493,16,0,12,12,90,90,133,133,157,157,175,176,
        218,218,222,222,259,259,263,263,275,275,293,293,315,316,358,358,
        410,410,427,428,432,432,1,0,490,491,1,0,499,500,2,0,499,499,501,
        501,2,0,34,34,423,423,2,0,292,292,435,435,10,0,92,92,94,94,129,129,
        198,198,261,261,307,307,345,345,348,348,400,400,456,456,17,0,19,
        19,33,33,35,35,43,43,67,67,92,95,99,100,129,129,149,149,198,199,
        202,202,261,261,307,307,345,345,348,348,400,400,456,456,6,0,205,
        205,223,223,271,271,332,332,434,434,488,488,35,0,68,68,91,91,129,
        129,198,198,204,204,211,211,215,215,231,232,240,240,242,242,249,
        250,259,259,287,287,291,291,297,297,303,303,307,307,327,327,330,
        331,333,333,345,345,348,348,355,355,369,369,375,377,380,381,386,
        386,388,389,394,394,400,400,416,417,427,431,436,436,442,442,456,
        456,24,0,6,11,13,13,15,17,19,33,35,42,44,49,51,51,53,69,71,79,81,
        86,88,88,91,100,102,129,131,132,135,147,149,156,158,162,164,164,
        166,175,177,182,184,184,186,198,200,203,338,338,2,0,37,37,269,269,
        2,0,31,31,422,422,3,0,21,21,45,45,78,78,3,0,17,17,75,75,147,148,
        2,0,16,16,31,31,2,0,171,171,194,194,2,0,296,296,309,309,2,0,419,
        419,444,444,2,0,6,6,136,136,2,0,52,52,75,75,2,0,299,299,422,422,
        3,0,76,76,122,122,144,144,2,0,15,15,141,141,3,0,287,288,321,322,
        382,383,4764,0,558,1,0,0,0,2,565,1,0,0,0,4,568,1,0,0,0,6,570,1,0,
        0,0,8,578,1,0,0,0,10,580,1,0,0,0,12,620,1,0,0,0,14,622,1,0,0,0,16,
        625,1,0,0,0,18,634,1,0,0,0,20,645,1,0,0,0,22,648,1,0,0,0,24,679,
        1,0,0,0,26,681,1,0,0,0,28,697,1,0,0,0,30,699,1,0,0,0,32,716,1,0,
        0,0,34,718,1,0,0,0,36,722,1,0,0,0,38,741,1,0,0,0,40,746,1,0,0,0,
        42,751,1,0,0,0,44,756,1,0,0,0,46,762,1,0,0,0,48,766,1,0,0,0,50,770,
        1,0,0,0,52,808,1,0,0,0,54,864,1,0,0,0,56,866,1,0,0,0,58,928,1,0,
        0,0,60,930,1,0,0,0,62,941,1,0,0,0,64,994,1,0,0,0,66,996,1,0,0,0,
        68,1007,1,0,0,0,70,1021,1,0,0,0,72,1023,1,0,0,0,74,1032,1,0,0,0,
        76,1034,1,0,0,0,78,1041,1,0,0,0,80,1044,1,0,0,0,82,1053,1,0,0,0,
        84,1057,1,0,0,0,86,1061,1,0,0,0,88,1065,1,0,0,0,90,1069,1,0,0,0,
        92,1091,1,0,0,0,94,1118,1,0,0,0,96,1143,1,0,0,0,98,1152,1,0,0,0,
        100,1164,1,0,0,0,102,1175,1,0,0,0,104,1194,1,0,0,0,106,1196,1,0,
        0,0,108,1208,1,0,0,0,110,1213,1,0,0,0,112,1234,1,0,0,0,114,1263,
        1,0,0,0,116,1267,1,0,0,0,118,1269,1,0,0,0,120,1271,1,0,0,0,122,1273,
        1,0,0,0,124,1276,1,0,0,0,126,1297,1,0,0,0,128,1329,1,0,0,0,130,1361,
        1,0,0,0,132,1363,1,0,0,0,134,1375,1,0,0,0,136,1407,1,0,0,0,138,1409,
        1,0,0,0,140,1454,1,0,0,0,142,1503,1,0,0,0,144,1507,1,0,0,0,146,1514,
        1,0,0,0,148,1526,1,0,0,0,150,1531,1,0,0,0,152,1542,1,0,0,0,154,1548,
        1,0,0,0,156,1550,1,0,0,0,158,1561,1,0,0,0,160,1566,1,0,0,0,162,1578,
        1,0,0,0,164,1580,1,0,0,0,166,1584,1,0,0,0,168,1588,1,0,0,0,170,1599,
        1,0,0,0,172,1617,1,0,0,0,174,1635,1,0,0,0,176,1667,1,0,0,0,178,1669,
        1,0,0,0,180,1671,1,0,0,0,182,1690,1,0,0,0,184,1692,1,0,0,0,186,1726,
        1,0,0,0,188,1732,1,0,0,0,190,1734,1,0,0,0,192,1744,1,0,0,0,194,1754,
        1,0,0,0,196,1764,1,0,0,0,198,1817,1,0,0,0,200,1819,1,0,0,0,202,1831,
        1,0,0,0,204,1834,1,0,0,0,206,1836,1,0,0,0,208,1843,1,0,0,0,210,1845,
        1,0,0,0,212,1847,1,0,0,0,214,1850,1,0,0,0,216,1859,1,0,0,0,218,1864,
        1,0,0,0,220,1881,1,0,0,0,222,1912,1,0,0,0,224,1922,1,0,0,0,226,1932,
        1,0,0,0,228,1940,1,0,0,0,230,1945,1,0,0,0,232,1950,1,0,0,0,234,1976,
        1,0,0,0,236,1978,1,0,0,0,238,1987,1,0,0,0,240,1998,1,0,0,0,242,2010,
        1,0,0,0,244,2036,1,0,0,0,246,2038,1,0,0,0,248,2056,1,0,0,0,250,2058,
        1,0,0,0,252,2063,1,0,0,0,254,2066,1,0,0,0,256,2070,1,0,0,0,258,2074,
        1,0,0,0,260,2104,1,0,0,0,262,2108,1,0,0,0,264,2110,1,0,0,0,266,2122,
        1,0,0,0,268,2136,1,0,0,0,270,2143,1,0,0,0,272,2148,1,0,0,0,274,2150,
        1,0,0,0,276,2161,1,0,0,0,278,2169,1,0,0,0,280,2186,1,0,0,0,282,2190,
        1,0,0,0,284,2198,1,0,0,0,286,2200,1,0,0,0,288,2209,1,0,0,0,290,2220,
        1,0,0,0,292,2224,1,0,0,0,294,2232,1,0,0,0,296,2240,1,0,0,0,298,2251,
        1,0,0,0,300,2258,1,0,0,0,302,2272,1,0,0,0,304,2302,1,0,0,0,306,2304,
        1,0,0,0,308,2307,1,0,0,0,310,2317,1,0,0,0,312,2319,1,0,0,0,314,2327,
        1,0,0,0,316,2329,1,0,0,0,318,2421,1,0,0,0,320,2423,1,0,0,0,322,2437,
        1,0,0,0,324,2523,1,0,0,0,326,2563,1,0,0,0,328,2569,1,0,0,0,330,2727,
        1,0,0,0,332,2743,1,0,0,0,334,2745,1,0,0,0,336,2768,1,0,0,0,338,2780,
        1,0,0,0,340,2792,1,0,0,0,342,2803,1,0,0,0,344,2805,1,0,0,0,346,2810,
        1,0,0,0,348,2818,1,0,0,0,350,2820,1,0,0,0,352,2826,1,0,0,0,354,2831,
        1,0,0,0,356,2833,1,0,0,0,358,2838,1,0,0,0,360,2845,1,0,0,0,362,2849,
        1,0,0,0,364,2854,1,0,0,0,366,2864,1,0,0,0,368,2866,1,0,0,0,370,2868,
        1,0,0,0,372,2871,1,0,0,0,374,2877,1,0,0,0,376,2884,1,0,0,0,378,2887,
        1,0,0,0,380,2891,1,0,0,0,382,2903,1,0,0,0,384,2909,1,0,0,0,386,2911,
        1,0,0,0,388,2916,1,0,0,0,390,2918,1,0,0,0,392,2923,1,0,0,0,394,2925,
        1,0,0,0,396,2927,1,0,0,0,398,2929,1,0,0,0,400,2931,1,0,0,0,402,2933,
        1,0,0,0,404,2935,1,0,0,0,406,2943,1,0,0,0,408,2949,1,0,0,0,410,2953,
        1,0,0,0,412,2956,1,0,0,0,414,2967,1,0,0,0,416,2978,1,0,0,0,418,2985,
        1,0,0,0,420,2997,1,0,0,0,422,3013,1,0,0,0,424,3028,1,0,0,0,426,3030,
        1,0,0,0,428,3033,1,0,0,0,430,3035,1,0,0,0,432,3037,1,0,0,0,434,3039,
        1,0,0,0,436,3041,1,0,0,0,438,3043,1,0,0,0,440,3045,1,0,0,0,442,3047,
        1,0,0,0,444,3049,1,0,0,0,446,3055,1,0,0,0,448,3096,1,0,0,0,450,3117,
        1,0,0,0,452,3119,1,0,0,0,454,3161,1,0,0,0,456,3202,1,0,0,0,458,3303,
        1,0,0,0,460,3305,1,0,0,0,462,3321,1,0,0,0,464,3329,1,0,0,0,466,3337,
        1,0,0,0,468,3339,1,0,0,0,470,3436,1,0,0,0,472,3458,1,0,0,0,474,3460,
        1,0,0,0,476,3473,1,0,0,0,478,3475,1,0,0,0,480,3508,1,0,0,0,482,3520,
        1,0,0,0,484,3554,1,0,0,0,486,3556,1,0,0,0,488,3559,1,0,0,0,490,3564,
        1,0,0,0,492,3580,1,0,0,0,494,3605,1,0,0,0,496,3632,1,0,0,0,498,3660,
        1,0,0,0,500,3662,1,0,0,0,502,3681,1,0,0,0,504,3851,1,0,0,0,506,3869,
        1,0,0,0,508,3871,1,0,0,0,510,3878,1,0,0,0,512,3890,1,0,0,0,514,3899,
        1,0,0,0,516,3909,1,0,0,0,518,3921,1,0,0,0,520,3928,1,0,0,0,522,3963,
        1,0,0,0,524,3965,1,0,0,0,526,3977,1,0,0,0,528,4030,1,0,0,0,530,4033,
        1,0,0,0,532,4056,1,0,0,0,534,4058,1,0,0,0,536,4073,1,0,0,0,538,4124,
        1,0,0,0,540,4126,1,0,0,0,542,4137,1,0,0,0,544,4140,1,0,0,0,546,4153,
        1,0,0,0,548,4165,1,0,0,0,550,4174,1,0,0,0,552,4219,1,0,0,0,554,4221,
        1,0,0,0,556,4250,1,0,0,0,558,559,3,2,1,0,559,560,5,0,0,1,560,1,1,
        0,0,0,561,564,3,446,223,0,562,564,3,4,2,0,563,561,1,0,0,0,563,562,
        1,0,0,0,564,567,1,0,0,0,565,563,1,0,0,0,565,566,1,0,0,0,566,3,1,
        0,0,0,567,565,1,0,0,0,568,569,5,481,0,0,569,5,1,0,0,0,570,571,3,
        8,4,0,571,7,1,0,0,0,572,579,3,10,5,0,573,579,3,60,30,0,574,579,3,
        62,31,0,575,579,3,52,26,0,576,579,3,56,28,0,577,579,3,18,9,0,578,
        572,1,0,0,0,578,573,1,0,0,0,578,574,1,0,0,0,578,575,1,0,0,0,578,
        576,1,0,0,0,578,577,1,0,0,0,579,9,1,0,0,0,580,582,5,251,0,0,581,
        583,5,172,0,0,582,581,1,0,0,0,582,583,1,0,0,0,583,584,1,0,0,0,584,
        586,5,422,0,0,585,587,3,408,204,0,586,585,1,0,0,0,586,587,1,0,0,
        0,587,588,1,0,0,0,588,592,3,398,199,0,589,591,3,12,6,0,590,589,1,
        0,0,0,591,594,1,0,0,0,592,590,1,0,0,0,592,593,1,0,0,0,593,598,1,
        0,0,0,594,592,1,0,0,0,595,599,3,50,25,0,596,597,5,334,0,0,597,599,
        3,400,200,0,598,595,1,0,0,0,598,596,1,0,0,0,599,603,1,0,0,0,600,
        602,3,12,6,0,601,600,1,0,0,0,602,605,1,0,0,0,603,601,1,0,0,0,603,
        604,1,0,0,0,604,11,1,0,0,0,605,603,1,0,0,0,606,621,3,256,128,0,607,
        621,3,406,203,0,608,621,3,264,132,0,609,621,3,266,133,0,610,621,
        3,188,94,0,611,621,3,34,17,0,612,621,3,42,21,0,613,621,3,36,18,0,
        614,621,3,16,8,0,615,621,3,164,82,0,616,621,3,40,20,0,617,621,3,
        268,134,0,618,621,3,14,7,0,619,621,3,20,10,0,620,606,1,0,0,0,620,
        607,1,0,0,0,620,608,1,0,0,0,620,609,1,0,0,0,620,610,1,0,0,0,620,
        611,1,0,0,0,620,612,1,0,0,0,620,613,1,0,0,0,620,614,1,0,0,0,620,
        615,1,0,0,0,620,616,1,0,0,0,620,617,1,0,0,0,620,618,1,0,0,0,620,
        619,1,0,0,0,621,13,1,0,0,0,622,623,5,89,0,0,623,624,3,70,35,0,624,
        15,1,0,0,0,625,626,5,409,0,0,626,627,5,226,0,0,627,628,5,476,0,0,
        628,630,3,382,191,0,629,631,7,0,0,0,630,629,1,0,0,0,630,631,1,0,
        0,0,631,632,1,0,0,0,632,633,5,477,0,0,633,17,1,0,0,0,634,635,5,251,
        0,0,635,637,5,422,0,0,636,638,3,408,204,0,637,636,1,0,0,0,637,638,
        1,0,0,0,638,639,1,0,0,0,639,643,3,398,199,0,640,644,3,26,13,0,641,
        644,3,30,15,0,642,644,3,22,11,0,643,640,1,0,0,0,643,641,1,0,0,0,
        643,642,1,0,0,0,644,19,1,0,0,0,645,646,5,423,0,0,646,647,3,412,206,
        0,647,21,1,0,0,0,648,652,3,268,134,0,649,651,3,24,12,0,650,649,1,
        0,0,0,651,654,1,0,0,0,652,650,1,0,0,0,652,653,1,0,0,0,653,656,1,
        0,0,0,654,652,1,0,0,0,655,657,5,212,0,0,656,655,1,0,0,0,656,657,
        1,0,0,0,657,658,1,0,0,0,658,659,3,94,47,0,659,663,1,0,0,0,660,662,
        3,24,12,0,661,660,1,0,0,0,662,665,1,0,0,0,663,661,1,0,0,0,663,664,
        1,0,0,0,664,23,1,0,0,0,665,663,1,0,0,0,666,680,3,256,128,0,667,668,
        5,105,0,0,668,680,3,412,206,0,669,680,3,20,10,0,670,680,3,188,94,
        0,671,680,3,34,17,0,672,673,5,453,0,0,673,674,3,370,185,0,674,675,
        5,478,0,0,675,676,3,94,47,0,676,677,5,477,0,0,677,680,1,0,0,0,678,
        680,3,306,153,0,679,666,1,0,0,0,679,667,1,0,0,0,679,669,1,0,0,0,
        679,670,1,0,0,0,679,671,1,0,0,0,679,672,1,0,0,0,679,678,1,0,0,0,
        680,25,1,0,0,0,681,682,3,50,25,0,682,683,3,268,134,0,683,687,1,0,
        0,0,684,686,3,28,14,0,685,684,1,0,0,0,686,689,1,0,0,0,687,685,1,
        0,0,0,687,688,1,0,0,0,688,27,1,0,0,0,689,687,1,0,0,0,690,698,3,256,
        128,0,691,692,5,105,0,0,692,698,3,412,206,0,693,698,3,20,10,0,694,
        698,3,188,94,0,695,698,3,34,17,0,696,698,3,306,153,0,697,690,1,0,
        0,0,697,691,1,0,0,0,697,693,1,0,0,0,697,694,1,0,0,0,697,695,1,0,
        0,0,697,696,1,0,0,0,698,29,1,0,0,0,699,700,3,268,134,0,700,701,5,
        212,0,0,701,702,3,94,47,0,702,706,1,0,0,0,703,705,3,32,16,0,704,
        703,1,0,0,0,705,708,1,0,0,0,706,704,1,0,0,0,706,707,1,0,0,0,707,
        31,1,0,0,0,708,706,1,0,0,0,709,717,3,256,128,0,710,711,5,105,0,0,
        711,717,3,412,206,0,712,717,3,20,10,0,713,717,3,188,94,0,714,717,
        3,34,17,0,715,717,3,306,153,0,716,709,1,0,0,0,716,710,1,0,0,0,716,
        712,1,0,0,0,716,713,1,0,0,0,716,714,1,0,0,0,716,715,1,0,0,0,717,
        33,1,0,0,0,718,719,5,319,0,0,719,720,5,499,0,0,720,721,5,225,0,0,
        721,35,1,0,0,0,722,723,5,110,0,0,723,724,5,226,0,0,724,725,5,476,
        0,0,725,727,5,501,0,0,726,728,3,344,172,0,727,726,1,0,0,0,727,728,
        1,0,0,0,728,736,1,0,0,0,729,730,5,480,0,0,730,732,5,501,0,0,731,
        733,3,344,172,0,732,731,1,0,0,0,732,733,1,0,0,0,733,735,1,0,0,0,
        734,729,1,0,0,0,735,738,1,0,0,0,736,734,1,0,0,0,736,737,1,0,0,0,
        737,739,1,0,0,0,738,736,1,0,0,0,739,740,5,477,0,0,740,37,1,0,0,0,
        741,742,5,398,0,0,742,743,5,56,0,0,743,744,5,404,0,0,744,745,3,428,
        214,0,745,39,1,0,0,0,746,747,5,294,0,0,747,748,5,425,0,0,748,749,
        5,226,0,0,749,750,3,428,214,0,750,41,1,0,0,0,751,752,5,408,0,0,752,
        754,5,212,0,0,753,755,3,382,191,0,754,753,1,0,0,0,754,755,1,0,0,
        0,755,43,1,0,0,0,756,757,5,408,0,0,757,758,5,212,0,0,758,760,5,311,
        0,0,759,761,3,382,191,0,760,759,1,0,0,0,760,761,1,0,0,0,761,45,1,
        0,0,0,762,764,5,367,0,0,763,765,3,382,191,0,764,763,1,0,0,0,764,
        765,1,0,0,0,765,47,1,0,0,0,766,767,5,398,0,0,767,768,5,56,0,0,768,
        769,5,268,0,0,769,49,1,0,0,0,770,771,5,476,0,0,771,773,3,272,136,
        0,772,774,3,306,153,0,773,772,1,0,0,0,773,774,1,0,0,0,774,782,1,
        0,0,0,775,776,5,480,0,0,776,778,3,272,136,0,777,779,3,306,153,0,
        778,777,1,0,0,0,778,779,1,0,0,0,779,781,1,0,0,0,780,775,1,0,0,0,
        781,784,1,0,0,0,782,780,1,0,0,0,782,783,1,0,0,0,783,790,1,0,0,0,
        784,782,1,0,0,0,785,786,5,480,0,0,786,788,3,280,140,0,787,789,3,
        306,153,0,788,787,1,0,0,0,788,789,1,0,0,0,789,791,1,0,0,0,790,785,
        1,0,0,0,790,791,1,0,0,0,791,797,1,0,0,0,792,793,5,480,0,0,793,795,
        3,282,141,0,794,796,3,306,153,0,795,794,1,0,0,0,795,796,1,0,0,0,
        796,798,1,0,0,0,797,792,1,0,0,0,797,798,1,0,0,0,798,804,1,0,0,0,
        799,800,5,480,0,0,800,802,3,254,127,0,801,803,3,306,153,0,802,801,
        1,0,0,0,802,803,1,0,0,0,803,805,1,0,0,0,804,799,1,0,0,0,804,805,
        1,0,0,0,805,806,1,0,0,0,806,807,5,477,0,0,807,51,1,0,0,0,808,810,
        5,251,0,0,809,811,5,172,0,0,810,809,1,0,0,0,810,811,1,0,0,0,811,
        812,1,0,0,0,812,814,5,422,0,0,813,815,3,408,204,0,814,813,1,0,0,
        0,814,815,1,0,0,0,815,816,1,0,0,0,816,820,3,398,199,0,817,819,3,
        54,27,0,818,817,1,0,0,0,819,822,1,0,0,0,820,818,1,0,0,0,820,821,
        1,0,0,0,821,823,1,0,0,0,822,820,1,0,0,0,823,824,5,398,0,0,824,825,
        5,56,0,0,825,826,5,404,0,0,826,830,3,416,208,0,827,829,3,54,27,0,
        828,827,1,0,0,0,829,832,1,0,0,0,830,828,1,0,0,0,830,831,1,0,0,0,
        831,833,1,0,0,0,832,830,1,0,0,0,833,834,5,409,0,0,834,835,5,212,
        0,0,835,836,5,311,0,0,836,840,3,416,208,0,837,839,3,54,27,0,838,
        837,1,0,0,0,839,842,1,0,0,0,840,838,1,0,0,0,840,841,1,0,0,0,841,
        843,1,0,0,0,842,840,1,0,0,0,843,844,5,367,0,0,844,848,3,416,208,
        0,845,847,3,54,27,0,846,845,1,0,0,0,847,850,1,0,0,0,848,846,1,0,
        0,0,848,849,1,0,0,0,849,851,1,0,0,0,850,848,1,0,0,0,851,855,3,20,
        10,0,852,854,3,54,27,0,853,852,1,0,0,0,854,857,1,0,0,0,855,853,1,
        0,0,0,855,856,1,0,0,0,856,53,1,0,0,0,857,855,1,0,0,0,858,865,3,50,
        25,0,859,865,3,306,153,0,860,865,3,256,128,0,861,865,3,406,203,0,
        862,865,3,264,132,0,863,865,3,266,133,0,864,858,1,0,0,0,864,859,
        1,0,0,0,864,860,1,0,0,0,864,861,1,0,0,0,864,862,1,0,0,0,864,863,
        1,0,0,0,865,55,1,0,0,0,866,867,5,251,0,0,867,868,5,289,0,0,868,870,
        5,422,0,0,869,871,3,408,204,0,870,869,1,0,0,0,870,871,1,0,0,0,871,
        872,1,0,0,0,872,876,3,398,199,0,873,875,3,58,29,0,874,873,1,0,0,
        0,875,878,1,0,0,0,876,874,1,0,0,0,876,877,1,0,0,0,877,879,1,0,0,
        0,878,876,1,0,0,0,879,883,3,50,25,0,880,882,3,58,29,0,881,880,1,
        0,0,0,882,885,1,0,0,0,883,881,1,0,0,0,883,884,1,0,0,0,884,886,1,
        0,0,0,885,883,1,0,0,0,886,887,5,398,0,0,887,888,5,56,0,0,888,889,
        5,404,0,0,889,893,3,416,208,0,890,892,3,58,29,0,891,890,1,0,0,0,
        892,895,1,0,0,0,893,891,1,0,0,0,893,894,1,0,0,0,894,896,1,0,0,0,
        895,893,1,0,0,0,896,897,5,409,0,0,897,898,5,212,0,0,898,899,5,311,
        0,0,899,903,3,416,208,0,900,902,3,58,29,0,901,900,1,0,0,0,902,905,
        1,0,0,0,903,901,1,0,0,0,903,904,1,0,0,0,904,906,1,0,0,0,905,903,
        1,0,0,0,906,907,5,367,0,0,907,911,3,416,208,0,908,910,3,58,29,0,
        909,908,1,0,0,0,910,913,1,0,0,0,911,909,1,0,0,0,911,912,1,0,0,0,
        912,914,1,0,0,0,913,911,1,0,0,0,914,915,5,89,0,0,915,919,3,70,35,
        0,916,918,3,58,29,0,917,916,1,0,0,0,918,921,1,0,0,0,919,917,1,0,
        0,0,919,920,1,0,0,0,920,57,1,0,0,0,921,919,1,0,0,0,922,929,3,306,
        153,0,923,929,3,256,128,0,924,929,3,406,203,0,925,929,3,264,132,
        0,926,929,3,266,133,0,927,929,3,20,10,0,928,922,1,0,0,0,928,923,
        1,0,0,0,928,924,1,0,0,0,928,925,1,0,0,0,928,926,1,0,0,0,928,927,
        1,0,0,0,929,59,1,0,0,0,930,931,5,251,0,0,931,933,5,422,0,0,932,934,
        3,408,204,0,933,932,1,0,0,0,933,934,1,0,0,0,934,935,1,0,0,0,935,
        936,3,398,199,0,936,939,3,406,203,0,937,938,5,212,0,0,938,940,3,
        94,47,0,939,937,1,0,0,0,939,940,1,0,0,0,940,61,1,0,0,0,941,942,5,
        251,0,0,942,943,5,457,0,0,943,944,5,422,0,0,944,948,3,398,199,0,
        945,947,3,64,32,0,946,945,1,0,0,0,947,950,1,0,0,0,948,946,1,0,0,
        0,948,949,1,0,0,0,949,951,1,0,0,0,950,948,1,0,0,0,951,952,5,476,
        0,0,952,953,5,384,0,0,953,954,5,79,0,0,954,955,5,476,0,0,955,960,
        3,382,191,0,956,957,5,480,0,0,957,959,3,382,191,0,958,956,1,0,0,
        0,959,962,1,0,0,0,960,958,1,0,0,0,960,961,1,0,0,0,961,963,1,0,0,
        0,962,960,1,0,0,0,963,966,5,477,0,0,964,965,5,354,0,0,965,967,5,
        41,0,0,966,964,1,0,0,0,966,967,1,0,0,0,967,968,1,0,0,0,968,972,5,
        477,0,0,969,971,3,64,32,0,970,969,1,0,0,0,971,974,1,0,0,0,972,970,
        1,0,0,0,972,973,1,0,0,0,973,975,1,0,0,0,974,972,1,0,0,0,975,976,
        5,458,0,0,976,977,5,469,0,0,977,978,5,318,0,0,978,979,3,382,191,
        0,979,980,7,1,0,0,980,984,1,0,0,0,981,983,3,64,32,0,982,981,1,0,
        0,0,983,986,1,0,0,0,984,982,1,0,0,0,984,985,1,0,0,0,985,63,1,0,0,
        0,986,984,1,0,0,0,987,995,3,256,128,0,988,995,3,406,203,0,989,990,
        5,459,0,0,990,991,5,469,0,0,991,995,7,2,0,0,992,993,5,212,0,0,993,
        995,3,94,47,0,994,987,1,0,0,0,994,988,1,0,0,0,994,989,1,0,0,0,994,
        992,1,0,0,0,995,65,1,0,0,0,996,997,5,445,0,0,997,998,5,74,0,0,998,
        1004,3,68,34,0,999,1000,5,480,0,0,1000,1001,5,74,0,0,1001,1003,3,
        68,34,0,1002,999,1,0,0,0,1003,1006,1,0,0,0,1004,1002,1,0,0,0,1004,
        1005,1,0,0,0,1005,67,1,0,0,0,1006,1004,1,0,0,0,1007,1010,3,70,35,
        0,1008,1009,5,473,0,0,1009,1011,5,74,0,0,1010,1008,1,0,0,0,1010,
        1011,1,0,0,0,1011,69,1,0,0,0,1012,1022,5,498,0,0,1013,1015,5,495,
        0,0,1014,1016,5,501,0,0,1015,1014,1,0,0,0,1015,1016,1,0,0,0,1016,
        1018,1,0,0,0,1017,1013,1,0,0,0,1018,1019,1,0,0,0,1019,1017,1,0,0,
        0,1019,1020,1,0,0,0,1020,1022,1,0,0,0,1021,1012,1,0,0,0,1021,1017,
        1,0,0,0,1022,71,1,0,0,0,1023,1025,5,68,0,0,1024,1026,5,354,0,0,1025,
        1024,1,0,0,0,1025,1026,1,0,0,0,1026,1027,1,0,0,0,1027,1028,5,285,
        0,0,1028,73,1,0,0,0,1029,1033,7,3,0,0,1030,1031,7,4,0,0,1031,1033,
        3,404,202,0,1032,1029,1,0,0,0,1032,1030,1,0,0,0,1033,75,1,0,0,0,
        1034,1036,5,137,0,0,1035,1037,3,404,202,0,1036,1035,1,0,0,0,1036,
        1037,1,0,0,0,1037,1038,1,0,0,0,1038,1039,5,433,0,0,1039,1040,3,404,
        202,0,1040,77,1,0,0,0,1041,1042,5,403,0,0,1042,1043,3,412,206,0,
        1043,79,1,0,0,0,1044,1045,5,6,0,0,1045,1046,5,246,0,0,1046,1047,
        3,284,142,0,1047,1048,5,384,0,0,1048,1049,5,79,0,0,1049,1051,3,316,
        158,0,1050,1052,3,86,43,0,1051,1050,1,0,0,0,1051,1052,1,0,0,0,1052,
        81,1,0,0,0,1053,1054,5,276,0,0,1054,1055,5,246,0,0,1055,1056,3,284,
        142,0,1056,83,1,0,0,0,1057,1058,5,6,0,0,1058,1059,5,438,0,0,1059,
        1060,3,316,158,0,1060,85,1,0,0,0,1061,1062,5,354,0,0,1062,1063,5,
        41,0,0,1063,87,1,0,0,0,1064,1066,5,284,0,0,1065,1064,1,0,0,0,1065,
        1066,1,0,0,0,1066,1067,1,0,0,0,1067,1068,3,90,45,0,1068,89,1,0,0,
        0,1069,1070,5,314,0,0,1070,1072,7,5,0,0,1071,1073,5,422,0,0,1072,
        1071,1,0,0,0,1072,1073,1,0,0,0,1073,1074,1,0,0,0,1074,1076,3,400,
        200,0,1075,1077,3,92,46,0,1076,1075,1,0,0,0,1076,1077,1,0,0,0,1077,
        1079,1,0,0,0,1078,1080,3,316,158,0,1079,1078,1,0,0,0,1079,1080,1,
        0,0,0,1080,1089,1,0,0,0,1081,1090,3,94,47,0,1082,1090,3,286,143,
        0,1083,1084,5,138,0,0,1084,1085,3,184,92,0,1085,1086,3,448,224,0,
        1086,1090,1,0,0,0,1087,1088,5,422,0,0,1088,1090,3,400,200,0,1089,
        1081,1,0,0,0,1089,1082,1,0,0,0,1089,1083,1,0,0,0,1089,1087,1,0,0,
        0,1090,91,1,0,0,0,1091,1092,5,371,0,0,1092,1093,3,412,206,0,1093,
        93,1,0,0,0,1094,1095,6,47,-1,0,1095,1096,3,96,48,0,1096,1097,3,94,
        47,4,1097,1119,1,0,0,0,1098,1099,5,476,0,0,1099,1100,3,94,47,0,1100,
        1101,5,477,0,0,1101,1119,1,0,0,0,1102,1105,3,106,53,0,1103,1105,
        3,448,224,0,1104,1102,1,0,0,0,1104,1103,1,0,0,0,1105,1107,1,0,0,
        0,1106,1108,3,224,112,0,1107,1106,1,0,0,0,1107,1108,1,0,0,0,1108,
        1110,1,0,0,0,1109,1111,3,222,111,0,1110,1109,1,0,0,0,1110,1111,1,
        0,0,0,1111,1113,1,0,0,0,1112,1114,3,228,114,0,1113,1112,1,0,0,0,
        1113,1114,1,0,0,0,1114,1116,1,0,0,0,1115,1117,3,230,115,0,1116,1115,
        1,0,0,0,1116,1117,1,0,0,0,1117,1119,1,0,0,0,1118,1094,1,0,0,0,1118,
        1098,1,0,0,0,1118,1104,1,0,0,0,1119,1140,1,0,0,0,1120,1121,10,2,
        0,0,1121,1123,7,6,0,0,1122,1124,7,7,0,0,1123,1122,1,0,0,0,1123,1124,
        1,0,0,0,1124,1125,1,0,0,0,1125,1127,3,94,47,0,1126,1128,3,224,112,
        0,1127,1126,1,0,0,0,1127,1128,1,0,0,0,1128,1130,1,0,0,0,1129,1131,
        3,222,111,0,1130,1129,1,0,0,0,1130,1131,1,0,0,0,1131,1133,1,0,0,
        0,1132,1134,3,228,114,0,1133,1132,1,0,0,0,1133,1134,1,0,0,0,1134,
        1136,1,0,0,0,1135,1137,3,230,115,0,1136,1135,1,0,0,0,1136,1137,1,
        0,0,0,1137,1139,1,0,0,0,1138,1120,1,0,0,0,1139,1142,1,0,0,0,1140,
        1138,1,0,0,0,1140,1141,1,0,0,0,1141,95,1,0,0,0,1142,1140,1,0,0,0,
        1143,1144,5,453,0,0,1144,1149,3,102,51,0,1145,1146,5,480,0,0,1146,
        1148,3,102,51,0,1147,1145,1,0,0,0,1148,1151,1,0,0,0,1149,1147,1,
        0,0,0,1149,1150,1,0,0,0,1150,97,1,0,0,0,1151,1149,1,0,0,0,1152,1153,
        5,447,0,0,1153,1161,3,100,50,0,1154,1157,5,480,0,0,1155,1157,3,370,
        185,0,1156,1154,1,0,0,0,1156,1155,1,0,0,0,1157,1158,1,0,0,0,1158,
        1160,3,100,50,0,1159,1156,1,0,0,0,1160,1163,1,0,0,0,1161,1159,1,
        0,0,0,1161,1162,1,0,0,0,1162,99,1,0,0,0,1163,1161,1,0,0,0,1164,1165,
        5,476,0,0,1165,1170,3,320,160,0,1166,1167,5,480,0,0,1167,1169,3,
        320,160,0,1168,1166,1,0,0,0,1169,1172,1,0,0,0,1170,1168,1,0,0,0,
        1170,1171,1,0,0,0,1171,1173,1,0,0,0,1172,1170,1,0,0,0,1173,1174,
        5,477,0,0,1174,101,1,0,0,0,1175,1187,3,104,52,0,1176,1177,5,476,
        0,0,1177,1182,3,314,157,0,1178,1179,5,480,0,0,1179,1181,3,314,157,
        0,1180,1178,1,0,0,0,1181,1184,1,0,0,0,1182,1180,1,0,0,0,1182,1183,
        1,0,0,0,1183,1185,1,0,0,0,1184,1182,1,0,0,0,1185,1186,5,477,0,0,
        1186,1188,1,0,0,0,1187,1176,1,0,0,0,1187,1188,1,0,0,0,1188,1189,
        1,0,0,0,1189,1190,5,212,0,0,1190,1191,5,476,0,0,1191,1192,3,94,47,
        0,1192,1193,5,477,0,0,1193,103,1,0,0,0,1194,1195,3,382,191,0,1195,
        105,1,0,0,0,1196,1198,5,401,0,0,1197,1199,3,434,217,0,1198,1197,
        1,0,0,0,1198,1199,1,0,0,0,1199,1200,1,0,0,0,1200,1205,3,450,225,
        0,1201,1202,5,480,0,0,1202,1204,3,450,225,0,1203,1201,1,0,0,0,1204,
        1207,1,0,0,0,1205,1203,1,0,0,0,1205,1206,1,0,0,0,1206,107,1,0,0,
        0,1207,1205,1,0,0,0,1208,1209,5,50,0,0,1209,1210,5,476,0,0,1210,
        1211,3,184,92,0,1211,1212,5,477,0,0,1212,109,1,0,0,0,1213,1216,3,
        114,57,0,1214,1215,7,8,0,0,1215,1217,5,102,0,0,1216,1214,1,0,0,0,
        1216,1217,1,0,0,0,1217,1218,1,0,0,0,1218,1220,5,368,0,0,1219,1221,
        3,402,201,0,1220,1219,1,0,0,0,1220,1221,1,0,0,0,1221,1232,1,0,0,
        0,1222,1224,5,476,0,0,1223,1225,3,112,56,0,1224,1223,1,0,0,0,1224,
        1225,1,0,0,0,1225,1226,1,0,0,0,1226,1228,3,222,111,0,1227,1229,3,
        124,62,0,1228,1227,1,0,0,0,1228,1229,1,0,0,0,1229,1230,1,0,0,0,1230,
        1231,5,477,0,0,1231,1233,1,0,0,0,1232,1222,1,0,0,0,1232,1233,1,0,
        0,0,1233,111,1,0,0,0,1234,1235,7,9,0,0,1235,1236,5,226,0,0,1236,
        1241,3,314,157,0,1237,1238,5,480,0,0,1238,1240,3,314,157,0,1239,
        1237,1,0,0,0,1240,1243,1,0,0,0,1241,1239,1,0,0,0,1241,1242,1,0,0,
        0,1242,1246,1,0,0,0,1243,1241,1,0,0,0,1244,1245,5,469,0,0,1245,1247,
        3,320,160,0,1246,1244,1,0,0,0,1246,1247,1,0,0,0,1247,113,1,0,0,0,
        1248,1249,3,116,58,0,1249,1258,5,476,0,0,1250,1255,3,348,174,0,1251,
        1252,5,480,0,0,1252,1254,3,348,174,0,1253,1251,1,0,0,0,1254,1257,
        1,0,0,0,1255,1253,1,0,0,0,1255,1256,1,0,0,0,1256,1259,1,0,0,0,1257,
        1255,1,0,0,0,1258,1250,1,0,0,0,1258,1259,1,0,0,0,1259,1260,1,0,0,
        0,1260,1261,5,477,0,0,1261,1264,1,0,0,0,1262,1264,3,330,165,0,1263,
        1248,1,0,0,0,1263,1262,1,0,0,0,1264,115,1,0,0,0,1265,1268,3,120,
        60,0,1266,1268,3,118,59,0,1267,1265,1,0,0,0,1267,1266,1,0,0,0,1268,
        117,1,0,0,0,1269,1270,7,10,0,0,1270,119,1,0,0,0,1271,1272,7,11,0,
        0,1272,121,1,0,0,0,1273,1274,5,296,0,0,1274,1275,3,128,64,0,1275,
        123,1,0,0,0,1276,1283,7,12,0,0,1277,1284,3,126,63,0,1278,1279,5,
        217,0,0,1279,1280,3,126,63,0,1280,1281,5,208,0,0,1281,1282,3,126,
        63,0,1282,1284,1,0,0,0,1283,1277,1,0,0,0,1283,1278,1,0,0,0,1284,
        125,1,0,0,0,1285,1286,5,185,0,0,1286,1298,5,117,0,0,1287,1288,3,
        320,160,0,1288,1289,5,117,0,0,1289,1298,1,0,0,0,1290,1291,5,255,
        0,0,1291,1298,5,398,0,0,1292,1293,3,320,160,0,1293,1294,5,55,0,0,
        1294,1298,1,0,0,0,1295,1296,5,185,0,0,1296,1298,5,55,0,0,1297,1285,
        1,0,0,0,1297,1287,1,0,0,0,1297,1290,1,0,0,0,1297,1292,1,0,0,0,1297,
        1295,1,0,0,0,1298,127,1,0,0,0,1299,1300,6,64,-1,0,1300,1305,3,138,
        69,0,1301,1302,5,480,0,0,1302,1304,3,138,69,0,1303,1301,1,0,0,0,
        1304,1307,1,0,0,0,1305,1303,1,0,0,0,1305,1306,1,0,0,0,1306,1330,
        1,0,0,0,1307,1305,1,0,0,0,1308,1309,3,138,69,0,1309,1311,3,136,68,
        0,1310,1312,3,370,185,0,1311,1310,1,0,0,0,1311,1312,1,0,0,0,1312,
        1330,1,0,0,0,1313,1317,3,138,69,0,1314,1316,3,134,67,0,1315,1314,
        1,0,0,0,1316,1319,1,0,0,0,1317,1315,1,0,0,0,1317,1318,1,0,0,0,1318,
        1321,1,0,0,0,1319,1317,1,0,0,0,1320,1322,3,370,185,0,1321,1320,1,
        0,0,0,1321,1322,1,0,0,0,1322,1330,1,0,0,0,1323,1330,3,98,49,0,1324,
        1326,3,130,65,0,1325,1327,3,370,185,0,1326,1325,1,0,0,0,1326,1327,
        1,0,0,0,1327,1330,1,0,0,0,1328,1330,3,158,79,0,1329,1299,1,0,0,0,
        1329,1308,1,0,0,0,1329,1313,1,0,0,0,1329,1323,1,0,0,0,1329,1324,
        1,0,0,0,1329,1328,1,0,0,0,1330,1358,1,0,0,0,1331,1333,10,4,0,0,1332,
        1334,5,350,0,0,1333,1332,1,0,0,0,1333,1334,1,0,0,0,1334,1336,1,0,
        0,0,1335,1337,7,13,0,0,1336,1335,1,0,0,0,1336,1337,1,0,0,0,1337,
        1339,1,0,0,0,1338,1340,5,366,0,0,1339,1338,1,0,0,0,1339,1340,1,0,
        0,0,1340,1342,1,0,0,0,1341,1343,5,402,0,0,1342,1341,1,0,0,0,1342,
        1343,1,0,0,0,1343,1344,1,0,0,0,1344,1345,5,325,0,0,1345,1347,3,128,
        64,0,1346,1348,3,182,91,0,1347,1346,1,0,0,0,1347,1348,1,0,0,0,1348,
        1353,1,0,0,0,1349,1350,5,480,0,0,1350,1352,3,138,69,0,1351,1349,
        1,0,0,0,1352,1355,1,0,0,0,1353,1351,1,0,0,0,1353,1354,1,0,0,0,1354,
        1357,1,0,0,0,1355,1353,1,0,0,0,1356,1331,1,0,0,0,1357,1360,1,0,0,
        0,1358,1356,1,0,0,0,1358,1359,1,0,0,0,1359,129,1,0,0,0,1360,1358,
        1,0,0,0,1361,1362,3,132,66,0,1362,131,1,0,0,0,1363,1364,5,386,0,
        0,1364,1365,5,476,0,0,1365,1370,3,320,160,0,1366,1367,5,480,0,0,
        1367,1369,3,320,160,0,1368,1366,1,0,0,0,1369,1372,1,0,0,0,1370,1368,
        1,0,0,0,1370,1371,1,0,0,0,1371,1373,1,0,0,0,1372,1370,1,0,0,0,1373,
        1374,5,477,0,0,1374,133,1,0,0,0,1375,1376,5,329,0,0,1376,1378,5,
        193,0,0,1377,1379,5,366,0,0,1378,1377,1,0,0,0,1378,1379,1,0,0,0,
        1379,1380,1,0,0,0,1380,1382,3,142,71,0,1381,1383,3,370,185,0,1382,
        1381,1,0,0,0,1382,1383,1,0,0,0,1383,1384,1,0,0,0,1384,1385,5,212,
        0,0,1385,1390,3,368,184,0,1386,1387,5,480,0,0,1387,1389,3,368,184,
        0,1388,1386,1,0,0,0,1389,1392,1,0,0,0,1390,1388,1,0,0,0,1390,1391,
        1,0,0,0,1391,135,1,0,0,0,1392,1390,1,0,0,0,1393,1394,5,379,0,0,1394,
        1395,5,476,0,0,1395,1396,3,146,73,0,1396,1397,5,477,0,0,1397,1408,
        1,0,0,0,1398,1401,5,441,0,0,1399,1400,7,14,0,0,1400,1402,5,102,0,
        0,1401,1399,1,0,0,0,1401,1402,1,0,0,0,1402,1403,1,0,0,0,1403,1404,
        5,476,0,0,1404,1405,3,144,72,0,1405,1406,5,477,0,0,1406,1408,1,0,
        0,0,1407,1393,1,0,0,0,1407,1398,1,0,0,0,1408,137,1,0,0,0,1409,1411,
        3,140,70,0,1410,1412,3,370,185,0,1411,1410,1,0,0,0,1411,1412,1,0,
        0,0,1412,139,1,0,0,0,1413,1415,5,422,0,0,1414,1413,1,0,0,0,1414,
        1415,1,0,0,0,1415,1416,1,0,0,0,1416,1418,3,400,200,0,1417,1419,3,
        152,76,0,1418,1417,1,0,0,0,1418,1419,1,0,0,0,1419,1455,1,0,0,0,1420,
        1421,5,329,0,0,1421,1424,5,422,0,0,1422,1425,3,142,71,0,1423,1425,
        3,332,166,0,1424,1422,1,0,0,0,1424,1423,1,0,0,0,1425,1455,1,0,0,
        0,1426,1427,5,329,0,0,1427,1428,5,422,0,0,1428,1429,5,287,0,0,1429,
        1432,5,476,0,0,1430,1433,3,142,71,0,1431,1433,3,332,166,0,1432,1430,
        1,0,0,0,1432,1431,1,0,0,0,1433,1434,1,0,0,0,1434,1435,5,477,0,0,
        1435,1455,1,0,0,0,1436,1437,5,329,0,0,1437,1438,5,476,0,0,1438,1439,
        3,94,47,0,1439,1440,5,477,0,0,1440,1455,1,0,0,0,1441,1445,5,476,
        0,0,1442,1444,3,94,47,0,1443,1442,1,0,0,0,1444,1447,1,0,0,0,1445,
        1443,1,0,0,0,1445,1446,1,0,0,0,1446,1448,1,0,0,0,1447,1445,1,0,0,
        0,1448,1455,5,477,0,0,1449,1450,5,440,0,0,1450,1451,5,476,0,0,1451,
        1452,3,320,160,0,1452,1453,5,477,0,0,1453,1455,1,0,0,0,1454,1414,
        1,0,0,0,1454,1420,1,0,0,0,1454,1426,1,0,0,0,1454,1436,1,0,0,0,1454,
        1441,1,0,0,0,1454,1449,1,0,0,0,1455,141,1,0,0,0,1456,1457,3,346,
        173,0,1457,1460,5,476,0,0,1458,1461,3,142,71,0,1459,1461,3,348,174,
        0,1460,1458,1,0,0,0,1460,1459,1,0,0,0,1461,1469,1,0,0,0,1462,1465,
        5,480,0,0,1463,1466,3,142,71,0,1464,1466,3,348,174,0,1465,1463,1,
        0,0,0,1465,1464,1,0,0,0,1466,1468,1,0,0,0,1467,1462,1,0,0,0,1468,
        1471,1,0,0,0,1469,1467,1,0,0,0,1469,1470,1,0,0,0,1470,1472,1,0,0,
        0,1471,1469,1,0,0,0,1472,1473,5,477,0,0,1473,1504,1,0,0,0,1474,1475,
        3,346,173,0,1475,1478,5,476,0,0,1476,1479,3,142,71,0,1477,1479,3,
        348,174,0,1478,1476,1,0,0,0,1478,1477,1,0,0,0,1479,1487,1,0,0,0,
        1480,1483,5,480,0,0,1481,1484,3,142,71,0,1482,1484,3,348,174,0,1483,
        1481,1,0,0,0,1483,1482,1,0,0,0,1484,1486,1,0,0,0,1485,1480,1,0,0,
        0,1486,1489,1,0,0,0,1487,1485,1,0,0,0,1487,1488,1,0,0,0,1488,1490,
        1,0,0,0,1489,1487,1,0,0,0,1490,1491,5,477,0,0,1491,1492,5,476,0,
        0,1492,1493,5,212,0,0,1493,1494,3,370,185,0,1494,1495,5,477,0,0,
        1495,1500,3,450,225,0,1496,1497,5,480,0,0,1497,1499,3,450,225,0,
        1498,1496,1,0,0,0,1499,1502,1,0,0,0,1500,1498,1,0,0,0,1500,1501,
        1,0,0,0,1501,1504,1,0,0,0,1502,1500,1,0,0,0,1503,1456,1,0,0,0,1503,
        1474,1,0,0,0,1504,143,1,0,0,0,1505,1508,3,314,157,0,1506,1508,3,
        316,158,0,1507,1505,1,0,0,0,1507,1506,1,0,0,0,1508,1509,1,0,0,0,
        1509,1510,5,295,0,0,1510,1511,3,314,157,0,1511,1512,5,309,0,0,1512,
        1513,3,150,75,0,1513,145,1,0,0,0,1514,1515,3,148,74,0,1515,1516,
        5,480,0,0,1516,1517,3,148,74,0,1517,1518,1,0,0,0,1518,1521,5,295,
        0,0,1519,1522,3,314,157,0,1520,1522,3,316,158,0,1521,1519,1,0,0,
        0,1521,1520,1,0,0,0,1522,1523,1,0,0,0,1523,1524,5,309,0,0,1524,1525,
        3,150,75,0,1525,147,1,0,0,0,1526,1529,3,320,160,0,1527,1528,5,212,
        0,0,1528,1530,3,368,184,0,1529,1527,1,0,0,0,1529,1530,1,0,0,0,1530,
        149,1,0,0,0,1531,1532,5,476,0,0,1532,1537,3,148,74,0,1533,1534,5,
        480,0,0,1534,1536,3,148,74,0,1535,1533,1,0,0,0,1536,1539,1,0,0,0,
        1537,1535,1,0,0,0,1537,1538,1,0,0,0,1538,1540,1,0,0,0,1539,1537,
        1,0,0,0,1540,1541,5,477,0,0,1541,151,1,0,0,0,1542,1543,5,295,0,0,
        1543,1544,5,420,0,0,1544,1545,5,212,0,0,1545,1546,5,359,0,0,1546,
        1547,3,154,77,0,1547,153,1,0,0,0,1548,1549,3,320,160,0,1549,155,
        1,0,0,0,1550,1555,3,320,160,0,1551,1552,5,480,0,0,1552,1554,3,320,
        160,0,1553,1551,1,0,0,0,1554,1557,1,0,0,0,1555,1553,1,0,0,0,1555,
        1556,1,0,0,0,1556,1559,1,0,0,0,1557,1555,1,0,0,0,1558,1560,3,370,
        185,0,1559,1558,1,0,0,0,1559,1560,1,0,0,0,1560,157,1,0,0,0,1561,
        1562,5,422,0,0,1562,1563,5,476,0,0,1563,1564,3,160,80,0,1564,1565,
        5,477,0,0,1565,159,1,0,0,0,1566,1567,3,162,81,0,1567,1568,5,476,
        0,0,1568,1573,3,176,88,0,1569,1570,5,480,0,0,1570,1572,3,176,88,
        0,1571,1569,1,0,0,0,1572,1575,1,0,0,0,1573,1571,1,0,0,0,1573,1574,
        1,0,0,0,1574,1576,1,0,0,0,1575,1573,1,0,0,0,1576,1577,5,477,0,0,
        1577,161,1,0,0,0,1578,1579,7,15,0,0,1579,163,1,0,0,0,1580,1581,3,
        174,87,0,1581,1582,3,168,84,0,1582,1583,3,174,87,0,1583,165,1,0,
        0,0,1584,1585,3,170,85,0,1585,1586,3,168,84,0,1586,1587,3,170,85,
        0,1587,167,1,0,0,0,1588,1589,5,445,0,0,1589,1590,3,428,214,0,1590,
        1593,5,212,0,0,1591,1594,3,316,158,0,1592,1594,3,274,137,0,1593,
        1591,1,0,0,0,1593,1592,1,0,0,0,1593,1594,1,0,0,0,1594,169,1,0,0,
        0,1595,1596,5,398,0,0,1596,1597,5,56,0,0,1597,1598,5,404,0,0,1598,
        1600,3,428,214,0,1599,1595,1,0,0,0,1599,1600,1,0,0,0,1600,1604,1,
        0,0,0,1601,1602,5,453,0,0,1602,1603,5,163,0,0,1603,1605,3,172,86,
        0,1604,1601,1,0,0,0,1604,1605,1,0,0,0,1605,1608,1,0,0,0,1606,1607,
        5,387,0,0,1607,1609,3,428,214,0,1608,1606,1,0,0,0,1608,1609,1,0,
        0,0,1609,1611,1,0,0,0,1610,1612,3,40,20,0,1611,1610,1,0,0,0,1611,
        1612,1,0,0,0,1612,1615,1,0,0,0,1613,1614,5,134,0,0,1614,1616,3,428,
        214,0,1615,1613,1,0,0,0,1615,1616,1,0,0,0,1616,171,1,0,0,0,1617,
        1620,5,476,0,0,1618,1621,3,414,207,0,1619,1621,3,416,208,0,1620,
        1618,1,0,0,0,1620,1619,1,0,0,0,1621,1629,1,0,0,0,1622,1625,5,480,
        0,0,1623,1626,3,414,207,0,1624,1626,3,416,208,0,1625,1623,1,0,0,
        0,1625,1624,1,0,0,0,1626,1628,1,0,0,0,1627,1622,1,0,0,0,1628,1631,
        1,0,0,0,1629,1627,1,0,0,0,1629,1630,1,0,0,0,1630,1632,1,0,0,0,1631,
        1629,1,0,0,0,1632,1633,5,477,0,0,1633,173,1,0,0,0,1634,1636,3,48,
        24,0,1635,1634,1,0,0,0,1635,1636,1,0,0,0,1636,1638,1,0,0,0,1637,
        1639,3,40,20,0,1638,1637,1,0,0,0,1638,1639,1,0,0,0,1639,1644,1,0,
        0,0,1640,1641,5,335,0,0,1641,1642,5,425,0,0,1642,1643,5,226,0,0,
        1643,1645,3,428,214,0,1644,1640,1,0,0,0,1644,1645,1,0,0,0,1645,1650,
        1,0,0,0,1646,1647,5,357,0,0,1647,1648,5,36,0,0,1648,1649,5,212,0,
        0,1649,1651,3,428,214,0,1650,1646,1,0,0,0,1650,1651,1,0,0,0,1651,
        175,1,0,0,0,1652,1653,5,422,0,0,1653,1668,3,210,105,0,1654,1668,
        3,180,90,0,1655,1668,3,356,178,0,1656,1657,5,30,0,0,1657,1658,5,
        497,0,0,1658,1659,5,422,0,0,1659,1668,3,210,105,0,1660,1661,5,173,
        0,0,1661,1662,5,497,0,0,1662,1668,3,180,90,0,1663,1664,3,178,89,
        0,1664,1665,5,497,0,0,1665,1666,3,356,178,0,1666,1668,1,0,0,0,1667,
        1652,1,0,0,0,1667,1654,1,0,0,0,1667,1655,1,0,0,0,1667,1656,1,0,0,
        0,1667,1660,1,0,0,0,1667,1663,1,0,0,0,1668,177,1,0,0,0,1669,1670,
        7,16,0,0,1670,179,1,0,0,0,1671,1672,5,38,0,0,1672,1673,5,476,0,0,
        1673,1674,3,404,202,0,1674,1675,5,477,0,0,1675,181,1,0,0,0,1676,
        1677,5,361,0,0,1677,1691,3,322,161,0,1678,1679,5,445,0,0,1679,1680,
        5,476,0,0,1680,1685,3,404,202,0,1681,1682,5,480,0,0,1682,1684,3,
        404,202,0,1683,1681,1,0,0,0,1684,1687,1,0,0,0,1685,1683,1,0,0,0,
        1685,1686,1,0,0,0,1686,1688,1,0,0,0,1687,1685,1,0,0,0,1688,1689,
        5,477,0,0,1689,1691,1,0,0,0,1690,1676,1,0,0,0,1690,1678,1,0,0,0,
        1691,183,1,0,0,0,1692,1693,5,451,0,0,1693,1694,3,322,161,0,1694,
        185,1,0,0,0,1695,1696,5,424,0,0,1696,1700,5,476,0,0,1697,1701,3,
        430,215,0,1698,1701,5,499,0,0,1699,1701,3,320,160,0,1700,1697,1,
        0,0,0,1700,1698,1,0,0,0,1700,1699,1,0,0,0,1701,1702,1,0,0,0,1702,
        1703,5,374,0,0,1703,1727,5,477,0,0,1704,1705,5,424,0,0,1705,1708,
        5,476,0,0,1706,1709,5,499,0,0,1707,1709,3,320,160,0,1708,1706,1,
        0,0,0,1708,1707,1,0,0,0,1709,1710,1,0,0,0,1710,1711,5,399,0,0,1711,
        1727,5,477,0,0,1712,1713,5,424,0,0,1713,1714,5,476,0,0,1714,1717,
        5,224,0,0,1715,1718,5,499,0,0,1716,1718,3,320,160,0,1717,1715,1,
        0,0,0,1717,1716,1,0,0,0,1718,1719,1,0,0,0,1719,1720,5,365,0,0,1720,
        1723,5,359,0,0,1721,1724,5,499,0,0,1722,1724,3,320,160,0,1723,1721,
        1,0,0,0,1723,1722,1,0,0,0,1724,1725,1,0,0,0,1725,1727,5,477,0,0,
        1726,1695,1,0,0,0,1726,1704,1,0,0,0,1726,1712,1,0,0,0,1727,187,1,
        0,0,0,1728,1733,3,192,96,0,1729,1733,3,190,95,0,1730,1733,3,194,
        97,0,1731,1733,3,196,98,0,1732,1728,1,0,0,0,1732,1729,1,0,0,0,1732,
        1730,1,0,0,0,1732,1731,1,0,0,0,1733,189,1,0,0,0,1734,1735,5,238,
        0,0,1735,1736,5,226,0,0,1736,1741,3,198,99,0,1737,1738,5,480,0,0,
        1738,1740,3,198,99,0,1739,1737,1,0,0,0,1740,1743,1,0,0,0,1741,1739,
        1,0,0,0,1741,1742,1,0,0,0,1742,191,1,0,0,0,1743,1741,1,0,0,0,1744,
        1745,5,239,0,0,1745,1746,5,226,0,0,1746,1751,3,198,99,0,1747,1748,
        5,480,0,0,1748,1750,3,198,99,0,1749,1747,1,0,0,0,1750,1753,1,0,0,
        0,1751,1749,1,0,0,0,1751,1752,1,0,0,0,1752,193,1,0,0,0,1753,1751,
        1,0,0,0,1754,1755,5,274,0,0,1755,1756,5,226,0,0,1756,1761,3,198,
        99,0,1757,1758,5,480,0,0,1758,1760,3,198,99,0,1759,1757,1,0,0,0,
        1760,1763,1,0,0,0,1761,1759,1,0,0,0,1761,1762,1,0,0,0,1762,195,1,
        0,0,0,1763,1761,1,0,0,0,1764,1765,5,302,0,0,1765,1767,5,226,0,0,
        1766,1768,3,198,99,0,1767,1766,1,0,0,0,1767,1768,1,0,0,0,1768,1773,
        1,0,0,0,1769,1770,5,480,0,0,1770,1772,3,198,99,0,1771,1769,1,0,0,
        0,1772,1775,1,0,0,0,1773,1771,1,0,0,0,1773,1774,1,0,0,0,1774,1777,
        1,0,0,0,1775,1773,1,0,0,0,1776,1778,3,200,100,0,1777,1776,1,0,0,
        0,1777,1778,1,0,0,0,1778,1781,1,0,0,0,1779,1780,5,453,0,0,1780,1782,
        3,204,102,0,1781,1779,1,0,0,0,1781,1782,1,0,0,0,1782,197,1,0,0,0,
        1783,1788,3,320,160,0,1784,1785,5,480,0,0,1785,1787,3,320,160,0,
        1786,1784,1,0,0,0,1787,1790,1,0,0,0,1788,1786,1,0,0,0,1788,1789,
        1,0,0,0,1789,1818,1,0,0,0,1790,1788,1,0,0,0,1791,1818,3,206,103,
        0,1792,1793,5,476,0,0,1793,1818,5,477,0,0,1794,1795,5,476,0,0,1795,
        1800,3,320,160,0,1796,1797,5,480,0,0,1797,1799,3,320,160,0,1798,
        1796,1,0,0,0,1799,1802,1,0,0,0,1800,1798,1,0,0,0,1800,1801,1,0,0,
        0,1801,1803,1,0,0,0,1802,1800,1,0,0,0,1803,1804,5,477,0,0,1804,1818,
        1,0,0,0,1805,1806,3,204,102,0,1806,1807,5,476,0,0,1807,1812,3,320,
        160,0,1808,1809,5,480,0,0,1809,1811,3,320,160,0,1810,1808,1,0,0,
        0,1811,1814,1,0,0,0,1812,1810,1,0,0,0,1812,1813,1,0,0,0,1813,1815,
        1,0,0,0,1814,1812,1,0,0,0,1815,1816,5,477,0,0,1816,1818,1,0,0,0,
        1817,1783,1,0,0,0,1817,1791,1,0,0,0,1817,1792,1,0,0,0,1817,1794,
        1,0,0,0,1817,1805,1,0,0,0,1818,199,1,0,0,0,1819,1820,3,202,101,0,
        1820,1821,5,476,0,0,1821,1826,3,198,99,0,1822,1823,5,480,0,0,1823,
        1825,3,198,99,0,1824,1822,1,0,0,0,1825,1828,1,0,0,0,1826,1824,1,
        0,0,0,1826,1827,1,0,0,0,1827,1829,1,0,0,0,1828,1826,1,0,0,0,1829,
        1830,5,477,0,0,1830,201,1,0,0,0,1831,1832,5,303,0,0,1832,1833,5,
        156,0,0,1833,203,1,0,0,0,1834,1835,7,17,0,0,1835,205,1,0,0,0,1836,
        1837,3,208,104,0,1837,1838,5,476,0,0,1838,1839,3,210,105,0,1839,
        1840,5,480,0,0,1840,1841,3,356,178,0,1841,1842,5,477,0,0,1842,207,
        1,0,0,0,1843,1844,7,18,0,0,1844,209,1,0,0,0,1845,1846,3,404,202,
        0,1846,211,1,0,0,0,1847,1848,5,306,0,0,1848,1849,3,322,161,0,1849,
        213,1,0,0,0,1850,1851,5,452,0,0,1851,1856,3,216,108,0,1852,1853,
        5,480,0,0,1853,1855,3,216,108,0,1854,1852,1,0,0,0,1855,1858,1,0,
        0,0,1856,1854,1,0,0,0,1856,1857,1,0,0,0,1857,215,1,0,0,0,1858,1856,
        1,0,0,0,1859,1860,3,374,187,0,1860,1861,5,212,0,0,1861,1862,3,218,
        109,0,1862,217,1,0,0,0,1863,1865,3,374,187,0,1864,1863,1,0,0,0,1864,
        1865,1,0,0,0,1865,1866,1,0,0,0,1866,1868,5,476,0,0,1867,1869,3,232,
        116,0,1868,1867,1,0,0,0,1868,1869,1,0,0,0,1869,1871,1,0,0,0,1870,
        1872,3,224,112,0,1871,1870,1,0,0,0,1871,1872,1,0,0,0,1872,1874,1,
        0,0,0,1873,1875,3,222,111,0,1874,1873,1,0,0,0,1874,1875,1,0,0,0,
        1875,1877,1,0,0,0,1876,1878,3,248,124,0,1877,1876,1,0,0,0,1877,1878,
        1,0,0,0,1878,1879,1,0,0,0,1879,1880,5,477,0,0,1880,219,1,0,0,0,1881,
        1882,5,340,0,0,1882,1884,5,476,0,0,1883,1885,3,232,116,0,1884,1883,
        1,0,0,0,1884,1885,1,0,0,0,1885,1887,1,0,0,0,1886,1888,3,224,112,
        0,1887,1886,1,0,0,0,1887,1888,1,0,0,0,1888,1890,1,0,0,0,1889,1891,
        3,222,111,0,1890,1889,1,0,0,0,1890,1891,1,0,0,0,1891,1893,1,0,0,
        0,1892,1894,3,236,118,0,1893,1892,1,0,0,0,1893,1894,1,0,0,0,1894,
        1896,1,0,0,0,1895,1897,3,242,121,0,1896,1895,1,0,0,0,1896,1897,1,
        0,0,0,1897,1899,1,0,0,0,1898,1900,3,244,122,0,1899,1898,1,0,0,0,
        1899,1900,1,0,0,0,1900,1902,1,0,0,0,1901,1903,3,238,119,0,1902,1901,
        1,0,0,0,1902,1903,1,0,0,0,1903,1904,1,0,0,0,1904,1905,3,246,123,
        0,1905,1910,5,477,0,0,1906,1908,5,212,0,0,1907,1906,1,0,0,0,1907,
        1908,1,0,0,0,1908,1909,1,0,0,0,1909,1911,3,382,191,0,1910,1907,1,
        0,0,0,1910,1911,1,0,0,0,1911,221,1,0,0,0,1912,1913,5,364,0,0,1913,
        1914,5,226,0,0,1914,1919,3,226,113,0,1915,1916,5,480,0,0,1916,1918,
        3,226,113,0,1917,1915,1,0,0,0,1918,1921,1,0,0,0,1919,1917,1,0,0,
        0,1919,1920,1,0,0,0,1920,223,1,0,0,0,1921,1919,1,0,0,0,1922,1923,
        5,415,0,0,1923,1924,5,226,0,0,1924,1929,3,226,113,0,1925,1926,5,
        480,0,0,1926,1928,3,226,113,0,1927,1925,1,0,0,0,1928,1931,1,0,0,
        0,1929,1927,1,0,0,0,1929,1930,1,0,0,0,1930,225,1,0,0,0,1931,1929,
        1,0,0,0,1932,1934,3,320,160,0,1933,1935,7,0,0,0,1934,1933,1,0,0,
        0,1934,1935,1,0,0,0,1935,1938,1,0,0,0,1936,1937,5,102,0,0,1937,1939,
        7,3,0,0,1938,1936,1,0,0,0,1938,1939,1,0,0,0,1939,227,1,0,0,0,1940,
        1943,5,336,0,0,1941,1944,5,205,0,0,1942,1944,3,320,160,0,1943,1941,
        1,0,0,0,1943,1942,1,0,0,0,1944,229,1,0,0,0,1945,1948,5,360,0,0,1946,
        1949,5,499,0,0,1947,1949,3,320,160,0,1948,1946,1,0,0,0,1948,1947,
        1,0,0,0,1949,231,1,0,0,0,1950,1951,5,371,0,0,1951,1952,5,226,0,0,
        1952,1957,3,320,160,0,1953,1954,5,480,0,0,1954,1956,3,320,160,0,
        1955,1953,1,0,0,0,1956,1959,1,0,0,0,1957,1955,1,0,0,0,1957,1958,
        1,0,0,0,1958,233,1,0,0,0,1959,1957,1,0,0,0,1960,1977,5,488,0,0,1961,
        1977,5,491,0,0,1962,1977,5,496,0,0,1963,1964,5,478,0,0,1964,1965,
        5,499,0,0,1965,1966,5,480,0,0,1966,1967,5,499,0,0,1967,1977,5,479,
        0,0,1968,1969,5,478,0,0,1969,1970,5,499,0,0,1970,1971,5,480,0,0,
        1971,1977,5,479,0,0,1972,1973,5,478,0,0,1973,1974,5,480,0,0,1974,
        1975,5,499,0,0,1975,1977,5,479,0,0,1976,1960,1,0,0,0,1976,1961,1,
        0,0,0,1976,1962,1,0,0,0,1976,1963,1,0,0,0,1976,1968,1,0,0,0,1976,
        1972,1,0,0,0,1977,235,1,0,0,0,1978,1979,5,341,0,0,1979,1984,3,450,
        225,0,1980,1981,5,480,0,0,1981,1983,3,450,225,0,1982,1980,1,0,0,
        0,1983,1986,1,0,0,0,1984,1982,1,0,0,0,1984,1985,1,0,0,0,1985,237,
        1,0,0,0,1986,1984,1,0,0,0,1987,1988,5,372,0,0,1988,1990,5,476,0,
        0,1989,1991,3,240,120,0,1990,1989,1,0,0,0,1991,1992,1,0,0,0,1992,
        1990,1,0,0,0,1992,1993,1,0,0,0,1993,1994,1,0,0,0,1994,1996,5,477,
        0,0,1995,1997,3,252,126,0,1996,1995,1,0,0,0,1996,1997,1,0,0,0,1997,
        239,1,0,0,0,1998,2000,3,388,194,0,1999,2001,3,234,117,0,2000,1999,
        1,0,0,0,2000,2001,1,0,0,0,2001,241,1,0,0,0,2002,2003,5,205,0,0,2003,
        2004,5,399,0,0,2004,2005,5,373,0,0,2005,2011,5,339,0,0,2006,2007,
        5,362,0,0,2007,2008,5,398,0,0,2008,2009,5,373,0,0,2009,2011,5,339,
        0,0,2010,2002,1,0,0,0,2010,2006,1,0,0,0,2011,243,1,0,0,0,2012,2013,
        5,8,0,0,2013,2014,5,339,0,0,2014,2015,5,407,0,0,2015,2016,5,113,
        0,0,2016,2017,5,84,0,0,2017,2037,5,398,0,0,2018,2019,5,8,0,0,2019,
        2020,5,339,0,0,2020,2021,5,407,0,0,2021,2022,5,433,0,0,2022,2023,
        5,351,0,0,2023,2037,5,398,0,0,2024,2025,5,8,0,0,2025,2026,5,339,
        0,0,2026,2027,5,407,0,0,2027,2028,5,433,0,0,2028,2029,5,84,0,0,2029,
        2037,3,388,194,0,2030,2031,5,8,0,0,2031,2032,5,339,0,0,2032,2033,
        5,407,0,0,2033,2034,5,433,0,0,2034,2035,5,54,0,0,2035,2037,3,388,
        194,0,2036,2012,1,0,0,0,2036,2018,1,0,0,0,2036,2024,1,0,0,0,2036,
        2030,1,0,0,0,2037,245,1,0,0,0,2038,2039,5,266,0,0,2039,2044,3,450,
        225,0,2040,2041,5,480,0,0,2041,2043,3,450,225,0,2042,2040,1,0,0,
        0,2043,2046,1,0,0,0,2044,2042,1,0,0,0,2044,2045,1,0,0,0,2045,247,
        1,0,0,0,2046,2044,1,0,0,0,2047,2048,5,386,0,0,2048,2049,5,217,0,
        0,2049,2050,3,356,178,0,2050,2051,3,250,125,0,2051,2057,1,0,0,0,
        2052,2053,5,399,0,0,2053,2054,5,217,0,0,2054,2055,5,499,0,0,2055,
        2057,3,250,125,0,2056,2047,1,0,0,0,2056,2052,1,0,0,0,2057,249,1,
        0,0,0,2058,2059,5,117,0,0,2059,2060,5,208,0,0,2060,2061,5,255,0,
        0,2061,2062,5,398,0,0,2062,251,1,0,0,0,2063,2064,5,454,0,0,2064,
        2065,3,356,178,0,2065,253,1,0,0,0,2066,2067,5,378,0,0,2067,2068,
        5,295,0,0,2068,2069,5,420,0,0,2069,255,1,0,0,0,2070,2071,5,110,0,
        0,2071,2072,5,226,0,0,2072,2073,3,258,129,0,2073,257,1,0,0,0,2074,
        2075,5,476,0,0,2075,2077,3,260,130,0,2076,2078,3,342,171,0,2077,
        2076,1,0,0,0,2077,2078,1,0,0,0,2078,2086,1,0,0,0,2079,2080,5,480,
        0,0,2080,2082,3,260,130,0,2081,2083,3,342,171,0,2082,2081,1,0,0,
        0,2082,2083,1,0,0,0,2083,2085,1,0,0,0,2084,2079,1,0,0,0,2085,2088,
        1,0,0,0,2086,2084,1,0,0,0,2086,2087,1,0,0,0,2087,2089,1,0,0,0,2088,
        2086,1,0,0,0,2089,2090,5,477,0,0,2090,259,1,0,0,0,2091,2105,3,354,
        177,0,2092,2093,3,382,191,0,2093,2094,5,476,0,0,2094,2099,3,262,
        131,0,2095,2096,5,480,0,0,2096,2098,3,262,131,0,2097,2095,1,0,0,
        0,2098,2101,1,0,0,0,2099,2097,1,0,0,0,2099,2100,1,0,0,0,2100,2102,
        1,0,0,0,2101,2099,1,0,0,0,2102,2103,5,477,0,0,2103,2105,1,0,0,0,
        2104,2091,1,0,0,0,2104,2092,1,0,0,0,2105,261,1,0,0,0,2106,2109,3,
        354,177,0,2107,2109,3,424,212,0,2108,2106,1,0,0,0,2108,2107,1,0,
        0,0,2109,263,1,0,0,0,2110,2111,5,334,0,0,2111,2120,3,400,200,0,2112,
        2116,5,476,0,0,2113,2115,3,270,135,0,2114,2113,1,0,0,0,2115,2118,
        1,0,0,0,2116,2114,1,0,0,0,2116,2117,1,0,0,0,2117,2119,1,0,0,0,2118,
        2116,1,0,0,0,2119,2121,5,477,0,0,2120,2112,1,0,0,0,2120,2121,1,0,
        0,0,2121,265,1,0,0,0,2122,2131,5,273,0,0,2123,2125,5,226,0,0,2124,
        2126,5,305,0,0,2125,2124,1,0,0,0,2125,2126,1,0,0,0,2126,2127,1,0,
        0,0,2127,2128,5,476,0,0,2128,2129,3,382,191,0,2129,2130,5,477,0,
        0,2130,2132,1,0,0,0,2131,2123,1,0,0,0,2131,2132,1,0,0,0,2132,2134,
        1,0,0,0,2133,2135,3,34,17,0,2134,2133,1,0,0,0,2134,2135,1,0,0,0,
        2135,267,1,0,0,0,2136,2137,5,445,0,0,2137,2138,5,501,0,0,2138,269,
        1,0,0,0,2139,2140,7,19,0,0,2140,2144,7,20,0,0,2141,2142,7,21,0,0,
        2142,2144,7,22,0,0,2143,2139,1,0,0,0,2143,2141,1,0,0,0,2144,271,
        1,0,0,0,2145,2149,3,276,138,0,2146,2149,3,308,154,0,2147,2149,3,
        312,156,0,2148,2145,1,0,0,0,2148,2146,1,0,0,0,2148,2147,1,0,0,0,
        2149,273,1,0,0,0,2150,2151,5,476,0,0,2151,2156,3,276,138,0,2152,
        2153,5,480,0,0,2153,2155,3,276,138,0,2154,2152,1,0,0,0,2155,2158,
        1,0,0,0,2156,2154,1,0,0,0,2156,2157,1,0,0,0,2157,2159,1,0,0,0,2158,
        2156,1,0,0,0,2159,2160,5,477,0,0,2160,275,1,0,0,0,2161,2162,3,314,
        157,0,2162,2164,3,318,159,0,2163,2165,3,304,152,0,2164,2163,1,0,
        0,0,2164,2165,1,0,0,0,2165,2167,1,0,0,0,2166,2168,3,306,153,0,2167,
        2166,1,0,0,0,2167,2168,1,0,0,0,2168,277,1,0,0,0,2169,2170,3,320,
        160,0,2170,279,1,0,0,0,2171,2172,5,196,0,0,2172,2173,5,295,0,0,2173,
        2174,3,320,160,0,2174,2175,5,212,0,0,2175,2176,3,320,160,0,2176,
        2187,1,0,0,0,2177,2178,5,196,0,0,2178,2181,5,295,0,0,2179,2182,3,
        404,202,0,2180,2182,3,320,160,0,2181,2179,1,0,0,0,2181,2180,1,0,
        0,0,2182,2183,1,0,0,0,2183,2184,5,212,0,0,2184,2185,3,404,202,0,
        2185,2187,1,0,0,0,2186,2171,1,0,0,0,2186,2177,1,0,0,0,2187,281,1,
        0,0,0,2188,2189,5,246,0,0,2189,2191,3,284,142,0,2190,2188,1,0,0,
        0,2190,2191,1,0,0,0,2191,2192,1,0,0,0,2192,2193,5,384,0,0,2193,2194,
        5,79,0,0,2194,2195,3,316,158,0,2195,2196,5,354,0,0,2196,2197,5,41,
        0,0,2197,283,1,0,0,0,2198,2199,3,382,191,0,2199,285,1,0,0,0,2200,
        2201,5,447,0,0,2201,2206,3,288,144,0,2202,2203,5,480,0,0,2203,2205,
        3,288,144,0,2204,2202,1,0,0,0,2205,2208,1,0,0,0,2206,2204,1,0,0,
        0,2206,2207,1,0,0,0,2207,287,1,0,0,0,2208,2206,1,0,0,0,2209,2210,
        5,476,0,0,2210,2215,3,424,212,0,2211,2212,5,480,0,0,2212,2214,3,
        424,212,0,2213,2211,1,0,0,0,2214,2217,1,0,0,0,2215,2213,1,0,0,0,
        2215,2216,1,0,0,0,2216,2218,1,0,0,0,2217,2215,1,0,0,0,2218,2219,
        5,477,0,0,2219,289,1,0,0,0,2220,2221,5,476,0,0,2221,2222,3,430,215,
        0,2222,2223,5,477,0,0,2223,291,1,0,0,0,2224,2225,5,476,0,0,2225,
        2228,3,430,215,0,2226,2227,5,480,0,0,2227,2229,3,430,215,0,2228,
        2226,1,0,0,0,2228,2229,1,0,0,0,2229,2230,1,0,0,0,2230,2231,5,477,
        0,0,2231,293,1,0,0,0,2232,2233,5,476,0,0,2233,2236,3,428,214,0,2234,
        2235,5,480,0,0,2235,2237,3,428,214,0,2236,2234,1,0,0,0,2236,2237,
        1,0,0,0,2237,2238,1,0,0,0,2238,2239,5,477,0,0,2239,295,1,0,0,0,2240,
        2241,5,471,0,0,2241,2246,3,318,159,0,2242,2243,5,480,0,0,2243,2245,
        3,318,159,0,2244,2242,1,0,0,0,2245,2248,1,0,0,0,2246,2244,1,0,0,
        0,2246,2247,1,0,0,0,2247,2249,1,0,0,0,2248,2246,1,0,0,0,2249,2250,
        5,470,0,0,2250,297,1,0,0,0,2251,2252,5,471,0,0,2252,2253,3,318,159,
        0,2253,2254,5,480,0,0,2254,2255,3,318,159,0,2255,2256,1,0,0,0,2256,
        2257,5,470,0,0,2257,299,1,0,0,0,2258,2259,5,471,0,0,2259,2260,3,
        314,157,0,2260,2267,3,318,159,0,2261,2262,5,480,0,0,2262,2263,3,
        314,157,0,2263,2264,3,318,159,0,2264,2266,1,0,0,0,2265,2261,1,0,
        0,0,2266,2269,1,0,0,0,2267,2265,1,0,0,0,2267,2268,1,0,0,0,2268,2270,
        1,0,0,0,2269,2267,1,0,0,0,2270,2271,5,470,0,0,2271,301,1,0,0,0,2272,
        2273,5,471,0,0,2273,2274,3,314,157,0,2274,2275,5,487,0,0,2275,2283,
        3,318,159,0,2276,2277,5,480,0,0,2277,2278,3,314,157,0,2278,2279,
        5,487,0,0,2279,2280,3,318,159,0,2280,2282,1,0,0,0,2281,2276,1,0,
        0,0,2282,2285,1,0,0,0,2283,2281,1,0,0,0,2283,2284,1,0,0,0,2284,2286,
        1,0,0,0,2285,2283,1,0,0,0,2286,2287,5,470,0,0,2287,303,1,0,0,0,2288,
        2289,5,246,0,0,2289,2291,3,284,142,0,2290,2288,1,0,0,0,2290,2291,
        1,0,0,0,2291,2292,1,0,0,0,2292,2293,5,384,0,0,2293,2296,5,79,0,0,
        2294,2295,5,354,0,0,2295,2297,5,41,0,0,2296,2294,1,0,0,0,2296,2297,
        1,0,0,0,2297,2303,1,0,0,0,2298,2300,5,354,0,0,2299,2298,1,0,0,0,
        2299,2300,1,0,0,0,2300,2301,1,0,0,0,2301,2303,5,357,0,0,2302,2290,
        1,0,0,0,2302,2299,1,0,0,0,2303,305,1,0,0,0,2304,2305,5,23,0,0,2305,
        2306,3,418,209,0,2306,307,1,0,0,0,2307,2308,3,314,157,0,2308,2309,
        3,318,159,0,2309,2312,5,343,0,0,2310,2311,5,296,0,0,2311,2313,3,
        310,155,0,2312,2310,1,0,0,0,2312,2313,1,0,0,0,2313,2315,1,0,0,0,
        2314,2316,5,195,0,0,2315,2314,1,0,0,0,2315,2316,1,0,0,0,2316,309,
        1,0,0,0,2317,2318,5,498,0,0,2318,311,1,0,0,0,2319,2320,3,314,157,
        0,2320,2321,5,212,0,0,2321,2323,3,278,139,0,2322,2324,3,306,153,
        0,2323,2322,1,0,0,0,2323,2324,1,0,0,0,2324,313,1,0,0,0,2325,2328,
        3,404,202,0,2326,2328,3,320,160,0,2327,2325,1,0,0,0,2327,2326,1,
        0,0,0,2328,315,1,0,0,0,2329,2330,5,476,0,0,2330,2332,3,314,157,0,
        2331,2333,3,306,153,0,2332,2331,1,0,0,0,2332,2333,1,0,0,0,2333,2341,
        1,0,0,0,2334,2335,5,480,0,0,2335,2337,3,314,157,0,2336,2338,3,306,
        153,0,2337,2336,1,0,0,0,2337,2338,1,0,0,0,2338,2340,1,0,0,0,2339,
        2334,1,0,0,0,2340,2343,1,0,0,0,2341,2339,1,0,0,0,2341,2342,1,0,0,
        0,2342,2344,1,0,0,0,2343,2341,1,0,0,0,2344,2345,5,477,0,0,2345,317,
        1,0,0,0,2346,2422,7,23,0,0,2347,2349,7,24,0,0,2348,2350,3,290,145,
        0,2349,2348,1,0,0,0,2349,2350,1,0,0,0,2350,2422,1,0,0,0,2351,2353,
        5,428,0,0,2352,2354,3,290,145,0,2353,2352,1,0,0,0,2353,2354,1,0,
        0,0,2354,2361,1,0,0,0,2355,2357,7,25,0,0,2356,2358,5,337,0,0,2357,
        2356,1,0,0,0,2357,2358,1,0,0,0,2358,2359,1,0,0,0,2359,2360,5,427,
        0,0,2360,2362,5,203,0,0,2361,2355,1,0,0,0,2361,2362,1,0,0,0,2362,
        2422,1,0,0,0,2363,2365,5,429,0,0,2364,2366,3,290,145,0,2365,2364,
        1,0,0,0,2365,2366,1,0,0,0,2366,2373,1,0,0,0,2367,2369,7,25,0,0,2368,
        2370,5,337,0,0,2369,2368,1,0,0,0,2369,2370,1,0,0,0,2370,2371,1,0,
        0,0,2371,2372,5,427,0,0,2372,2374,5,203,0,0,2373,2367,1,0,0,0,2373,
        2374,1,0,0,0,2374,2422,1,0,0,0,2375,2377,5,430,0,0,2376,2378,3,290,
        145,0,2377,2376,1,0,0,0,2377,2378,1,0,0,0,2378,2385,1,0,0,0,2379,
        2381,7,25,0,0,2380,2382,5,337,0,0,2381,2380,1,0,0,0,2381,2382,1,
        0,0,0,2382,2383,1,0,0,0,2383,2384,5,427,0,0,2384,2386,5,203,0,0,
        2385,2379,1,0,0,0,2385,2386,1,0,0,0,2386,2422,1,0,0,0,2387,2389,
        5,431,0,0,2388,2390,3,290,145,0,2389,2388,1,0,0,0,2389,2390,1,0,
        0,0,2390,2397,1,0,0,0,2391,2393,7,25,0,0,2392,2394,5,337,0,0,2393,
        2392,1,0,0,0,2393,2394,1,0,0,0,2394,2395,1,0,0,0,2395,2396,5,427,
        0,0,2396,2398,5,203,0,0,2397,2391,1,0,0,0,2397,2398,1,0,0,0,2398,
        2422,1,0,0,0,2399,2401,7,26,0,0,2400,2402,3,292,146,0,2401,2400,
        1,0,0,0,2401,2402,1,0,0,0,2402,2422,1,0,0,0,2403,2405,7,27,0,0,2404,
        2406,3,296,148,0,2405,2404,1,0,0,0,2405,2406,1,0,0,0,2406,2422,1,
        0,0,0,2407,2409,5,91,0,0,2408,2410,3,298,149,0,2409,2408,1,0,0,0,
        2409,2410,1,0,0,0,2410,2422,1,0,0,0,2411,2413,5,398,0,0,2412,2414,
        3,300,150,0,2413,2412,1,0,0,0,2413,2414,1,0,0,0,2414,2422,1,0,0,
        0,2415,2416,5,414,0,0,2416,2422,3,302,151,0,2417,2419,5,131,0,0,
        2418,2420,3,294,147,0,2419,2418,1,0,0,0,2419,2420,1,0,0,0,2420,2422,
        1,0,0,0,2421,2346,1,0,0,0,2421,2347,1,0,0,0,2421,2351,1,0,0,0,2421,
        2363,1,0,0,0,2421,2375,1,0,0,0,2421,2387,1,0,0,0,2421,2399,1,0,0,
        0,2421,2403,1,0,0,0,2421,2407,1,0,0,0,2421,2411,1,0,0,0,2421,2415,
        1,0,0,0,2421,2417,1,0,0,0,2422,319,1,0,0,0,2423,2424,3,322,161,0,
        2424,321,1,0,0,0,2425,2426,6,161,-1,0,2426,2427,5,354,0,0,2427,2438,
        3,322,161,6,2428,2429,5,285,0,0,2429,2430,5,476,0,0,2430,2431,3,
        94,47,0,2431,2432,5,477,0,0,2432,2438,1,0,0,0,2433,2435,3,328,164,
        0,2434,2436,3,324,162,0,2435,2434,1,0,0,0,2435,2436,1,0,0,0,2436,
        2438,1,0,0,0,2437,2425,1,0,0,0,2437,2428,1,0,0,0,2437,2433,1,0,0,
        0,2438,2453,1,0,0,0,2439,2440,10,3,0,0,2440,2441,5,208,0,0,2441,
        2452,3,322,161,4,2442,2443,10,2,0,0,2443,2444,5,363,0,0,2444,2452,
        3,322,161,3,2445,2446,10,1,0,0,2446,2448,5,324,0,0,2447,2449,5,354,
        0,0,2448,2447,1,0,0,0,2448,2449,1,0,0,0,2449,2450,1,0,0,0,2450,2452,
        7,28,0,0,2451,2439,1,0,0,0,2451,2442,1,0,0,0,2451,2445,1,0,0,0,2452,
        2455,1,0,0,0,2453,2451,1,0,0,0,2453,2454,1,0,0,0,2454,323,1,0,0,
        0,2455,2453,1,0,0,0,2456,2458,5,354,0,0,2457,2456,1,0,0,0,2457,2458,
        1,0,0,0,2458,2459,1,0,0,0,2459,2461,5,217,0,0,2460,2462,7,29,0,0,
        2461,2460,1,0,0,0,2461,2462,1,0,0,0,2462,2463,1,0,0,0,2463,2464,
        3,328,164,0,2464,2465,5,208,0,0,2465,2466,3,328,164,0,2466,2524,
        1,0,0,0,2467,2469,5,354,0,0,2468,2467,1,0,0,0,2468,2469,1,0,0,0,
        2469,2470,1,0,0,0,2470,2471,5,309,0,0,2471,2472,5,476,0,0,2472,2477,
        3,320,160,0,2473,2474,5,480,0,0,2474,2476,3,320,160,0,2475,2473,
        1,0,0,0,2476,2479,1,0,0,0,2477,2475,1,0,0,0,2477,2478,1,0,0,0,2478,
        2480,1,0,0,0,2479,2477,1,0,0,0,2480,2481,5,477,0,0,2481,2524,1,0,
        0,0,2482,2484,5,354,0,0,2483,2482,1,0,0,0,2483,2484,1,0,0,0,2484,
        2485,1,0,0,0,2485,2486,5,309,0,0,2486,2487,5,476,0,0,2487,2488,3,
        94,47,0,2488,2489,5,477,0,0,2489,2524,1,0,0,0,2490,2491,5,285,0,
        0,2491,2492,5,476,0,0,2492,2493,3,94,47,0,2493,2494,5,477,0,0,2494,
        2524,1,0,0,0,2495,2497,5,354,0,0,2496,2495,1,0,0,0,2496,2497,1,0,
        0,0,2497,2498,1,0,0,0,2498,2499,5,395,0,0,2499,2524,3,328,164,0,
        2500,2524,3,326,163,0,2501,2503,5,324,0,0,2502,2504,5,354,0,0,2503,
        2502,1,0,0,0,2503,2504,1,0,0,0,2504,2505,1,0,0,0,2505,2524,7,28,
        0,0,2506,2508,5,324,0,0,2507,2509,5,354,0,0,2508,2507,1,0,0,0,2508,
        2509,1,0,0,0,2509,2510,1,0,0,0,2510,2511,5,271,0,0,2511,2512,5,296,
        0,0,2512,2524,3,328,164,0,2513,2515,5,354,0,0,2514,2513,1,0,0,0,
        2514,2515,1,0,0,0,2515,2516,1,0,0,0,2516,2517,5,406,0,0,2517,2518,
        5,433,0,0,2518,2521,3,328,164,0,2519,2520,5,281,0,0,2520,2522,3,
        428,214,0,2521,2519,1,0,0,0,2521,2522,1,0,0,0,2522,2524,1,0,0,0,
        2523,2457,1,0,0,0,2523,2468,1,0,0,0,2523,2483,1,0,0,0,2523,2490,
        1,0,0,0,2523,2496,1,0,0,0,2523,2500,1,0,0,0,2523,2501,1,0,0,0,2523,
        2506,1,0,0,0,2523,2514,1,0,0,0,2524,325,1,0,0,0,2525,2527,5,354,
        0,0,2526,2525,1,0,0,0,2526,2527,1,0,0,0,2527,2528,1,0,0,0,2528,2529,
        5,334,0,0,2529,2543,7,30,0,0,2530,2531,5,476,0,0,2531,2544,5,477,
        0,0,2532,2533,5,476,0,0,2533,2538,3,320,160,0,2534,2535,5,480,0,
        0,2535,2537,3,320,160,0,2536,2534,1,0,0,0,2537,2540,1,0,0,0,2538,
        2536,1,0,0,0,2538,2539,1,0,0,0,2539,2541,1,0,0,0,2540,2538,1,0,0,
        0,2541,2542,5,477,0,0,2542,2544,1,0,0,0,2543,2530,1,0,0,0,2543,2532,
        1,0,0,0,2544,2564,1,0,0,0,2545,2547,5,354,0,0,2546,2545,1,0,0,0,
        2546,2547,1,0,0,0,2547,2548,1,0,0,0,2548,2549,7,31,0,0,2549,2552,
        3,328,164,0,2550,2551,5,281,0,0,2551,2553,3,428,214,0,2552,2550,
        1,0,0,0,2552,2553,1,0,0,0,2553,2564,1,0,0,0,2554,2556,5,354,0,0,
        2555,2554,1,0,0,0,2555,2556,1,0,0,0,2556,2557,1,0,0,0,2557,2558,
        7,32,0,0,2558,2561,3,428,214,0,2559,2560,5,281,0,0,2560,2562,3,428,
        214,0,2561,2559,1,0,0,0,2561,2562,1,0,0,0,2562,2564,1,0,0,0,2563,
        2526,1,0,0,0,2563,2546,1,0,0,0,2563,2555,1,0,0,0,2564,327,1,0,0,
        0,2565,2566,6,164,-1,0,2566,2570,3,330,165,0,2567,2568,7,33,0,0,
        2568,2570,3,328,164,7,2569,2565,1,0,0,0,2569,2567,1,0,0,0,2570,2592,
        1,0,0,0,2571,2572,10,6,0,0,2572,2573,7,34,0,0,2573,2591,3,328,164,
        7,2574,2575,10,5,0,0,2575,2576,7,35,0,0,2576,2591,3,328,164,6,2577,
        2578,10,4,0,0,2578,2579,5,467,0,0,2579,2591,3,328,164,5,2580,2581,
        10,3,0,0,2581,2582,5,468,0,0,2582,2591,3,328,164,4,2583,2584,10,
        2,0,0,2584,2585,5,466,0,0,2585,2591,3,328,164,3,2586,2587,10,1,0,
        0,2587,2588,3,422,211,0,2588,2589,3,328,164,2,2589,2591,1,0,0,0,
        2590,2571,1,0,0,0,2590,2574,1,0,0,0,2590,2577,1,0,0,0,2590,2580,
        1,0,0,0,2590,2583,1,0,0,0,2590,2586,1,0,0,0,2591,2594,1,0,0,0,2592,
        2590,1,0,0,0,2592,2593,1,0,0,0,2593,329,1,0,0,0,2594,2592,1,0,0,
        0,2595,2596,6,165,-1,0,2596,2598,5,230,0,0,2597,2599,3,390,195,0,
        2598,2597,1,0,0,0,2599,2600,1,0,0,0,2600,2598,1,0,0,0,2600,2601,
        1,0,0,0,2601,2604,1,0,0,0,2602,2603,5,278,0,0,2603,2605,3,320,160,
        0,2604,2602,1,0,0,0,2604,2605,1,0,0,0,2605,2606,1,0,0,0,2606,2607,
        5,279,0,0,2607,2728,1,0,0,0,2608,2609,5,230,0,0,2609,2611,3,320,
        160,0,2610,2612,3,390,195,0,2611,2610,1,0,0,0,2612,2613,1,0,0,0,
        2613,2611,1,0,0,0,2613,2614,1,0,0,0,2614,2617,1,0,0,0,2615,2616,
        5,278,0,0,2616,2618,3,320,160,0,2617,2615,1,0,0,0,2617,2618,1,0,
        0,0,2618,2619,1,0,0,0,2619,2620,5,279,0,0,2620,2728,1,0,0,0,2621,
        2622,5,231,0,0,2622,2623,5,476,0,0,2623,2624,3,320,160,0,2624,2625,
        5,212,0,0,2625,2626,3,318,159,0,2626,2627,5,477,0,0,2627,2728,1,
        0,0,0,2628,2629,5,54,0,0,2629,2630,5,476,0,0,2630,2633,3,320,160,
        0,2631,2632,5,69,0,0,2632,2634,5,102,0,0,2633,2631,1,0,0,0,2633,
        2634,1,0,0,0,2634,2635,1,0,0,0,2635,2636,5,477,0,0,2636,2728,1,0,
        0,0,2637,2638,5,84,0,0,2638,2639,5,476,0,0,2639,2642,3,320,160,0,
        2640,2641,5,69,0,0,2641,2643,5,102,0,0,2642,2640,1,0,0,0,2642,2643,
        1,0,0,0,2643,2644,1,0,0,0,2644,2645,5,477,0,0,2645,2728,1,0,0,0,
        2646,2647,5,380,0,0,2647,2648,5,476,0,0,2648,2649,3,328,164,0,2649,
        2650,5,309,0,0,2650,2651,3,328,164,0,2651,2652,5,477,0,0,2652,2728,
        1,0,0,0,2653,2728,3,424,212,0,2654,2728,5,488,0,0,2655,2656,3,404,
        202,0,2656,2657,5,473,0,0,2657,2658,5,488,0,0,2658,2728,1,0,0,0,
        2659,2660,5,476,0,0,2660,2661,3,94,47,0,2661,2662,5,477,0,0,2662,
        2728,1,0,0,0,2663,2664,5,476,0,0,2664,2669,3,348,174,0,2665,2666,
        5,480,0,0,2666,2668,3,348,174,0,2667,2665,1,0,0,0,2668,2671,1,0,
        0,0,2669,2667,1,0,0,0,2669,2670,1,0,0,0,2670,2672,1,0,0,0,2671,2669,
        1,0,0,0,2672,2673,5,477,0,0,2673,2728,1,0,0,0,2674,2675,3,346,173,
        0,2675,2687,5,476,0,0,2676,2678,3,434,217,0,2677,2676,1,0,0,0,2677,
        2678,1,0,0,0,2678,2679,1,0,0,0,2679,2684,3,348,174,0,2680,2681,5,
        480,0,0,2681,2683,3,348,174,0,2682,2680,1,0,0,0,2683,2686,1,0,0,
        0,2684,2682,1,0,0,0,2684,2685,1,0,0,0,2685,2688,1,0,0,0,2686,2684,
        1,0,0,0,2687,2677,1,0,0,0,2687,2688,1,0,0,0,2688,2689,1,0,0,0,2689,
        2690,5,477,0,0,2690,2728,1,0,0,0,2691,2692,3,346,173,0,2692,2693,
        5,476,0,0,2693,2694,3,348,174,0,2694,2695,5,433,0,0,2695,2696,3,
        348,174,0,2696,2697,5,477,0,0,2697,2728,1,0,0,0,2698,2699,3,346,
        173,0,2699,2701,5,476,0,0,2700,2702,3,434,217,0,2701,2700,1,0,0,
        0,2701,2702,1,0,0,0,2702,2703,1,0,0,0,2703,2704,3,348,174,0,2704,
        2706,5,477,0,0,2705,2707,3,350,175,0,2706,2705,1,0,0,0,2706,2707,
        1,0,0,0,2707,2728,1,0,0,0,2708,2709,3,142,71,0,2709,2710,3,108,54,
        0,2710,2728,1,0,0,0,2711,2712,3,142,71,0,2712,2713,5,454,0,0,2713,
        2714,5,302,0,0,2714,2715,5,476,0,0,2715,2716,3,222,111,0,2716,2718,
        5,477,0,0,2717,2719,3,108,54,0,2718,2717,1,0,0,0,2718,2719,1,0,0,
        0,2719,2728,1,0,0,0,2720,2728,3,382,191,0,2721,2728,3,404,202,0,
        2722,2723,5,476,0,0,2723,2724,3,320,160,0,2724,2725,5,477,0,0,2725,
        2728,1,0,0,0,2726,2728,3,332,166,0,2727,2595,1,0,0,0,2727,2608,1,
        0,0,0,2727,2621,1,0,0,0,2727,2628,1,0,0,0,2727,2637,1,0,0,0,2727,
        2646,1,0,0,0,2727,2653,1,0,0,0,2727,2654,1,0,0,0,2727,2655,1,0,0,
        0,2727,2659,1,0,0,0,2727,2663,1,0,0,0,2727,2674,1,0,0,0,2727,2691,
        1,0,0,0,2727,2698,1,0,0,0,2727,2708,1,0,0,0,2727,2711,1,0,0,0,2727,
        2720,1,0,0,0,2727,2721,1,0,0,0,2727,2722,1,0,0,0,2727,2726,1,0,0,
        0,2728,2736,1,0,0,0,2729,2730,10,5,0,0,2730,2731,5,474,0,0,2731,
        2732,3,328,164,0,2732,2733,5,475,0,0,2733,2735,1,0,0,0,2734,2729,
        1,0,0,0,2735,2738,1,0,0,0,2736,2734,1,0,0,0,2736,2737,1,0,0,0,2737,
        331,1,0,0,0,2738,2736,1,0,0,0,2739,2744,3,334,167,0,2740,2744,3,
        338,169,0,2741,2744,3,340,170,0,2742,2744,3,336,168,0,2743,2739,
        1,0,0,0,2743,2740,1,0,0,0,2743,2741,1,0,0,0,2743,2742,1,0,0,0,2744,
        333,1,0,0,0,2745,2746,5,211,0,0,2746,2747,5,474,0,0,2747,2752,3,
        342,171,0,2748,2749,5,480,0,0,2749,2751,3,342,171,0,2750,2748,1,
        0,0,0,2751,2754,1,0,0,0,2752,2750,1,0,0,0,2752,2753,1,0,0,0,2753,
        2755,1,0,0,0,2754,2752,1,0,0,0,2755,2756,5,475,0,0,2756,2757,5,211,
        0,0,2757,2758,5,476,0,0,2758,2763,3,342,171,0,2759,2760,5,480,0,
        0,2760,2762,3,342,171,0,2761,2759,1,0,0,0,2762,2765,1,0,0,0,2763,
        2761,1,0,0,0,2763,2764,1,0,0,0,2764,2766,1,0,0,0,2765,2763,1,0,0,
        0,2766,2767,5,477,0,0,2767,335,1,0,0,0,2768,2769,5,414,0,0,2769,
        2770,5,476,0,0,2770,2775,3,342,171,0,2771,2772,5,480,0,0,2772,2774,
        3,342,171,0,2773,2771,1,0,0,0,2774,2777,1,0,0,0,2775,2773,1,0,0,
        0,2775,2776,1,0,0,0,2776,2778,1,0,0,0,2777,2775,1,0,0,0,2778,2779,
        5,477,0,0,2779,337,1,0,0,0,2780,2781,5,398,0,0,2781,2782,5,476,0,
        0,2782,2787,3,342,171,0,2783,2784,5,480,0,0,2784,2786,3,342,171,
        0,2785,2783,1,0,0,0,2786,2789,1,0,0,0,2787,2785,1,0,0,0,2787,2788,
        1,0,0,0,2788,2790,1,0,0,0,2789,2787,1,0,0,0,2790,2791,5,477,0,0,
        2791,339,1,0,0,0,2792,2793,5,91,0,0,2793,2794,5,474,0,0,2794,2795,
        3,342,171,0,2795,2796,5,480,0,0,2796,2797,3,342,171,0,2797,2798,
        5,475,0,0,2798,341,1,0,0,0,2799,2804,3,368,184,0,2800,2804,3,424,
        212,0,2801,2804,3,332,166,0,2802,2804,3,344,172,0,2803,2799,1,0,
        0,0,2803,2800,1,0,0,0,2803,2801,1,0,0,0,2803,2802,1,0,0,0,2804,343,
        1,0,0,0,2805,2806,7,36,0,0,2806,345,1,0,0,0,2807,2811,3,444,222,
        0,2808,2811,3,404,202,0,2809,2811,3,442,221,0,2810,2807,1,0,0,0,
        2810,2808,1,0,0,0,2810,2809,1,0,0,0,2811,347,1,0,0,0,2812,2819,3,
        440,220,0,2813,2819,3,438,219,0,2814,2819,3,436,218,0,2815,2819,
        3,320,160,0,2816,2819,3,350,175,0,2817,2819,3,424,212,0,2818,2812,
        1,0,0,0,2818,2813,1,0,0,0,2818,2814,1,0,0,0,2818,2815,1,0,0,0,2818,
        2816,1,0,0,0,2818,2817,1,0,0,0,2819,349,1,0,0,0,2820,2821,5,50,0,
        0,2821,2822,5,476,0,0,2822,2823,5,451,0,0,2823,2824,3,322,161,0,
        2824,2825,5,477,0,0,2825,351,1,0,0,0,2826,2827,3,382,191,0,2827,
        353,1,0,0,0,2828,2832,3,382,191,0,2829,2832,3,404,202,0,2830,2832,
        3,384,192,0,2831,2828,1,0,0,0,2831,2829,1,0,0,0,2831,2830,1,0,0,
        0,2832,355,1,0,0,0,2833,2836,5,318,0,0,2834,2837,3,358,179,0,2835,
        2837,3,362,181,0,2836,2834,1,0,0,0,2836,2835,1,0,0,0,2836,2837,1,
        0,0,0,2837,357,1,0,0,0,2838,2840,3,360,180,0,2839,2841,3,364,182,
        0,2840,2839,1,0,0,0,2840,2841,1,0,0,0,2841,359,1,0,0,0,2842,2843,
        3,366,183,0,2843,2844,3,438,219,0,2844,2846,1,0,0,0,2845,2842,1,
        0,0,0,2846,2847,1,0,0,0,2847,2845,1,0,0,0,2847,2848,1,0,0,0,2848,
        361,1,0,0,0,2849,2852,3,364,182,0,2850,2853,3,360,180,0,2851,2853,
        3,364,182,0,2852,2850,1,0,0,0,2852,2851,1,0,0,0,2852,2853,1,0,0,
        0,2853,363,1,0,0,0,2854,2855,3,366,183,0,2855,2856,3,438,219,0,2856,
        2857,5,433,0,0,2857,2858,3,438,219,0,2858,365,1,0,0,0,2859,2861,
        7,37,0,0,2860,2859,1,0,0,0,2860,2861,1,0,0,0,2861,2862,1,0,0,0,2862,
        2865,7,38,0,0,2863,2865,5,498,0,0,2864,2860,1,0,0,0,2864,2863,1,
        0,0,0,2865,367,1,0,0,0,2866,2867,3,372,186,0,2867,369,1,0,0,0,2868,
        2869,3,372,186,0,2869,371,1,0,0,0,2870,2872,5,212,0,0,2871,2870,
        1,0,0,0,2871,2872,1,0,0,0,2872,2873,1,0,0,0,2873,2875,3,382,191,
        0,2874,2876,3,378,189,0,2875,2874,1,0,0,0,2875,2876,1,0,0,0,2876,
        373,1,0,0,0,2877,2878,3,382,191,0,2878,2879,3,376,188,0,2879,375,
        1,0,0,0,2880,2881,5,344,0,0,2881,2883,3,382,191,0,2882,2880,1,0,
        0,0,2883,2886,1,0,0,0,2884,2882,1,0,0,0,2884,2885,1,0,0,0,2885,377,
        1,0,0,0,2886,2884,1,0,0,0,2887,2888,5,476,0,0,2888,2889,3,380,190,
        0,2889,2890,5,477,0,0,2890,379,1,0,0,0,2891,2896,3,382,191,0,2892,
        2893,5,480,0,0,2893,2895,3,382,191,0,2894,2892,1,0,0,0,2895,2898,
        1,0,0,0,2896,2894,1,0,0,0,2896,2897,1,0,0,0,2897,381,1,0,0,0,2898,
        2896,1,0,0,0,2899,2904,3,388,194,0,2900,2904,5,498,0,0,2901,2904,
        3,444,222,0,2902,2904,3,386,193,0,2903,2899,1,0,0,0,2903,2900,1,
        0,0,0,2903,2901,1,0,0,0,2903,2902,1,0,0,0,2904,383,1,0,0,0,2905,
        2910,3,388,194,0,2906,2910,3,440,220,0,2907,2910,3,444,222,0,2908,
        2910,3,442,221,0,2909,2905,1,0,0,0,2909,2906,1,0,0,0,2909,2907,1,
        0,0,0,2909,2908,1,0,0,0,2910,385,1,0,0,0,2911,2912,5,483,0,0,2912,
        2913,5,478,0,0,2913,2914,3,388,194,0,2914,2915,5,479,0,0,2915,387,
        1,0,0,0,2916,2917,7,39,0,0,2917,389,1,0,0,0,2918,2919,5,450,0,0,
        2919,2920,3,320,160,0,2920,2921,5,426,0,0,2921,2922,3,320,160,0,
        2922,391,1,0,0,0,2923,2924,3,404,202,0,2924,393,1,0,0,0,2925,2926,
        3,404,202,0,2926,395,1,0,0,0,2927,2928,3,404,202,0,2928,397,1,0,
        0,0,2929,2930,3,404,202,0,2930,399,1,0,0,0,2931,2932,3,404,202,0,
        2932,401,1,0,0,0,2933,2934,3,382,191,0,2934,403,1,0,0,0,2935,2940,
        3,382,191,0,2936,2937,5,473,0,0,2937,2939,3,382,191,0,2938,2936,
        1,0,0,0,2939,2942,1,0,0,0,2940,2938,1,0,0,0,2940,2941,1,0,0,0,2941,
        405,1,0,0,0,2942,2940,1,0,0,0,2943,2945,5,453,0,0,2944,2946,7,40,
        0,0,2945,2944,1,0,0,0,2945,2946,1,0,0,0,2946,2947,1,0,0,0,2947,2948,
        3,412,206,0,2948,407,1,0,0,0,2949,2950,5,68,0,0,2950,2951,5,354,
        0,0,2951,2952,5,285,0,0,2952,409,1,0,0,0,2953,2954,5,68,0,0,2954,
        2955,5,285,0,0,2955,411,1,0,0,0,2956,2957,5,476,0,0,2957,2962,3,
        414,207,0,2958,2959,5,480,0,0,2959,2961,3,414,207,0,2960,2958,1,
        0,0,0,2961,2964,1,0,0,0,2962,2960,1,0,0,0,2962,2963,1,0,0,0,2963,
        2965,1,0,0,0,2964,2962,1,0,0,0,2965,2966,5,477,0,0,2966,413,1,0,
        0,0,2967,2968,3,416,208,0,2968,2970,5,469,0,0,2969,2971,5,259,0,
        0,2970,2969,1,0,0,0,2970,2971,1,0,0,0,2971,2972,1,0,0,0,2972,2973,
        3,420,210,0,2973,415,1,0,0,0,2974,2979,3,382,191,0,2975,2979,3,404,
        202,0,2976,2979,3,428,214,0,2977,2979,3,348,174,0,2978,2974,1,0,
        0,0,2978,2975,1,0,0,0,2978,2976,1,0,0,0,2978,2977,1,0,0,0,2979,417,
        1,0,0,0,2980,2981,5,484,0,0,2981,2982,3,424,212,0,2982,2983,5,484,
        0,0,2983,2986,1,0,0,0,2984,2986,3,424,212,0,2985,2980,1,0,0,0,2985,
        2984,1,0,0,0,2986,419,1,0,0,0,2987,2998,5,499,0,0,2988,2998,5,500,
        0,0,2989,2998,3,432,216,0,2990,2998,3,404,202,0,2991,2998,3,424,
        212,0,2992,2998,3,386,193,0,2993,2994,5,484,0,0,2994,2995,3,386,
        193,0,2995,2996,5,484,0,0,2996,2998,1,0,0,0,2997,2987,1,0,0,0,2997,
        2988,1,0,0,0,2997,2989,1,0,0,0,2997,2990,1,0,0,0,2997,2991,1,0,0,
        0,2997,2992,1,0,0,0,2997,2993,1,0,0,0,2998,421,1,0,0,0,2999,3014,
        5,469,0,0,3000,3014,5,470,0,0,3001,3014,5,471,0,0,3002,3003,5,471,
        0,0,3003,3014,5,469,0,0,3004,3005,5,470,0,0,3005,3014,5,469,0,0,
        3006,3007,5,471,0,0,3007,3014,5,470,0,0,3008,3009,5,472,0,0,3009,
        3014,5,469,0,0,3010,3011,5,471,0,0,3011,3012,5,469,0,0,3012,3014,
        5,470,0,0,3013,2999,1,0,0,0,3013,3000,1,0,0,0,3013,3001,1,0,0,0,
        3013,3002,1,0,0,0,3013,3004,1,0,0,0,3013,3006,1,0,0,0,3013,3008,
        1,0,0,0,3013,3010,1,0,0,0,3014,423,1,0,0,0,3015,3029,3,356,178,0,
        3016,3029,3,426,213,0,3017,3029,3,428,214,0,3018,3020,5,490,0,0,
        3019,3018,1,0,0,0,3019,3020,1,0,0,0,3020,3021,1,0,0,0,3021,3029,
        3,430,215,0,3022,3029,3,432,216,0,3023,3029,5,500,0,0,3024,3026,
        5,354,0,0,3025,3024,1,0,0,0,3025,3026,1,0,0,0,3026,3027,1,0,0,0,
        3027,3029,5,357,0,0,3028,3015,1,0,0,0,3028,3016,1,0,0,0,3028,3017,
        1,0,0,0,3028,3019,1,0,0,0,3028,3022,1,0,0,0,3028,3023,1,0,0,0,3028,
        3025,1,0,0,0,3029,425,1,0,0,0,3030,3031,3,436,218,0,3031,3032,3,
        428,214,0,3032,427,1,0,0,0,3033,3034,5,498,0,0,3034,429,1,0,0,0,
        3035,3036,5,499,0,0,3036,431,1,0,0,0,3037,3038,7,41,0,0,3038,433,
        1,0,0,0,3039,3040,7,7,0,0,3040,435,1,0,0,0,3041,3042,7,42,0,0,3042,
        437,1,0,0,0,3043,3044,7,43,0,0,3044,439,1,0,0,0,3045,3046,7,44,0,
        0,3046,441,1,0,0,0,3047,3048,7,45,0,0,3048,443,1,0,0,0,3049,3050,
        7,46,0,0,3050,445,1,0,0,0,3051,3056,3,94,47,0,3052,3056,3,88,44,
        0,3053,3056,3,6,3,0,3054,3056,3,456,228,0,3055,3051,1,0,0,0,3055,
        3052,1,0,0,0,3055,3053,1,0,0,0,3055,3054,1,0,0,0,3056,3057,1,0,0,
        0,3057,3058,5,481,0,0,3058,447,1,0,0,0,3059,3060,3,106,53,0,3060,
        3062,3,122,61,0,3061,3063,3,184,92,0,3062,3061,1,0,0,0,3062,3063,
        1,0,0,0,3063,3065,1,0,0,0,3064,3066,3,188,94,0,3065,3064,1,0,0,0,
        3065,3066,1,0,0,0,3066,3068,1,0,0,0,3067,3069,3,212,106,0,3068,3067,
        1,0,0,0,3068,3069,1,0,0,0,3069,3071,1,0,0,0,3070,3072,3,214,107,
        0,3071,3070,1,0,0,0,3071,3072,1,0,0,0,3072,3097,1,0,0,0,3073,3074,
        3,122,61,0,3074,3076,3,106,53,0,3075,3077,3,184,92,0,3076,3075,1,
        0,0,0,3076,3077,1,0,0,0,3077,3079,1,0,0,0,3078,3080,3,188,94,0,3079,
        3078,1,0,0,0,3079,3080,1,0,0,0,3080,3082,1,0,0,0,3081,3083,3,212,
        106,0,3082,3081,1,0,0,0,3082,3083,1,0,0,0,3083,3085,1,0,0,0,3084,
        3086,3,214,107,0,3085,3084,1,0,0,0,3085,3086,1,0,0,0,3086,3097,1,
        0,0,0,3087,3088,3,106,53,0,3088,3089,3,122,61,0,3089,3090,3,220,
        110,0,3090,3097,1,0,0,0,3091,3092,3,106,53,0,3092,3093,3,122,61,
        0,3093,3094,3,186,93,0,3094,3097,1,0,0,0,3095,3097,3,454,227,0,3096,
        3059,1,0,0,0,3096,3073,1,0,0,0,3096,3087,1,0,0,0,3096,3091,1,0,0,
        0,3096,3095,1,0,0,0,3097,449,1,0,0,0,3098,3103,3,110,55,0,3099,3101,
        5,212,0,0,3100,3099,1,0,0,0,3100,3101,1,0,0,0,3101,3102,1,0,0,0,
        3102,3104,3,382,191,0,3103,3100,1,0,0,0,3103,3104,1,0,0,0,3104,3118,
        1,0,0,0,3105,3108,3,320,160,0,3106,3107,5,212,0,0,3107,3109,3,320,
        160,0,3108,3106,1,0,0,0,3108,3109,1,0,0,0,3109,3118,1,0,0,0,3110,
        3115,3,452,226,0,3111,3113,5,212,0,0,3112,3111,1,0,0,0,3112,3113,
        1,0,0,0,3113,3114,1,0,0,0,3114,3116,3,382,191,0,3115,3112,1,0,0,
        0,3115,3116,1,0,0,0,3116,3118,1,0,0,0,3117,3098,1,0,0,0,3117,3105,
        1,0,0,0,3117,3110,1,0,0,0,3118,451,1,0,0,0,3119,3122,3,114,57,0,
        3120,3121,7,8,0,0,3121,3123,5,102,0,0,3122,3120,1,0,0,0,3122,3123,
        1,0,0,0,3123,3124,1,0,0,0,3124,3126,5,368,0,0,3125,3127,3,382,191,
        0,3126,3125,1,0,0,0,3126,3127,1,0,0,0,3127,3138,1,0,0,0,3128,3130,
        5,476,0,0,3129,3131,3,112,56,0,3130,3129,1,0,0,0,3130,3131,1,0,0,
        0,3131,3132,1,0,0,0,3132,3134,3,222,111,0,3133,3135,3,124,62,0,3134,
        3133,1,0,0,0,3134,3135,1,0,0,0,3135,3136,1,0,0,0,3136,3137,5,477,
        0,0,3137,3139,1,0,0,0,3138,3128,1,0,0,0,3138,3139,1,0,0,0,3139,453,
        1,0,0,0,3140,3141,3,106,53,0,3141,3142,3,130,65,0,3142,3162,1,0,
        0,0,3143,3144,5,401,0,0,3144,3162,3,528,264,0,3145,3146,5,401,0,
        0,3146,3147,3,534,267,0,3147,3149,3,122,61,0,3148,3150,3,184,92,
        0,3149,3148,1,0,0,0,3149,3150,1,0,0,0,3150,3152,1,0,0,0,3151,3153,
        3,188,94,0,3152,3151,1,0,0,0,3152,3153,1,0,0,0,3153,3155,1,0,0,0,
        3154,3156,3,212,106,0,3155,3154,1,0,0,0,3155,3156,1,0,0,0,3156,3158,
        1,0,0,0,3157,3159,3,214,107,0,3158,3157,1,0,0,0,3158,3159,1,0,0,
        0,3159,3162,1,0,0,0,3160,3162,5,481,0,0,3161,3140,1,0,0,0,3161,3143,
        1,0,0,0,3161,3145,1,0,0,0,3161,3160,1,0,0,0,3162,455,1,0,0,0,3163,
        3203,3,458,229,0,3164,3203,3,460,230,0,3165,3203,3,466,233,0,3166,
        3203,3,470,235,0,3167,3203,3,472,236,0,3168,3203,3,474,237,0,3169,
        3203,3,476,238,0,3170,3203,3,478,239,0,3171,3203,3,480,240,0,3172,
        3203,3,482,241,0,3173,3203,3,484,242,0,3174,3203,3,498,249,0,3175,
        3203,3,496,248,0,3176,3203,3,518,259,0,3177,3203,3,520,260,0,3178,
        3203,3,502,251,0,3179,3203,3,500,250,0,3180,3203,3,510,255,0,3181,
        3203,3,524,262,0,3182,3203,3,512,256,0,3183,3203,3,522,261,0,3184,
        3203,3,514,257,0,3185,3203,3,526,263,0,3186,3203,3,516,258,0,3187,
        3203,3,508,254,0,3188,3203,3,490,245,0,3189,3203,3,492,246,0,3190,
        3203,3,494,247,0,3191,3203,3,488,244,0,3192,3203,3,554,277,0,3193,
        3203,3,550,275,0,3194,3196,5,284,0,0,3195,3194,1,0,0,0,3195,3196,
        1,0,0,0,3196,3197,1,0,0,0,3197,3201,3,536,268,0,3198,3201,3,540,
        270,0,3199,3201,3,548,274,0,3200,3195,1,0,0,0,3200,3198,1,0,0,0,
        3200,3199,1,0,0,0,3201,3203,1,0,0,0,3202,3163,1,0,0,0,3202,3164,
        1,0,0,0,3202,3165,1,0,0,0,3202,3166,1,0,0,0,3202,3167,1,0,0,0,3202,
        3168,1,0,0,0,3202,3169,1,0,0,0,3202,3170,1,0,0,0,3202,3171,1,0,0,
        0,3202,3172,1,0,0,0,3202,3173,1,0,0,0,3202,3174,1,0,0,0,3202,3175,
        1,0,0,0,3202,3176,1,0,0,0,3202,3177,1,0,0,0,3202,3178,1,0,0,0,3202,
        3179,1,0,0,0,3202,3180,1,0,0,0,3202,3181,1,0,0,0,3202,3182,1,0,0,
        0,3202,3183,1,0,0,0,3202,3184,1,0,0,0,3202,3185,1,0,0,0,3202,3186,
        1,0,0,0,3202,3187,1,0,0,0,3202,3188,1,0,0,0,3202,3189,1,0,0,0,3202,
        3190,1,0,0,0,3202,3191,1,0,0,0,3202,3192,1,0,0,0,3202,3193,1,0,0,
        0,3202,3200,1,0,0,0,3203,457,1,0,0,0,3204,3206,7,47,0,0,3205,3207,
        7,48,0,0,3206,3205,1,0,0,0,3206,3207,1,0,0,0,3207,3209,1,0,0,0,3208,
        3210,5,49,0,0,3209,3208,1,0,0,0,3209,3210,1,0,0,0,3210,3212,1,0,
        0,0,3211,3213,3,370,185,0,3212,3211,1,0,0,0,3212,3213,1,0,0,0,3213,
        3214,1,0,0,0,3214,3304,3,400,200,0,3215,3216,7,47,0,0,3216,3218,
        5,299,0,0,3217,3219,5,49,0,0,3218,3217,1,0,0,0,3218,3219,1,0,0,0,
        3219,3220,1,0,0,0,3220,3304,3,346,173,0,3221,3222,7,47,0,0,3222,
        3223,5,130,0,0,3223,3224,5,422,0,0,3224,3304,3,400,200,0,3225,3226,
        7,47,0,0,3226,3227,5,296,0,0,3227,3228,3,400,200,0,3228,3229,5,401,
        0,0,3229,3234,3,314,157,0,3230,3231,5,480,0,0,3231,3233,3,314,157,
        0,3232,3230,1,0,0,0,3233,3236,1,0,0,0,3234,3232,1,0,0,0,3234,3235,
        1,0,0,0,3235,3304,1,0,0,0,3236,3234,1,0,0,0,3237,3238,7,47,0,0,3238,
        3251,5,130,0,0,3239,3252,3,94,47,0,3240,3241,5,296,0,0,3241,3242,
        3,400,200,0,3242,3243,5,401,0,0,3243,3248,3,314,157,0,3244,3245,
        5,480,0,0,3245,3247,3,314,157,0,3246,3244,1,0,0,0,3247,3250,1,0,
        0,0,3248,3246,1,0,0,0,3248,3249,1,0,0,0,3249,3252,1,0,0,0,3250,3248,
        1,0,0,0,3251,3239,1,0,0,0,3251,3240,1,0,0,0,3252,3304,1,0,0,0,3253,
        3254,7,47,0,0,3254,3255,5,130,0,0,3255,3256,3,98,49,0,3256,3257,
        5,212,0,0,3257,3258,3,400,200,0,3258,3259,5,476,0,0,3259,3264,3,
        314,157,0,3260,3261,5,480,0,0,3261,3263,3,314,157,0,3262,3260,1,
        0,0,0,3263,3266,1,0,0,0,3264,3262,1,0,0,0,3264,3265,1,0,0,0,3265,
        3267,1,0,0,0,3266,3264,1,0,0,0,3267,3268,5,477,0,0,3268,3304,1,0,
        0,0,3269,3270,7,47,0,0,3270,3271,3,400,200,0,3271,3272,5,476,0,0,
        3272,3277,3,314,157,0,3273,3274,5,480,0,0,3274,3276,3,314,157,0,
        3275,3273,1,0,0,0,3276,3279,1,0,0,0,3277,3275,1,0,0,0,3277,3278,
        1,0,0,0,3278,3280,1,0,0,0,3279,3277,1,0,0,0,3280,3281,5,477,0,0,
        3281,3304,1,0,0,0,3282,3283,7,47,0,0,3283,3284,3,400,200,0,3284,
        3289,3,418,209,0,3285,3286,5,473,0,0,3286,3288,3,418,209,0,3287,
        3285,1,0,0,0,3288,3291,1,0,0,0,3289,3287,1,0,0,0,3289,3290,1,0,0,
        0,3290,3304,1,0,0,0,3291,3289,1,0,0,0,3292,3293,7,47,0,0,3293,3295,
        5,422,0,0,3294,3296,5,49,0,0,3295,3294,1,0,0,0,3295,3296,1,0,0,0,
        3296,3297,1,0,0,0,3297,3298,3,400,200,0,3298,3299,5,371,0,0,3299,
        3300,5,476,0,0,3300,3301,3,414,207,0,3301,3302,5,477,0,0,3302,3304,
        1,0,0,0,3303,3204,1,0,0,0,3303,3215,1,0,0,0,3303,3221,1,0,0,0,3303,
        3225,1,0,0,0,3303,3237,1,0,0,0,3303,3253,1,0,0,0,3303,3269,1,0,0,
        0,3303,3282,1,0,0,0,3303,3292,1,0,0,0,3304,459,1,0,0,0,3305,3307,
        5,286,0,0,3306,3308,5,49,0,0,3307,3306,1,0,0,0,3307,3308,1,0,0,0,
        3308,3313,1,0,0,0,3309,3314,3,462,231,0,3310,3311,5,116,0,0,3311,
        3314,5,295,0,0,3312,3314,5,49,0,0,3313,3309,1,0,0,0,3313,3310,1,
        0,0,0,3313,3312,1,0,0,0,3313,3314,1,0,0,0,3314,3319,1,0,0,0,3315,
        3320,3,94,47,0,3316,3320,3,90,45,0,3317,3320,3,546,273,0,3318,3320,
        3,286,143,0,3319,3315,1,0,0,0,3319,3316,1,0,0,0,3319,3317,1,0,0,
        0,3319,3318,1,0,0,0,3320,461,1,0,0,0,3321,3326,3,464,232,0,3322,
        3323,5,480,0,0,3323,3325,3,464,232,0,3324,3322,1,0,0,0,3325,3328,
        1,0,0,0,3326,3324,1,0,0,0,3326,3327,1,0,0,0,3327,463,1,0,0,0,3328,
        3326,1,0,0,0,3329,3330,7,49,0,0,3330,465,1,0,0,0,3331,3332,5,188,
        0,0,3332,3333,5,16,0,0,3333,3338,3,392,196,0,3334,3335,5,188,0,0,
        3335,3338,3,394,197,0,3336,3338,3,468,234,0,3337,3331,1,0,0,0,3337,
        3334,1,0,0,0,3337,3336,1,0,0,0,3338,467,1,0,0,0,3339,3340,5,188,
        0,0,3340,3341,5,98,0,0,3341,3346,3,404,202,0,3342,3343,5,480,0,0,
        3343,3345,3,404,202,0,3344,3342,1,0,0,0,3345,3348,1,0,0,0,3346,3344,
        1,0,0,0,3346,3347,1,0,0,0,3347,469,1,0,0,0,3348,3346,1,0,0,0,3349,
        3350,5,405,0,0,3350,3437,7,50,0,0,3351,3352,5,405,0,0,3352,3353,
        5,255,0,0,3353,3437,7,51,0,0,3354,3355,5,405,0,0,3355,3361,7,52,
        0,0,3356,3359,7,53,0,0,3357,3360,5,265,0,0,3358,3360,3,400,200,0,
        3359,3357,1,0,0,0,3359,3358,1,0,0,0,3360,3362,1,0,0,0,3361,3356,
        1,0,0,0,3361,3362,1,0,0,0,3362,3364,1,0,0,0,3363,3365,3,326,163,
        0,3364,3363,1,0,0,0,3364,3365,1,0,0,0,3365,3437,1,0,0,0,3366,3367,
        5,405,0,0,3367,3368,5,25,0,0,3368,3369,7,53,0,0,3369,3372,3,404,
        202,0,3370,3371,7,53,0,0,3371,3373,3,404,202,0,3372,3370,1,0,0,0,
        3372,3373,1,0,0,0,3373,3375,1,0,0,0,3374,3376,3,326,163,0,3375,3374,
        1,0,0,0,3375,3376,1,0,0,0,3376,3437,1,0,0,0,3377,3378,5,405,0,0,
        3378,3379,5,251,0,0,3379,3380,5,193,0,0,3380,3437,3,404,202,0,3381,
        3383,5,405,0,0,3382,3384,7,54,0,0,3383,3382,1,0,0,0,3383,3384,1,
        0,0,0,3384,3385,1,0,0,0,3385,3387,5,60,0,0,3386,3388,3,532,266,0,
        3387,3386,1,0,0,0,3387,3388,1,0,0,0,3388,3437,1,0,0,0,3389,3391,
        5,405,0,0,3390,3392,5,298,0,0,3391,3390,1,0,0,0,3391,3392,1,0,0,
        0,3392,3393,1,0,0,0,3393,3437,5,98,0,0,3394,3395,5,405,0,0,3395,
        3397,5,32,0,0,3396,3398,3,264,132,0,3397,3396,1,0,0,0,3397,3398,
        1,0,0,0,3398,3437,1,0,0,0,3399,3400,5,405,0,0,3400,3401,5,423,0,
        0,3401,3416,3,400,200,0,3402,3412,5,476,0,0,3403,3413,3,400,200,
        0,3404,3409,3,424,212,0,3405,3406,5,473,0,0,3406,3408,3,424,212,
        0,3407,3405,1,0,0,0,3408,3411,1,0,0,0,3409,3407,1,0,0,0,3409,3410,
        1,0,0,0,3410,3413,1,0,0,0,3411,3409,1,0,0,0,3412,3403,1,0,0,0,3412,
        3404,1,0,0,0,3413,3414,1,0,0,0,3414,3415,5,477,0,0,3415,3417,1,0,
        0,0,3416,3402,1,0,0,0,3416,3417,1,0,0,0,3417,3437,1,0,0,0,3418,3419,
        5,405,0,0,3419,3420,5,111,0,0,3420,3423,3,400,200,0,3421,3422,5,
        371,0,0,3422,3424,3,412,206,0,3423,3421,1,0,0,0,3423,3424,1,0,0,
        0,3424,3437,1,0,0,0,3425,3426,5,405,0,0,3426,3427,5,251,0,0,3427,
        3428,5,422,0,0,3428,3431,3,128,64,0,3429,3430,5,212,0,0,3430,3432,
        5,404,0,0,3431,3429,1,0,0,0,3431,3432,1,0,0,0,3432,3437,1,0,0,0,
        3433,3434,5,405,0,0,3434,3435,5,422,0,0,3435,3437,3,530,265,0,3436,
        3349,1,0,0,0,3436,3351,1,0,0,0,3436,3354,1,0,0,0,3436,3366,1,0,0,
        0,3436,3377,1,0,0,0,3436,3381,1,0,0,0,3436,3389,1,0,0,0,3436,3394,
        1,0,0,0,3436,3399,1,0,0,0,3436,3418,1,0,0,0,3436,3425,1,0,0,0,3436,
        3433,1,0,0,0,3437,471,1,0,0,0,3438,3439,5,88,0,0,3439,3440,5,347,
        0,0,3440,3443,3,404,202,0,3441,3442,5,453,0,0,3442,3444,3,412,206,
        0,3443,3441,1,0,0,0,3443,3444,1,0,0,0,3444,3459,1,0,0,0,3445,3446,
        5,88,0,0,3446,3447,5,30,0,0,3447,3448,5,337,0,0,3448,3449,5,320,
        0,0,3449,3450,3,68,34,0,3450,3451,5,108,0,0,3451,3452,5,319,0,0,
        3452,3453,5,422,0,0,3453,3456,3,400,200,0,3454,3455,5,371,0,0,3455,
        3457,3,412,206,0,3456,3454,1,0,0,0,3456,3457,1,0,0,0,3457,3459,1,
        0,0,0,3458,3438,1,0,0,0,3458,3445,1,0,0,0,3459,473,1,0,0,0,3460,
        3461,5,186,0,0,3461,3462,5,347,0,0,3462,3463,3,404,202,0,3463,475,
        1,0,0,0,3464,3466,5,403,0,0,3465,3467,3,414,207,0,3466,3465,1,0,
        0,0,3466,3467,1,0,0,0,3467,3474,1,0,0,0,3468,3470,5,403,0,0,3469,
        3471,5,490,0,0,3470,3469,1,0,0,0,3470,3471,1,0,0,0,3471,3472,1,0,
        0,0,3472,3474,3,416,208,0,3473,3464,1,0,0,0,3473,3468,1,0,0,0,3474,
        477,1,0,0,0,3475,3477,5,391,0,0,3476,3478,3,416,208,0,3477,3476,
        1,0,0,0,3477,3478,1,0,0,0,3478,479,1,0,0,0,3479,3480,7,55,0,0,3480,
        3481,5,74,0,0,3481,3509,3,68,34,0,3482,3483,7,55,0,0,3483,3484,5,
        51,0,0,3484,3509,3,70,35,0,3485,3486,5,87,0,0,3486,3490,5,74,0,0,
        3487,3489,3,68,34,0,3488,3487,1,0,0,0,3489,3492,1,0,0,0,3490,3488,
        1,0,0,0,3490,3491,1,0,0,0,3491,3509,1,0,0,0,3492,3490,1,0,0,0,3493,
        3494,5,6,0,0,3494,3496,7,56,0,0,3495,3497,3,70,35,0,3496,3495,1,
        0,0,0,3497,3498,1,0,0,0,3498,3496,1,0,0,0,3498,3499,1,0,0,0,3499,
        3509,1,0,0,0,3500,3501,5,87,0,0,3501,3505,5,51,0,0,3502,3504,3,70,
        35,0,3503,3502,1,0,0,0,3504,3507,1,0,0,0,3505,3503,1,0,0,0,3505,
        3506,1,0,0,0,3506,3509,1,0,0,0,3507,3505,1,0,0,0,3508,3479,1,0,0,
        0,3508,3482,1,0,0,0,3508,3485,1,0,0,0,3508,3493,1,0,0,0,3508,3500,
        1,0,0,0,3509,481,1,0,0,0,3510,3511,5,464,0,0,3511,3512,7,57,0,0,
        3512,3521,3,404,202,0,3513,3517,5,464,0,0,3514,3516,3,68,34,0,3515,
        3514,1,0,0,0,3516,3519,1,0,0,0,3517,3515,1,0,0,0,3517,3518,1,0,0,
        0,3518,3521,1,0,0,0,3519,3517,1,0,0,0,3520,3510,1,0,0,0,3520,3513,
        1,0,0,0,3521,483,1,0,0,0,3522,3523,5,9,0,0,3523,3525,5,422,0,0,3524,
        3526,3,400,200,0,3525,3524,1,0,0,0,3525,3526,1,0,0,0,3526,3528,1,
        0,0,0,3527,3529,3,486,243,0,3528,3527,1,0,0,0,3528,3529,1,0,0,0,
        3529,3530,1,0,0,0,3530,3531,5,28,0,0,3531,3545,5,165,0,0,3532,3533,
        5,295,0,0,3533,3534,5,25,0,0,3534,3539,3,314,157,0,3535,3536,5,480,
        0,0,3536,3538,3,314,157,0,3537,3535,1,0,0,0,3538,3541,1,0,0,0,3539,
        3537,1,0,0,0,3539,3540,1,0,0,0,3540,3546,1,0,0,0,3541,3539,1,0,0,
        0,3542,3543,5,295,0,0,3543,3544,5,205,0,0,3544,3546,5,25,0,0,3545,
        3532,1,0,0,0,3545,3542,1,0,0,0,3545,3546,1,0,0,0,3546,3548,1,0,0,
        0,3547,3549,5,101,0,0,3548,3547,1,0,0,0,3548,3549,1,0,0,0,3549,3555,
        1,0,0,0,3550,3551,5,9,0,0,3551,3552,5,171,0,0,3552,3553,5,28,0,0,
        3553,3555,5,165,0,0,3554,3522,1,0,0,0,3554,3550,1,0,0,0,3555,485,
        1,0,0,0,3556,3557,5,371,0,0,3557,3558,3,172,86,0,3558,487,1,0,0,
        0,3559,3560,5,251,0,0,3560,3561,5,16,0,0,3561,3562,3,404,202,0,3562,
        3563,3,406,203,0,3563,489,1,0,0,0,3564,3565,5,251,0,0,3565,3567,
        5,31,0,0,3566,3568,3,408,204,0,3567,3566,1,0,0,0,3567,3568,1,0,0,
        0,3568,3569,1,0,0,0,3569,3571,3,396,198,0,3570,3572,3,306,153,0,
        3571,3570,1,0,0,0,3571,3572,1,0,0,0,3572,3575,1,0,0,0,3573,3574,
        5,89,0,0,3574,3576,5,498,0,0,3575,3573,1,0,0,0,3575,3576,1,0,0,0,
        3576,3578,1,0,0,0,3577,3579,3,406,203,0,3578,3577,1,0,0,0,3578,3579,
        1,0,0,0,3579,491,1,0,0,0,3580,3583,5,251,0,0,3581,3582,5,363,0,0,
        3582,3584,5,138,0,0,3583,3581,1,0,0,0,3583,3584,1,0,0,0,3584,3589,
        1,0,0,0,3585,3587,5,300,0,0,3586,3585,1,0,0,0,3586,3587,1,0,0,0,
        3587,3588,1,0,0,0,3588,3590,5,172,0,0,3589,3586,1,0,0,0,3589,3590,
        1,0,0,0,3590,3591,1,0,0,0,3591,3593,5,193,0,0,3592,3594,3,408,204,
        0,3593,3592,1,0,0,0,3593,3594,1,0,0,0,3594,3595,1,0,0,0,3595,3597,
        3,404,202,0,3596,3598,3,316,158,0,3597,3596,1,0,0,0,3597,3598,1,
        0,0,0,3598,3600,1,0,0,0,3599,3601,3,306,153,0,3600,3599,1,0,0,0,
        3600,3601,1,0,0,0,3601,3602,1,0,0,0,3602,3603,5,212,0,0,3603,3604,
        3,94,47,0,3604,493,1,0,0,0,3605,3608,5,251,0,0,3606,3607,5,363,0,
        0,3607,3609,5,138,0,0,3608,3606,1,0,0,0,3608,3609,1,0,0,0,3609,3613,
        1,0,0,0,3610,3614,5,172,0,0,3611,3612,5,172,0,0,3612,3614,5,419,
        0,0,3613,3610,1,0,0,0,3613,3611,1,0,0,0,3613,3614,1,0,0,0,3614,3615,
        1,0,0,0,3615,3617,5,299,0,0,3616,3618,3,408,204,0,3617,3616,1,0,
        0,0,3617,3618,1,0,0,0,3618,3619,1,0,0,0,3619,3620,3,346,173,0,3620,
        3621,5,212,0,0,3621,3630,3,382,191,0,3622,3623,5,328,0,0,3623,3625,
        7,58,0,0,3624,3622,1,0,0,0,3624,3625,1,0,0,0,3625,3626,1,0,0,0,3626,
        3631,3,66,33,0,3627,3628,5,445,0,0,3628,3629,5,74,0,0,3629,3631,
        3,68,34,0,3630,3624,1,0,0,0,3630,3627,1,0,0,0,3630,3631,1,0,0,0,
        3631,495,1,0,0,0,3632,3633,5,138,0,0,3633,3634,5,422,0,0,3634,3635,
        3,398,199,0,3635,3638,3,406,203,0,3636,3637,5,212,0,0,3637,3639,
        3,94,47,0,3638,3636,1,0,0,0,3638,3639,1,0,0,0,3639,497,1,0,0,0,3640,
        3641,5,14,0,0,3641,3642,5,422,0,0,3642,3643,3,404,202,0,3643,3644,
        5,105,0,0,3644,3645,5,476,0,0,3645,3649,3,404,202,0,3646,3648,3,
        404,202,0,3647,3646,1,0,0,0,3648,3651,1,0,0,0,3649,3647,1,0,0,0,
        3649,3650,1,0,0,0,3650,3652,1,0,0,0,3651,3649,1,0,0,0,3652,3653,
        5,477,0,0,3653,3654,3,94,47,0,3654,3661,1,0,0,0,3655,3656,5,18,0,
        0,3656,3661,5,14,0,0,3657,3658,5,183,0,0,3658,3659,5,422,0,0,3659,
        3661,3,400,200,0,3660,3640,1,0,0,0,3660,3655,1,0,0,0,3660,3657,1,
        0,0,0,3661,499,1,0,0,0,3662,3663,5,207,0,0,3663,3664,5,457,0,0,3664,
        3665,5,422,0,0,3665,3679,3,400,200,0,3666,3680,5,462,0,0,3667,3669,
        5,463,0,0,3668,3670,3,406,203,0,3669,3668,1,0,0,0,3669,3670,1,0,
        0,0,3670,3680,1,0,0,0,3671,3672,5,464,0,0,3672,3673,5,371,0,0,3673,
        3674,5,476,0,0,3674,3675,3,382,191,0,3675,3676,5,469,0,0,3676,3677,
        3,382,191,0,3677,3678,5,477,0,0,3678,3680,1,0,0,0,3679,3666,1,0,
        0,0,3679,3667,1,0,0,0,3679,3671,1,0,0,0,3680,501,1,0,0,0,3681,3682,
        5,207,0,0,3682,3684,5,422,0,0,3683,3685,3,410,205,0,3684,3683,1,
        0,0,0,3684,3685,1,0,0,0,3685,3688,1,0,0,0,3686,3687,5,265,0,0,3687,
        3689,5,473,0,0,3688,3686,1,0,0,0,3688,3689,1,0,0,0,3689,3690,1,0,
        0,0,3690,3691,3,400,200,0,3691,3692,3,504,252,0,3692,503,1,0,0,0,
        3693,3699,3,76,38,0,3694,3699,3,78,39,0,3695,3699,3,80,40,0,3696,
        3699,3,82,41,0,3697,3699,3,84,42,0,3698,3693,1,0,0,0,3698,3694,1,
        0,0,0,3698,3695,1,0,0,0,3698,3696,1,0,0,0,3698,3697,1,0,0,0,3699,
        3852,1,0,0,0,3700,3704,5,97,0,0,3701,3702,5,6,0,0,3702,3704,5,25,
        0,0,3703,3700,1,0,0,0,3703,3701,1,0,0,0,3704,3705,1,0,0,0,3705,3707,
        3,50,25,0,3706,3708,3,306,153,0,3707,3706,1,0,0,0,3707,3708,1,0,
        0,0,3708,3710,1,0,0,0,3709,3711,3,256,128,0,3710,3709,1,0,0,0,3710,
        3711,1,0,0,0,3711,3713,1,0,0,0,3712,3714,3,406,203,0,3713,3712,1,
        0,0,0,3713,3714,1,0,0,0,3714,3852,1,0,0,0,3715,3721,5,97,0,0,3716,
        3718,5,6,0,0,3717,3719,3,72,36,0,3718,3717,1,0,0,0,3718,3719,1,0,
        0,0,3719,3721,1,0,0,0,3720,3715,1,0,0,0,3720,3716,1,0,0,0,3721,3722,
        1,0,0,0,3722,3723,5,476,0,0,3723,3725,3,272,136,0,3724,3726,3,74,
        37,0,3725,3724,1,0,0,0,3725,3726,1,0,0,0,3726,3734,1,0,0,0,3727,
        3728,5,480,0,0,3728,3730,3,272,136,0,3729,3731,3,74,37,0,3730,3729,
        1,0,0,0,3730,3731,1,0,0,0,3731,3733,1,0,0,0,3732,3727,1,0,0,0,3733,
        3736,1,0,0,0,3734,3732,1,0,0,0,3734,3735,1,0,0,0,3735,3737,1,0,0,
        0,3736,3734,1,0,0,0,3737,3739,5,477,0,0,3738,3740,3,74,37,0,3739,
        3738,1,0,0,0,3739,3740,1,0,0,0,3740,3742,1,0,0,0,3741,3743,3,306,
        153,0,3742,3741,1,0,0,0,3742,3743,1,0,0,0,3743,3852,1,0,0,0,3744,
        3746,5,6,0,0,3745,3747,3,72,36,0,3746,3745,1,0,0,0,3746,3747,1,0,
        0,0,3747,3750,1,0,0,0,3748,3749,5,371,0,0,3749,3751,3,412,206,0,
        3750,3748,1,0,0,0,3751,3752,1,0,0,0,3752,3750,1,0,0,0,3752,3753,
        1,0,0,0,3753,3852,1,0,0,0,3754,3756,5,276,0,0,3755,3757,3,72,36,
        0,3756,3755,1,0,0,0,3756,3757,1,0,0,0,3757,3758,1,0,0,0,3758,3759,
        5,25,0,0,3759,3760,5,476,0,0,3760,3765,3,404,202,0,3761,3762,5,480,
        0,0,3762,3764,3,404,202,0,3763,3761,1,0,0,0,3764,3767,1,0,0,0,3765,
        3763,1,0,0,0,3765,3766,1,0,0,0,3766,3768,1,0,0,0,3767,3765,1,0,0,
        0,3768,3769,5,477,0,0,3769,3852,1,0,0,0,3770,3771,5,138,0,0,3771,
        3772,5,25,0,0,3772,3852,3,50,25,0,3773,3774,5,207,0,0,3774,3775,
        5,243,0,0,3775,3776,3,404,202,0,3776,3777,3,306,153,0,3777,3852,
        1,0,0,0,3778,3780,5,276,0,0,3779,3781,3,72,36,0,3780,3779,1,0,0,
        0,3780,3781,1,0,0,0,3781,3782,1,0,0,0,3782,3783,5,476,0,0,3783,3788,
        3,404,202,0,3784,3785,5,480,0,0,3785,3787,3,404,202,0,3786,3784,
        1,0,0,0,3787,3790,1,0,0,0,3788,3786,1,0,0,0,3788,3789,1,0,0,0,3789,
        3791,1,0,0,0,3790,3788,1,0,0,0,3791,3792,5,477,0,0,3792,3852,1,0,
        0,0,3793,3794,5,276,0,0,3794,3795,5,384,0,0,3795,3852,5,79,0,0,3796,
        3797,5,371,0,0,3797,3798,3,412,206,0,3798,3799,5,137,0,0,3799,3800,
        5,433,0,0,3800,3801,5,371,0,0,3801,3802,3,412,206,0,3802,3852,1,
        0,0,0,3803,3805,5,276,0,0,3804,3806,3,72,36,0,3805,3804,1,0,0,0,
        3805,3806,1,0,0,0,3806,3807,1,0,0,0,3807,3808,5,371,0,0,3808,3814,
        3,412,206,0,3809,3810,5,480,0,0,3810,3811,5,371,0,0,3811,3813,3,
        412,206,0,3812,3809,1,0,0,0,3813,3816,1,0,0,0,3814,3812,1,0,0,0,
        3814,3815,1,0,0,0,3815,3852,1,0,0,0,3816,3814,1,0,0,0,3817,3818,
        5,276,0,0,3818,3852,5,196,0,0,3819,3820,5,137,0,0,3820,3821,5,243,
        0,0,3821,3822,3,404,202,0,3822,3823,5,433,0,0,3823,3824,3,404,202,
        0,3824,3852,1,0,0,0,3825,3826,5,137,0,0,3826,3852,3,400,200,0,3827,
        3828,5,403,0,0,3828,3852,3,506,253,0,3829,3831,5,371,0,0,3830,3832,
        3,412,206,0,3831,3830,1,0,0,0,3832,3833,1,0,0,0,3833,3831,1,0,0,
        0,3833,3834,1,0,0,0,3834,3835,1,0,0,0,3835,3836,5,403,0,0,3836,3837,
        3,506,253,0,3837,3852,1,0,0,0,3838,3839,5,391,0,0,3839,3852,3,258,
        129,0,3840,3841,5,440,0,0,3841,3847,5,423,0,0,3842,3848,3,412,206,
        0,3843,3844,5,476,0,0,3844,3845,3,416,208,0,3845,3846,5,477,0,0,
        3846,3848,1,0,0,0,3847,3842,1,0,0,0,3847,3843,1,0,0,0,3848,3852,
        1,0,0,0,3849,3850,5,460,0,0,3850,3852,5,111,0,0,3851,3698,1,0,0,
        0,3851,3703,1,0,0,0,3851,3720,1,0,0,0,3851,3744,1,0,0,0,3851,3754,
        1,0,0,0,3851,3770,1,0,0,0,3851,3773,1,0,0,0,3851,3778,1,0,0,0,3851,
        3793,1,0,0,0,3851,3796,1,0,0,0,3851,3803,1,0,0,0,3851,3817,1,0,0,
        0,3851,3819,1,0,0,0,3851,3825,1,0,0,0,3851,3827,1,0,0,0,3851,3829,
        1,0,0,0,3851,3838,1,0,0,0,3851,3840,1,0,0,0,3851,3849,1,0,0,0,3852,
        505,1,0,0,0,3853,3858,3,256,128,0,3854,3855,3,382,191,0,3855,3856,
        3,382,191,0,3856,3858,1,0,0,0,3857,3853,1,0,0,0,3857,3854,1,0,0,
        0,3858,3870,1,0,0,0,3859,3860,5,89,0,0,3860,3870,3,428,214,0,3861,
        3862,5,404,0,0,3862,3866,3,428,214,0,3863,3864,5,453,0,0,3864,3865,
        5,163,0,0,3865,3867,3,412,206,0,3866,3863,1,0,0,0,3866,3867,1,0,
        0,0,3867,3870,1,0,0,0,3868,3870,3,20,10,0,3869,3857,1,0,0,0,3869,
        3859,1,0,0,0,3869,3861,1,0,0,0,3869,3868,1,0,0,0,3870,507,1,0,0,
        0,3871,3872,5,276,0,0,3872,3874,5,16,0,0,3873,3875,3,410,205,0,3874,
        3873,1,0,0,0,3874,3875,1,0,0,0,3875,3876,1,0,0,0,3876,3877,3,392,
        196,0,3877,509,1,0,0,0,3878,3880,5,276,0,0,3879,3881,5,172,0,0,3880,
        3879,1,0,0,0,3880,3881,1,0,0,0,3881,3882,1,0,0,0,3882,3884,5,422,
        0,0,3883,3885,3,410,205,0,3884,3883,1,0,0,0,3884,3885,1,0,0,0,3885,
        3886,1,0,0,0,3886,3888,3,400,200,0,3887,3889,5,385,0,0,3888,3887,
        1,0,0,0,3888,3889,1,0,0,0,3889,511,1,0,0,0,3890,3891,5,276,0,0,3891,
        3893,5,31,0,0,3892,3894,3,410,205,0,3893,3892,1,0,0,0,3893,3894,
        1,0,0,0,3894,3895,1,0,0,0,3895,3897,3,394,197,0,3896,3898,7,59,0,
        0,3897,3896,1,0,0,0,3897,3898,1,0,0,0,3898,513,1,0,0,0,3899,3901,
        5,276,0,0,3900,3902,5,172,0,0,3901,3900,1,0,0,0,3901,3902,1,0,0,
        0,3902,3903,1,0,0,0,3903,3905,5,193,0,0,3904,3906,3,410,205,0,3905,
        3904,1,0,0,0,3905,3906,1,0,0,0,3906,3907,1,0,0,0,3907,3908,3,404,
        202,0,3908,515,1,0,0,0,3909,3913,5,276,0,0,3910,3914,5,172,0,0,3911,
        3912,5,172,0,0,3912,3914,5,419,0,0,3913,3910,1,0,0,0,3913,3911,1,
        0,0,0,3913,3914,1,0,0,0,3914,3915,1,0,0,0,3915,3917,5,299,0,0,3916,
        3918,3,410,205,0,3917,3916,1,0,0,0,3917,3918,1,0,0,0,3918,3919,1,
        0,0,0,3919,3920,3,346,173,0,3920,517,1,0,0,0,3921,3922,5,436,0,0,
        3922,3923,5,422,0,0,3923,3926,3,398,199,0,3924,3925,5,371,0,0,3925,
        3927,3,412,206,0,3926,3924,1,0,0,0,3926,3927,1,0,0,0,3927,519,1,
        0,0,0,3928,3929,5,393,0,0,3929,3930,5,422,0,0,3930,3931,3,400,200,
        0,3931,521,1,0,0,0,3932,3933,5,207,0,0,3933,3934,5,193,0,0,3934,
        3938,3,400,200,0,3935,3939,3,76,38,0,3936,3937,5,212,0,0,3937,3939,
        3,94,47,0,3938,3935,1,0,0,0,3938,3936,1,0,0,0,3939,3964,1,0,0,0,
        3940,3941,5,207,0,0,3941,3942,5,193,0,0,3942,3943,3,400,200,0,3943,
        3944,5,403,0,0,3944,3945,5,423,0,0,3945,3946,3,172,86,0,3946,3964,
        1,0,0,0,3947,3948,5,207,0,0,3948,3949,5,193,0,0,3949,3950,3,400,
        200,0,3950,3951,5,440,0,0,3951,3952,5,423,0,0,3952,3953,5,476,0,
        0,3953,3958,3,416,208,0,3954,3955,5,480,0,0,3955,3957,3,416,208,
        0,3956,3954,1,0,0,0,3957,3960,1,0,0,0,3958,3956,1,0,0,0,3958,3959,
        1,0,0,0,3959,3961,1,0,0,0,3960,3958,1,0,0,0,3961,3962,5,477,0,0,
        3962,3964,1,0,0,0,3963,3932,1,0,0,0,3963,3940,1,0,0,0,3963,3947,
        1,0,0,0,3964,523,1,0,0,0,3965,3966,5,207,0,0,3966,3967,5,31,0,0,
        3967,3975,3,394,197,0,3968,3976,3,78,39,0,3969,3970,5,403,0,0,3970,
        3971,5,89,0,0,3971,3976,3,70,35,0,3972,3973,5,403,0,0,3973,3974,
        5,34,0,0,3974,3976,3,412,206,0,3975,3968,1,0,0,0,3975,3969,1,0,0,
        0,3975,3972,1,0,0,0,3976,525,1,0,0,0,3977,3981,5,207,0,0,3978,3982,
        5,172,0,0,3979,3980,5,172,0,0,3980,3982,5,419,0,0,3981,3978,1,0,
        0,0,3981,3979,1,0,0,0,3981,3982,1,0,0,0,3982,3983,1,0,0,0,3983,3985,
        5,299,0,0,3984,3986,3,410,205,0,3985,3984,1,0,0,0,3985,3986,1,0,
        0,0,3986,3987,1,0,0,0,3987,3988,3,404,202,0,3988,3989,5,212,0,0,
        3989,3992,3,382,191,0,3990,3991,5,328,0,0,3991,3993,7,58,0,0,3992,
        3990,1,0,0,0,3992,3993,1,0,0,0,3993,527,1,0,0,0,3994,3995,7,60,0,
        0,3995,3996,5,476,0,0,3996,3997,3,320,160,0,3997,3998,5,477,0,0,
        3998,4031,1,0,0,0,3999,4000,5,411,0,0,4000,4001,5,476,0,0,4001,4006,
        3,424,212,0,4002,4003,5,480,0,0,4003,4005,3,320,160,0,4004,4002,
        1,0,0,0,4005,4008,1,0,0,0,4006,4004,1,0,0,0,4006,4007,1,0,0,0,4007,
        4009,1,0,0,0,4008,4006,1,0,0,0,4009,4010,5,477,0,0,4010,4031,1,0,
        0,0,4011,4012,5,326,0,0,4012,4013,5,476,0,0,4013,4018,3,428,214,
        0,4014,4015,5,480,0,0,4015,4017,3,320,160,0,4016,4014,1,0,0,0,4017,
        4020,1,0,0,0,4018,4016,1,0,0,0,4018,4019,1,0,0,0,4019,4021,1,0,0,
        0,4020,4018,1,0,0,0,4021,4022,5,477,0,0,4022,4031,1,0,0,0,4023,4024,
        5,370,0,0,4024,4025,5,476,0,0,4025,4026,3,428,214,0,4026,4027,5,
        480,0,0,4027,4028,3,428,214,0,4028,4029,5,477,0,0,4029,4031,1,0,
        0,0,4030,3994,1,0,0,0,4030,3999,1,0,0,0,4030,4011,1,0,0,0,4030,4023,
        1,0,0,0,4031,529,1,0,0,0,4032,4034,5,49,0,0,4033,4032,1,0,0,0,4033,
        4034,1,0,0,0,4034,4037,1,0,0,0,4035,4036,5,309,0,0,4036,4038,5,265,
        0,0,4037,4035,1,0,0,0,4037,4038,1,0,0,0,4038,4040,1,0,0,0,4039,4041,
        3,264,132,0,4040,4039,1,0,0,0,4040,4041,1,0,0,0,4041,4047,1,0,0,
        0,4042,4043,5,371,0,0,4043,4044,5,476,0,0,4044,4045,3,414,207,0,
        4045,4046,5,477,0,0,4046,4048,1,0,0,0,4047,4042,1,0,0,0,4047,4048,
        1,0,0,0,4048,531,1,0,0,0,4049,4057,3,404,202,0,4050,4051,5,296,0,
        0,4051,4053,3,404,202,0,4052,4050,1,0,0,0,4052,4053,1,0,0,0,4053,
        4054,1,0,0,0,4054,4055,5,334,0,0,4055,4057,3,320,160,0,4056,4049,
        1,0,0,0,4056,4052,1,0,0,0,4057,533,1,0,0,0,4058,4059,5,180,0,0,4059,
        4071,3,316,158,0,4060,4061,5,445,0,0,4061,4067,3,428,214,0,4062,
        4065,5,212,0,0,4063,4066,3,316,158,0,4064,4066,3,274,137,0,4065,
        4063,1,0,0,0,4065,4064,1,0,0,0,4066,4068,1,0,0,0,4067,4062,1,0,0,
        0,4067,4068,1,0,0,0,4068,4072,1,0,0,0,4069,4072,3,164,82,0,4070,
        4072,3,166,83,0,4071,4060,1,0,0,0,4071,4069,1,0,0,0,4071,4070,1,
        0,0,0,4072,535,1,0,0,0,4073,4074,5,314,0,0,4074,4075,5,108,0,0,4075,
        4076,5,272,0,0,4076,4077,3,538,269,0,4077,537,1,0,0,0,4078,4080,
        3,70,35,0,4079,4078,1,0,0,0,4079,4080,1,0,0,0,4080,4081,1,0,0,0,
        4081,4082,5,445,0,0,4082,4083,5,501,0,0,4083,4084,5,105,0,0,4084,
        4085,5,476,0,0,4085,4087,3,314,157,0,4086,4088,3,424,212,0,4087,
        4086,1,0,0,0,4087,4088,1,0,0,0,4088,4096,1,0,0,0,4089,4090,5,480,
        0,0,4090,4092,3,314,157,0,4091,4093,3,424,212,0,4092,4091,1,0,0,
        0,4092,4093,1,0,0,0,4093,4095,1,0,0,0,4094,4089,1,0,0,0,4095,4098,
        1,0,0,0,4096,4094,1,0,0,0,4096,4097,1,0,0,0,4097,4099,1,0,0,0,4098,
        4096,1,0,0,0,4099,4100,5,477,0,0,4100,4101,3,94,47,0,4101,4125,1,
        0,0,0,4102,4103,5,445,0,0,4103,4104,5,501,0,0,4104,4105,5,105,0,
        0,4105,4110,5,476,0,0,4106,4108,5,498,0,0,4107,4109,3,70,35,0,4108,
        4107,1,0,0,0,4108,4109,1,0,0,0,4109,4111,1,0,0,0,4110,4106,1,0,0,
        0,4110,4111,1,0,0,0,4111,4119,1,0,0,0,4112,4113,5,480,0,0,4113,4115,
        3,314,157,0,4114,4116,3,424,212,0,4115,4114,1,0,0,0,4115,4116,1,
        0,0,0,4116,4118,1,0,0,0,4117,4112,1,0,0,0,4118,4121,1,0,0,0,4119,
        4117,1,0,0,0,4119,4120,1,0,0,0,4120,4122,1,0,0,0,4121,4119,1,0,0,
        0,4122,4123,5,477,0,0,4123,4125,3,94,47,0,4124,4079,1,0,0,0,4124,
        4102,1,0,0,0,4125,539,1,0,0,0,4126,4127,5,314,0,0,4127,4128,5,108,
        0,0,4128,4129,5,337,0,0,4129,4130,5,272,0,0,4130,4133,3,70,35,0,
        4131,4134,3,42,21,0,4132,4134,3,542,271,0,4133,4131,1,0,0,0,4133,
        4132,1,0,0,0,4134,4135,1,0,0,0,4135,4136,3,94,47,0,4136,541,1,0,
        0,0,4137,4138,3,48,24,0,4138,4139,3,40,20,0,4139,543,1,0,0,0,4140,
        4141,5,216,0,0,4141,4142,5,166,0,0,4142,4143,5,403,0,0,4143,4147,
        5,481,0,0,4144,4145,3,90,45,0,4145,4146,5,481,0,0,4146,4148,1,0,
        0,0,4147,4144,1,0,0,0,4148,4149,1,0,0,0,4149,4147,1,0,0,0,4149,4150,
        1,0,0,0,4150,4151,1,0,0,0,4151,4152,5,279,0,0,4152,545,1,0,0,0,4153,
        4154,5,166,0,0,4154,4155,5,403,0,0,4155,4159,5,216,0,0,4156,4157,
        3,90,45,0,4157,4158,5,481,0,0,4158,4160,1,0,0,0,4159,4156,1,0,0,
        0,4160,4161,1,0,0,0,4161,4159,1,0,0,0,4161,4162,1,0,0,0,4162,4163,
        1,0,0,0,4163,4164,5,279,0,0,4164,547,1,0,0,0,4165,4166,5,314,0,0,
        4166,4168,7,5,0,0,4167,4169,5,422,0,0,4168,4167,1,0,0,0,4168,4169,
        1,0,0,0,4169,4170,1,0,0,0,4170,4171,3,400,200,0,4171,4172,5,422,
        0,0,4172,4173,3,400,200,0,4173,549,1,0,0,0,4174,4175,5,251,0,0,4175,
        4176,5,289,0,0,4176,4178,5,422,0,0,4177,4179,3,408,204,0,4178,4177,
        1,0,0,0,4178,4179,1,0,0,0,4179,4180,1,0,0,0,4180,4181,3,398,199,
        0,4181,4183,3,50,25,0,4182,4184,3,552,276,0,4183,4182,1,0,0,0,4184,
        4185,1,0,0,0,4185,4183,1,0,0,0,4185,4186,1,0,0,0,4186,551,1,0,0,
        0,4187,4220,3,48,24,0,4188,4220,3,40,20,0,4189,4190,5,398,0,0,4190,
        4191,5,56,0,0,4191,4192,5,404,0,0,4192,4220,3,428,214,0,4193,4194,
        5,335,0,0,4194,4195,5,425,0,0,4195,4196,5,226,0,0,4196,4220,3,428,
        214,0,4197,4198,5,357,0,0,4198,4199,5,36,0,0,4199,4200,5,212,0,0,
        4200,4220,3,428,214,0,4201,4202,5,282,0,0,4202,4203,5,226,0,0,4203,
        4220,3,428,214,0,4204,4205,5,258,0,0,4205,4206,5,323,0,0,4206,4207,
        5,425,0,0,4207,4208,5,226,0,0,4208,4220,3,428,214,0,4209,4220,3,
        42,21,0,4210,4220,3,44,22,0,4211,4220,3,46,23,0,4212,4220,3,14,7,
        0,4213,4214,5,91,0,0,4214,4215,5,80,0,0,4215,4216,5,425,0,0,4216,
        4217,5,226,0,0,4217,4220,3,428,214,0,4218,4220,3,38,19,0,4219,4187,
        1,0,0,0,4219,4188,1,0,0,0,4219,4189,1,0,0,0,4219,4193,1,0,0,0,4219,
        4197,1,0,0,0,4219,4201,1,0,0,0,4219,4204,1,0,0,0,4219,4209,1,0,0,
        0,4219,4210,1,0,0,0,4219,4211,1,0,0,0,4219,4212,1,0,0,0,4219,4213,
        1,0,0,0,4219,4218,1,0,0,0,4220,553,1,0,0,0,4221,4223,5,251,0,0,4222,
        4224,5,172,0,0,4223,4222,1,0,0,0,4223,4224,1,0,0,0,4224,4225,1,0,
        0,0,4225,4227,5,422,0,0,4226,4228,3,408,204,0,4227,4226,1,0,0,0,
        4227,4228,1,0,0,0,4228,4229,1,0,0,0,4229,4231,3,398,199,0,4230,4232,
        3,556,278,0,4231,4230,1,0,0,0,4232,4233,1,0,0,0,4233,4231,1,0,0,
        0,4233,4234,1,0,0,0,4234,555,1,0,0,0,4235,4251,3,42,21,0,4236,4237,
        5,212,0,0,4237,4251,3,94,47,0,4238,4251,3,50,25,0,4239,4251,3,36,
        18,0,4240,4251,3,406,203,0,4241,4251,3,264,132,0,4242,4251,3,188,
        94,0,4243,4251,3,306,153,0,4244,4251,3,48,24,0,4245,4251,3,40,20,
        0,4246,4251,3,20,10,0,4247,4251,3,44,22,0,4248,4251,3,46,23,0,4249,
        4251,3,38,19,0,4250,4235,1,0,0,0,4250,4236,1,0,0,0,4250,4238,1,0,
        0,0,4250,4239,1,0,0,0,4250,4240,1,0,0,0,4250,4241,1,0,0,0,4250,4242,
        1,0,0,0,4250,4243,1,0,0,0,4250,4244,1,0,0,0,4250,4245,1,0,0,0,4250,
        4246,1,0,0,0,4250,4247,1,0,0,0,4250,4248,1,0,0,0,4250,4249,1,0,0,
        0,4251,557,1,0,0,0,521,563,565,578,582,586,592,598,603,620,630,637,
        643,652,656,663,679,687,697,706,716,727,732,736,754,760,764,773,
        778,782,788,790,795,797,802,804,810,814,820,830,840,848,855,864,
        870,876,883,893,903,911,919,928,933,939,948,960,966,972,984,994,
        1004,1010,1015,1019,1021,1025,1032,1036,1051,1065,1072,1076,1079,
        1089,1104,1107,1110,1113,1116,1118,1123,1127,1130,1133,1136,1140,
        1149,1156,1161,1170,1182,1187,1198,1205,1216,1220,1224,1228,1232,
        1241,1246,1255,1258,1263,1267,1283,1297,1305,1311,1317,1321,1326,
        1329,1333,1336,1339,1342,1347,1353,1358,1370,1378,1382,1390,1401,
        1407,1411,1414,1418,1424,1432,1445,1454,1460,1465,1469,1478,1483,
        1487,1500,1503,1507,1521,1529,1537,1555,1559,1573,1593,1599,1604,
        1608,1611,1615,1620,1625,1629,1635,1638,1644,1650,1667,1685,1690,
        1700,1708,1717,1723,1726,1732,1741,1751,1761,1767,1773,1777,1781,
        1788,1800,1812,1817,1826,1856,1864,1868,1871,1874,1877,1884,1887,
        1890,1893,1896,1899,1902,1907,1910,1919,1929,1934,1938,1943,1948,
        1957,1976,1984,1992,1996,2000,2010,2036,2044,2056,2077,2082,2086,
        2099,2104,2108,2116,2120,2125,2131,2134,2143,2148,2156,2164,2167,
        2181,2186,2190,2206,2215,2228,2236,2246,2267,2283,2290,2296,2299,
        2302,2312,2315,2323,2327,2332,2337,2341,2349,2353,2357,2361,2365,
        2369,2373,2377,2381,2385,2389,2393,2397,2401,2405,2409,2413,2419,
        2421,2435,2437,2448,2451,2453,2457,2461,2468,2477,2483,2496,2503,
        2508,2514,2521,2523,2526,2538,2543,2546,2552,2555,2561,2563,2569,
        2590,2592,2600,2604,2613,2617,2633,2642,2669,2677,2684,2687,2701,
        2706,2718,2727,2736,2743,2752,2763,2775,2787,2803,2810,2818,2831,
        2836,2840,2847,2852,2860,2864,2871,2875,2884,2896,2903,2909,2940,
        2945,2962,2970,2978,2985,2997,3013,3019,3025,3028,3055,3062,3065,
        3068,3071,3076,3079,3082,3085,3096,3100,3103,3108,3112,3115,3117,
        3122,3126,3130,3134,3138,3149,3152,3155,3158,3161,3195,3200,3202,
        3206,3209,3212,3218,3234,3248,3251,3264,3277,3289,3295,3303,3307,
        3313,3319,3326,3337,3346,3359,3361,3364,3372,3375,3383,3387,3391,
        3397,3409,3412,3416,3423,3431,3436,3443,3456,3458,3466,3470,3473,
        3477,3490,3498,3505,3508,3517,3520,3525,3528,3539,3545,3548,3554,
        3567,3571,3575,3578,3583,3586,3589,3593,3597,3600,3608,3613,3617,
        3624,3630,3638,3649,3660,3669,3679,3684,3688,3698,3703,3707,3710,
        3713,3718,3720,3725,3730,3734,3739,3742,3746,3752,3756,3765,3780,
        3788,3805,3814,3833,3847,3851,3857,3866,3869,3874,3880,3884,3888,
        3893,3897,3901,3905,3913,3917,3926,3938,3958,3963,3975,3981,3985,
        3992,4006,4018,4030,4033,4037,4040,4047,4052,4056,4065,4067,4071,
        4079,4087,4092,4096,4108,4110,4115,4119,4124,4133,4149,4161,4168,
        4178,4185,4219,4223,4227,4233,4250
    ];

    private static __ATN: antlr.ATN;
    public static get _ATN(): antlr.ATN {
        if (!SparkSQLParser.__ATN) {
            SparkSQLParser.__ATN = new antlr.ATNDeserializer().deserialize(SparkSQLParser._serializedATN);
        }

        return SparkSQLParser.__ATN;
    }


    private static readonly vocabulary = new antlr.Vocabulary(SparkSQLParser.literalNames, SparkSQLParser.symbolicNames, []);

    public override get vocabulary(): antlr.Vocabulary {
        return SparkSQLParser.vocabulary;
    }

    private static readonly decisionsToDFA = SparkSQLParser._ATN.decisionToState.map( (ds: antlr.DecisionState, index: number) => new antlr.DFA(ds, index) );
}

export class StatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public sqlStatements(): SqlStatementsContext {
        return this.getRuleContext(0, SqlStatementsContext)!;
    }
    public EOF(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.EOF, 0)!;
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_statement;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterStatement) {
             listener.enterStatement(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitStatement) {
             listener.exitStatement(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitStatement) {
            return visitor.visitStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SqlStatementsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public sqlStatement(): SqlStatementContext[];
    public sqlStatement(i: number): SqlStatementContext | null;
    public sqlStatement(i?: number): SqlStatementContext[] | SqlStatementContext | null {
        if (i === undefined) {
            return this.getRuleContexts(SqlStatementContext);
        }

        return this.getRuleContext(i, SqlStatementContext);
    }
    public emptyStatement(): EmptyStatementContext[];
    public emptyStatement(i: number): EmptyStatementContext | null;
    public emptyStatement(i?: number): EmptyStatementContext[] | EmptyStatementContext | null {
        if (i === undefined) {
            return this.getRuleContexts(EmptyStatementContext);
        }

        return this.getRuleContext(i, EmptyStatementContext);
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_sqlStatements;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterSqlStatements) {
             listener.enterSqlStatements(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitSqlStatements) {
             listener.exitSqlStatements(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitSqlStatements) {
            return visitor.visitSqlStatements(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class EmptyStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SEMICOLON(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.SEMICOLON, 0)!;
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_emptyStatement;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterEmptyStatement) {
             listener.enterEmptyStatement(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitEmptyStatement) {
             listener.exitEmptyStatement(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitEmptyStatement) {
            return visitor.visitEmptyStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public createTable(): CreateTableContext {
        return this.getRuleContext(0, CreateTableContext)!;
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_createStatement;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterCreateStatement) {
             listener.enterCreateStatement(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitCreateStatement) {
             listener.exitCreateStatement(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitCreateStatement) {
            return visitor.visitCreateStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateTableContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public simpleCreateTable(): SimpleCreateTableContext | null {
        return this.getRuleContext(0, SimpleCreateTableContext);
    }
    public createTableAsSelect(): CreateTableAsSelectContext | null {
        return this.getRuleContext(0, CreateTableAsSelectContext);
    }
    public createMaterializedTableAsSelect(): CreateMaterializedTableAsSelectContext | null {
        return this.getRuleContext(0, CreateMaterializedTableAsSelectContext);
    }
    public createCustomSerde(): CreateCustomSerdeContext | null {
        return this.getRuleContext(0, CreateCustomSerdeContext);
    }
    public createCustomSerdeExternal(): CreateCustomSerdeExternalContext | null {
        return this.getRuleContext(0, CreateCustomSerdeExternalContext);
    }
    public usingCreate(): UsingCreateContext | null {
        return this.getRuleContext(0, UsingCreateContext);
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_createTable;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterCreateTable) {
             listener.enterCreateTable(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitCreateTable) {
             listener.exitCreateTable(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitCreateTable) {
            return visitor.visitCreateTable(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SimpleCreateTableContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_CREATE(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_CREATE, 0)!;
    }
    public KW_TABLE(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_TABLE, 0)!;
    }
    public tablePathCreate(): TablePathCreateContext {
        return this.getRuleContext(0, TablePathCreateContext)!;
    }
    public columnsBody(): ColumnsBodyContext | null {
        return this.getRuleContext(0, ColumnsBodyContext);
    }
    public KW_TEMPORARY(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_TEMPORARY, 0);
    }
    public ifNotExists(): IfNotExistsContext | null {
        return this.getRuleContext(0, IfNotExistsContext);
    }
    public simpleCreateTableNoSortElement(): SimpleCreateTableNoSortElementContext[];
    public simpleCreateTableNoSortElement(i: number): SimpleCreateTableNoSortElementContext | null;
    public simpleCreateTableNoSortElement(i?: number): SimpleCreateTableNoSortElementContext[] | SimpleCreateTableNoSortElementContext | null {
        if (i === undefined) {
            return this.getRuleContexts(SimpleCreateTableNoSortElementContext);
        }

        return this.getRuleContext(i, SimpleCreateTableNoSortElementContext);
    }
    public KW_LIKE(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_LIKE, 0);
    }
    public tablePath(): TablePathContext | null {
        return this.getRuleContext(0, TablePathContext);
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_simpleCreateTable;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterSimpleCreateTable) {
             listener.enterSimpleCreateTable(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitSimpleCreateTable) {
             listener.exitSimpleCreateTable(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitSimpleCreateTable) {
            return visitor.visitSimpleCreateTable(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SimpleCreateTableNoSortElementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public partitionDefinition(): PartitionDefinitionContext | null {
        return this.getRuleContext(0, PartitionDefinitionContext);
    }
    public withOption(): WithOptionContext | null {
        return this.getRuleContext(0, WithOptionContext);
    }
    public likeDefinition(): LikeDefinitionContext | null {
        return this.getRuleContext(0, LikeDefinitionContext);
    }
    public distribution(): DistributionContext | null {
        return this.getRuleContext(0, DistributionContext);
    }
    public someByClause(): SomeByClauseContext | null {
        return this.getRuleContext(0, SomeByClauseContext);
    }
    public intoBuckets(): IntoBucketsContext | null {
        return this.getRuleContext(0, IntoBucketsContext);
    }
    public storedAs(): StoredAsContext | null {
        return this.getRuleContext(0, StoredAsContext);
    }
    public hiveFormatpartitionDefinition(): HiveFormatpartitionDefinitionContext | null {
        return this.getRuleContext(0, HiveFormatpartitionDefinitionContext);
    }
    public sortedBy(): SortedByContext | null {
        return this.getRuleContext(0, SortedByContext);
    }
    public rowFormatDelimited(): RowFormatDelimitedContext | null {
        return this.getRuleContext(0, RowFormatDelimitedContext);
    }
    public fieldsTerminatedBy(): FieldsTerminatedByContext | null {
        return this.getRuleContext(0, FieldsTerminatedByContext);
    }
    public using(): UsingContext | null {
        return this.getRuleContext(0, UsingContext);
    }
    public location(): LocationContext | null {
        return this.getRuleContext(0, LocationContext);
    }
    public tblProperties(): TblPropertiesContext | null {
        return this.getRuleContext(0, TblPropertiesContext);
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_simpleCreateTableNoSortElement;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterSimpleCreateTableNoSortElement) {
             listener.enterSimpleCreateTableNoSortElement(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitSimpleCreateTableNoSortElement) {
             listener.exitSimpleCreateTableNoSortElement(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitSimpleCreateTableNoSortElement) {
            return visitor.visitSimpleCreateTableNoSortElement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class LocationContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_LOCATION(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_LOCATION, 0)!;
    }
    public filePath(): FilePathContext {
        return this.getRuleContext(0, FilePathContext)!;
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_location;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterLocation) {
             listener.enterLocation(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitLocation) {
             listener.exitLocation(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitLocation) {
            return visitor.visitLocation(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SortedByContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_SORTED(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_SORTED, 0)!;
    }
    public KW_BY(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_BY, 0)!;
    }
    public LR_BRACKET(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.LR_BRACKET, 0)!;
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public RR_BRACKET(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.RR_BRACKET, 0)!;
    }
    public KW_ASC(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_ASC, 0);
    }
    public KW_DESC(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_DESC, 0);
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_sortedBy;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterSortedBy) {
             listener.enterSortedBy(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitSortedBy) {
             listener.exitSortedBy(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitSortedBy) {
            return visitor.visitSortedBy(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class UsingCreateContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_CREATE(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_CREATE, 0)!;
    }
    public KW_TABLE(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_TABLE, 0)!;
    }
    public tablePathCreate(): TablePathCreateContext {
        return this.getRuleContext(0, TablePathCreateContext)!;
    }
    public columnUsing(): ColumnUsingContext | null {
        return this.getRuleContext(0, ColumnUsingContext);
    }
    public usingByQuery(): UsingByQueryContext | null {
        return this.getRuleContext(0, UsingByQueryContext);
    }
    public defaultColumnUsing(): DefaultColumnUsingContext | null {
        return this.getRuleContext(0, DefaultColumnUsingContext);
    }
    public ifNotExists(): IfNotExistsContext | null {
        return this.getRuleContext(0, IfNotExistsContext);
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_usingCreate;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterUsingCreate) {
             listener.enterUsingCreate(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitUsingCreate) {
             listener.exitUsingCreate(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitUsingCreate) {
            return visitor.visitUsingCreate(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TblPropertiesContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_TBLPROPERTIES(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_TBLPROPERTIES, 0)!;
    }
    public tablePropertyList(): TablePropertyListContext {
        return this.getRuleContext(0, TablePropertyListContext)!;
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_tblProperties;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterTblProperties) {
             listener.enterTblProperties(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitTblProperties) {
             listener.exitTblProperties(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitTblProperties) {
            return visitor.visitTblProperties(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DefaultColumnUsingContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public using(): UsingContext {
        return this.getRuleContext(0, UsingContext)!;
    }
    public queryStatement(): QueryStatementContext | null {
        return this.getRuleContext(0, QueryStatementContext);
    }
    public defaultColumnUsingNoSortElement(): DefaultColumnUsingNoSortElementContext[];
    public defaultColumnUsingNoSortElement(i: number): DefaultColumnUsingNoSortElementContext | null;
    public defaultColumnUsingNoSortElement(i?: number): DefaultColumnUsingNoSortElementContext[] | DefaultColumnUsingNoSortElementContext | null {
        if (i === undefined) {
            return this.getRuleContexts(DefaultColumnUsingNoSortElementContext);
        }

        return this.getRuleContext(i, DefaultColumnUsingNoSortElementContext);
    }
    public KW_AS(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_AS, 0);
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_defaultColumnUsing;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterDefaultColumnUsing) {
             listener.enterDefaultColumnUsing(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitDefaultColumnUsing) {
             listener.exitDefaultColumnUsing(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitDefaultColumnUsing) {
            return visitor.visitDefaultColumnUsing(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DefaultColumnUsingNoSortElementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public partitionDefinition(): PartitionDefinitionContext | null {
        return this.getRuleContext(0, PartitionDefinitionContext);
    }
    public KW_OPTIONS(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_OPTIONS, 0);
    }
    public tablePropertyList(): TablePropertyListContext | null {
        return this.getRuleContext(0, TablePropertyListContext);
    }
    public tblProperties(): TblPropertiesContext | null {
        return this.getRuleContext(0, TblPropertiesContext);
    }
    public someByClause(): SomeByClauseContext | null {
        return this.getRuleContext(0, SomeByClauseContext);
    }
    public intoBuckets(): IntoBucketsContext | null {
        return this.getRuleContext(0, IntoBucketsContext);
    }
    public KW_WITH(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_WITH, 0);
    }
    public tableAlias(): TableAliasContext | null {
        return this.getRuleContext(0, TableAliasContext);
    }
    public LB_BRACKET(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.LB_BRACKET, 0);
    }
    public queryStatement(): QueryStatementContext | null {
        return this.getRuleContext(0, QueryStatementContext);
    }
    public RR_BRACKET(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.RR_BRACKET, 0);
    }
    public commentSpec(): CommentSpecContext | null {
        return this.getRuleContext(0, CommentSpecContext);
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_defaultColumnUsingNoSortElement;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterDefaultColumnUsingNoSortElement) {
             listener.enterDefaultColumnUsingNoSortElement(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitDefaultColumnUsingNoSortElement) {
             listener.exitDefaultColumnUsingNoSortElement(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitDefaultColumnUsingNoSortElement) {
            return visitor.visitDefaultColumnUsingNoSortElement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ColumnUsingContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public columnsBody(): ColumnsBodyContext | null {
        return this.getRuleContext(0, ColumnsBodyContext);
    }
    public using(): UsingContext | null {
        return this.getRuleContext(0, UsingContext);
    }
    public columnUsingNoSortElement(): ColumnUsingNoSortElementContext[];
    public columnUsingNoSortElement(i: number): ColumnUsingNoSortElementContext | null;
    public columnUsingNoSortElement(i?: number): ColumnUsingNoSortElementContext[] | ColumnUsingNoSortElementContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ColumnUsingNoSortElementContext);
        }

        return this.getRuleContext(i, ColumnUsingNoSortElementContext);
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_columnUsing;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterColumnUsing) {
             listener.enterColumnUsing(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitColumnUsing) {
             listener.exitColumnUsing(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitColumnUsing) {
            return visitor.visitColumnUsing(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ColumnUsingNoSortElementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public partitionDefinition(): PartitionDefinitionContext | null {
        return this.getRuleContext(0, PartitionDefinitionContext);
    }
    public KW_OPTIONS(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_OPTIONS, 0);
    }
    public tablePropertyList(): TablePropertyListContext | null {
        return this.getRuleContext(0, TablePropertyListContext);
    }
    public tblProperties(): TblPropertiesContext | null {
        return this.getRuleContext(0, TblPropertiesContext);
    }
    public someByClause(): SomeByClauseContext | null {
        return this.getRuleContext(0, SomeByClauseContext);
    }
    public intoBuckets(): IntoBucketsContext | null {
        return this.getRuleContext(0, IntoBucketsContext);
    }
    public commentSpec(): CommentSpecContext | null {
        return this.getRuleContext(0, CommentSpecContext);
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_columnUsingNoSortElement;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterColumnUsingNoSortElement) {
             listener.enterColumnUsingNoSortElement(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitColumnUsingNoSortElement) {
             listener.exitColumnUsingNoSortElement(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitColumnUsingNoSortElement) {
            return visitor.visitColumnUsingNoSortElement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class UsingByQueryContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public using(): UsingContext | null {
        return this.getRuleContext(0, UsingContext);
    }
    public KW_AS(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_AS, 0);
    }
    public queryStatement(): QueryStatementContext | null {
        return this.getRuleContext(0, QueryStatementContext);
    }
    public usingByQueryNoSortElement(): UsingByQueryNoSortElementContext[];
    public usingByQueryNoSortElement(i: number): UsingByQueryNoSortElementContext | null;
    public usingByQueryNoSortElement(i?: number): UsingByQueryNoSortElementContext[] | UsingByQueryNoSortElementContext | null {
        if (i === undefined) {
            return this.getRuleContexts(UsingByQueryNoSortElementContext);
        }

        return this.getRuleContext(i, UsingByQueryNoSortElementContext);
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_usingByQuery;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterUsingByQuery) {
             listener.enterUsingByQuery(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitUsingByQuery) {
             listener.exitUsingByQuery(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitUsingByQuery) {
            return visitor.visitUsingByQuery(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class UsingByQueryNoSortElementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public partitionDefinition(): PartitionDefinitionContext | null {
        return this.getRuleContext(0, PartitionDefinitionContext);
    }
    public KW_OPTIONS(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_OPTIONS, 0);
    }
    public tablePropertyList(): TablePropertyListContext | null {
        return this.getRuleContext(0, TablePropertyListContext);
    }
    public tblProperties(): TblPropertiesContext | null {
        return this.getRuleContext(0, TblPropertiesContext);
    }
    public someByClause(): SomeByClauseContext | null {
        return this.getRuleContext(0, SomeByClauseContext);
    }
    public intoBuckets(): IntoBucketsContext | null {
        return this.getRuleContext(0, IntoBucketsContext);
    }
    public commentSpec(): CommentSpecContext | null {
        return this.getRuleContext(0, CommentSpecContext);
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_usingByQueryNoSortElement;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterUsingByQueryNoSortElement) {
             listener.enterUsingByQueryNoSortElement(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitUsingByQueryNoSortElement) {
             listener.exitUsingByQueryNoSortElement(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitUsingByQueryNoSortElement) {
            return visitor.visitUsingByQueryNoSortElement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class IntoBucketsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_INTO(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_INTO, 0)!;
    }
    public DIG_LITERAL(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.DIG_LITERAL, 0)!;
    }
    public KW_BUCKETS(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_BUCKETS, 0)!;
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_intoBuckets;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterIntoBuckets) {
             listener.enterIntoBuckets(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitIntoBuckets) {
             listener.exitIntoBuckets(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitIntoBuckets) {
            return visitor.visitIntoBuckets(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class HiveFormatpartitionDefinitionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_PARTITIONED(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_PARTITIONED, 0)!;
    }
    public KW_BY(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_BY, 0)!;
    }
    public LR_BRACKET(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.LR_BRACKET, 0)!;
    }
    public ID_LITERAL(): antlr.TerminalNode[];
    public ID_LITERAL(i: number): antlr.TerminalNode | null;
    public ID_LITERAL(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSQLParser.ID_LITERAL);
    	} else {
    		return this.getToken(SparkSQLParser.ID_LITERAL, i);
    	}
    }
    public RR_BRACKET(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.RR_BRACKET, 0)!;
    }
    public sqlSimpleType(): SqlSimpleTypeContext[];
    public sqlSimpleType(i: number): SqlSimpleTypeContext | null;
    public sqlSimpleType(i?: number): SqlSimpleTypeContext[] | SqlSimpleTypeContext | null {
        if (i === undefined) {
            return this.getRuleContexts(SqlSimpleTypeContext);
        }

        return this.getRuleContext(i, SqlSimpleTypeContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSQLParser.COMMA);
    	} else {
    		return this.getToken(SparkSQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_hiveFormatpartitionDefinition;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterHiveFormatpartitionDefinition) {
             listener.enterHiveFormatpartitionDefinition(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitHiveFormatpartitionDefinition) {
             listener.exitHiveFormatpartitionDefinition(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitHiveFormatpartitionDefinition) {
            return visitor.visitHiveFormatpartitionDefinition(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RowFormatSerdeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ROW(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_ROW, 0)!;
    }
    public KW_FORMAT(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_FORMAT, 0)!;
    }
    public KW_SERDE(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_SERDE, 0)!;
    }
    public stringLiteral(): StringLiteralContext {
        return this.getRuleContext(0, StringLiteralContext)!;
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_rowFormatSerde;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterRowFormatSerde) {
             listener.enterRowFormatSerde(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitRowFormatSerde) {
             listener.exitRowFormatSerde(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitRowFormatSerde) {
            return visitor.visitRowFormatSerde(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FieldsTerminatedByContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_FIELDS(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_FIELDS, 0)!;
    }
    public KW_TERMINATED(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_TERMINATED, 0)!;
    }
    public KW_BY(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_BY, 0)!;
    }
    public stringLiteral(): StringLiteralContext {
        return this.getRuleContext(0, StringLiteralContext)!;
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_fieldsTerminatedBy;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterFieldsTerminatedBy) {
             listener.enterFieldsTerminatedBy(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitFieldsTerminatedBy) {
             listener.exitFieldsTerminatedBy(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitFieldsTerminatedBy) {
            return visitor.visitFieldsTerminatedBy(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class StoredAsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_STORED(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_STORED, 0)!;
    }
    public KW_AS(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_AS, 0)!;
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_storedAs;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterStoredAs) {
             listener.enterStoredAs(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitStoredAs) {
             listener.exitStoredAs(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitStoredAs) {
            return visitor.visitStoredAs(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class StoredAsInputformatContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_STORED(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_STORED, 0)!;
    }
    public KW_AS(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_AS, 0)!;
    }
    public KW_INPUTFORMAT(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_INPUTFORMAT, 0)!;
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_storedAsInputformat;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterStoredAsInputformat) {
             listener.enterStoredAsInputformat(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitStoredAsInputformat) {
             listener.exitStoredAsInputformat(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitStoredAsInputformat) {
            return visitor.visitStoredAsInputformat(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class OutputformatContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_OUTPUTFORMAT(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_OUTPUTFORMAT, 0)!;
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_outputformat;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterOutputformat) {
             listener.enterOutputformat(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitOutputformat) {
             listener.exitOutputformat(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitOutputformat) {
            return visitor.visitOutputformat(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RowFormatDelimtedContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ROW(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_ROW, 0)!;
    }
    public KW_FORMAT(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_FORMAT, 0)!;
    }
    public KW_DELIMITED(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_DELIMITED, 0)!;
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_rowFormatDelimted;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterRowFormatDelimted) {
             listener.enterRowFormatDelimted(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitRowFormatDelimted) {
             listener.exitRowFormatDelimted(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitRowFormatDelimted) {
            return visitor.visitRowFormatDelimted(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ColumnsBodyContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LR_BRACKET(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.LR_BRACKET, 0)!;
    }
    public columnOptionDefinition(): ColumnOptionDefinitionContext[];
    public columnOptionDefinition(i: number): ColumnOptionDefinitionContext | null;
    public columnOptionDefinition(i?: number): ColumnOptionDefinitionContext[] | ColumnOptionDefinitionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ColumnOptionDefinitionContext);
        }

        return this.getRuleContext(i, ColumnOptionDefinitionContext);
    }
    public RR_BRACKET(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.RR_BRACKET, 0)!;
    }
    public commentSpec(): CommentSpecContext[];
    public commentSpec(i: number): CommentSpecContext | null;
    public commentSpec(i?: number): CommentSpecContext[] | CommentSpecContext | null {
        if (i === undefined) {
            return this.getRuleContexts(CommentSpecContext);
        }

        return this.getRuleContext(i, CommentSpecContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSQLParser.COMMA);
    	} else {
    		return this.getToken(SparkSQLParser.COMMA, i);
    	}
    }
    public watermarkDefinition(): WatermarkDefinitionContext | null {
        return this.getRuleContext(0, WatermarkDefinitionContext);
    }
    public tableConstraint(): TableConstraintContext | null {
        return this.getRuleContext(0, TableConstraintContext);
    }
    public selfDefinitionClause(): SelfDefinitionClauseContext | null {
        return this.getRuleContext(0, SelfDefinitionClauseContext);
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_columnsBody;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterColumnsBody) {
             listener.enterColumnsBody(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitColumnsBody) {
             listener.exitColumnsBody(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitColumnsBody) {
            return visitor.visitColumnsBody(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateCustomSerdeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_CREATE(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_CREATE, 0)!;
    }
    public KW_TABLE(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_TABLE, 0)!;
    }
    public tablePathCreate(): TablePathCreateContext {
        return this.getRuleContext(0, TablePathCreateContext)!;
    }
    public KW_ROW(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_ROW, 0)!;
    }
    public KW_FORMAT(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_FORMAT, 0)!;
    }
    public KW_SERDE(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_SERDE, 0)!;
    }
    public tablePropertyKey(): TablePropertyKeyContext[];
    public tablePropertyKey(i: number): TablePropertyKeyContext | null;
    public tablePropertyKey(i?: number): TablePropertyKeyContext[] | TablePropertyKeyContext | null {
        if (i === undefined) {
            return this.getRuleContexts(TablePropertyKeyContext);
        }

        return this.getRuleContext(i, TablePropertyKeyContext);
    }
    public KW_SORTED(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_SORTED, 0)!;
    }
    public KW_AS(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_AS, 0)!;
    }
    public KW_INPUTFORMAT(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_INPUTFORMAT, 0)!;
    }
    public KW_OUTPUTFORMAT(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_OUTPUTFORMAT, 0)!;
    }
    public tblProperties(): TblPropertiesContext {
        return this.getRuleContext(0, TblPropertiesContext)!;
    }
    public KW_TEMPORARY(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_TEMPORARY, 0);
    }
    public ifNotExists(): IfNotExistsContext | null {
        return this.getRuleContext(0, IfNotExistsContext);
    }
    public createCustomSerdeNoSortElement(): CreateCustomSerdeNoSortElementContext[];
    public createCustomSerdeNoSortElement(i: number): CreateCustomSerdeNoSortElementContext | null;
    public createCustomSerdeNoSortElement(i?: number): CreateCustomSerdeNoSortElementContext[] | CreateCustomSerdeNoSortElementContext | null {
        if (i === undefined) {
            return this.getRuleContexts(CreateCustomSerdeNoSortElementContext);
        }

        return this.getRuleContext(i, CreateCustomSerdeNoSortElementContext);
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_createCustomSerde;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterCreateCustomSerde) {
             listener.enterCreateCustomSerde(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitCreateCustomSerde) {
             listener.exitCreateCustomSerde(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitCreateCustomSerde) {
            return visitor.visitCreateCustomSerde(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateCustomSerdeNoSortElementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public columnsBody(): ColumnsBodyContext | null {
        return this.getRuleContext(0, ColumnsBodyContext);
    }
    public commentSpec(): CommentSpecContext | null {
        return this.getRuleContext(0, CommentSpecContext);
    }
    public partitionDefinition(): PartitionDefinitionContext | null {
        return this.getRuleContext(0, PartitionDefinitionContext);
    }
    public withOption(): WithOptionContext | null {
        return this.getRuleContext(0, WithOptionContext);
    }
    public likeDefinition(): LikeDefinitionContext | null {
        return this.getRuleContext(0, LikeDefinitionContext);
    }
    public distribution(): DistributionContext | null {
        return this.getRuleContext(0, DistributionContext);
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_createCustomSerdeNoSortElement;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterCreateCustomSerdeNoSortElement) {
             listener.enterCreateCustomSerdeNoSortElement(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitCreateCustomSerdeNoSortElement) {
             listener.exitCreateCustomSerdeNoSortElement(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitCreateCustomSerdeNoSortElement) {
            return visitor.visitCreateCustomSerdeNoSortElement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateCustomSerdeExternalContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_CREATE(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_CREATE, 0)!;
    }
    public KW_EXTERNAL(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_EXTERNAL, 0)!;
    }
    public KW_TABLE(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_TABLE, 0)!;
    }
    public tablePathCreate(): TablePathCreateContext {
        return this.getRuleContext(0, TablePathCreateContext)!;
    }
    public columnsBody(): ColumnsBodyContext {
        return this.getRuleContext(0, ColumnsBodyContext)!;
    }
    public KW_ROW(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_ROW, 0)!;
    }
    public KW_FORMAT(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_FORMAT, 0)!;
    }
    public KW_SERDE(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_SERDE, 0)!;
    }
    public tablePropertyKey(): TablePropertyKeyContext[];
    public tablePropertyKey(i: number): TablePropertyKeyContext | null;
    public tablePropertyKey(i?: number): TablePropertyKeyContext[] | TablePropertyKeyContext | null {
        if (i === undefined) {
            return this.getRuleContexts(TablePropertyKeyContext);
        }

        return this.getRuleContext(i, TablePropertyKeyContext);
    }
    public KW_SORTED(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_SORTED, 0)!;
    }
    public KW_AS(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_AS, 0)!;
    }
    public KW_INPUTFORMAT(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_INPUTFORMAT, 0)!;
    }
    public KW_OUTPUTFORMAT(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_OUTPUTFORMAT, 0)!;
    }
    public KW_LOCATION(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_LOCATION, 0)!;
    }
    public filePath(): FilePathContext {
        return this.getRuleContext(0, FilePathContext)!;
    }
    public ifNotExists(): IfNotExistsContext | null {
        return this.getRuleContext(0, IfNotExistsContext);
    }
    public createCustomSerdeExternalNoSortElement(): CreateCustomSerdeExternalNoSortElementContext[];
    public createCustomSerdeExternalNoSortElement(i: number): CreateCustomSerdeExternalNoSortElementContext | null;
    public createCustomSerdeExternalNoSortElement(i?: number): CreateCustomSerdeExternalNoSortElementContext[] | CreateCustomSerdeExternalNoSortElementContext | null {
        if (i === undefined) {
            return this.getRuleContexts(CreateCustomSerdeExternalNoSortElementContext);
        }

        return this.getRuleContext(i, CreateCustomSerdeExternalNoSortElementContext);
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_createCustomSerdeExternal;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterCreateCustomSerdeExternal) {
             listener.enterCreateCustomSerdeExternal(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitCreateCustomSerdeExternal) {
             listener.exitCreateCustomSerdeExternal(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitCreateCustomSerdeExternal) {
            return visitor.visitCreateCustomSerdeExternal(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateCustomSerdeExternalNoSortElementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public commentSpec(): CommentSpecContext | null {
        return this.getRuleContext(0, CommentSpecContext);
    }
    public partitionDefinition(): PartitionDefinitionContext | null {
        return this.getRuleContext(0, PartitionDefinitionContext);
    }
    public withOption(): WithOptionContext | null {
        return this.getRuleContext(0, WithOptionContext);
    }
    public likeDefinition(): LikeDefinitionContext | null {
        return this.getRuleContext(0, LikeDefinitionContext);
    }
    public distribution(): DistributionContext | null {
        return this.getRuleContext(0, DistributionContext);
    }
    public tblProperties(): TblPropertiesContext | null {
        return this.getRuleContext(0, TblPropertiesContext);
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_createCustomSerdeExternalNoSortElement;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterCreateCustomSerdeExternalNoSortElement) {
             listener.enterCreateCustomSerdeExternalNoSortElement(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitCreateCustomSerdeExternalNoSortElement) {
             listener.exitCreateCustomSerdeExternalNoSortElement(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitCreateCustomSerdeExternalNoSortElement) {
            return visitor.visitCreateCustomSerdeExternalNoSortElement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateTableAsSelectContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_CREATE(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_CREATE, 0)!;
    }
    public KW_TABLE(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_TABLE, 0)!;
    }
    public tablePathCreate(): TablePathCreateContext {
        return this.getRuleContext(0, TablePathCreateContext)!;
    }
    public withOption(): WithOptionContext {
        return this.getRuleContext(0, WithOptionContext)!;
    }
    public ifNotExists(): IfNotExistsContext | null {
        return this.getRuleContext(0, IfNotExistsContext);
    }
    public KW_AS(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_AS, 0);
    }
    public queryStatement(): QueryStatementContext | null {
        return this.getRuleContext(0, QueryStatementContext);
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_createTableAsSelect;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterCreateTableAsSelect) {
             listener.enterCreateTableAsSelect(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitCreateTableAsSelect) {
             listener.exitCreateTableAsSelect(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitCreateTableAsSelect) {
            return visitor.visitCreateTableAsSelect(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateMaterializedTableAsSelectContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_CREATE(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_CREATE, 0)!;
    }
    public KW_MATERIALIZED(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_MATERIALIZED, 0)!;
    }
    public KW_TABLE(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_TABLE, 0)!;
    }
    public tablePathCreate(): TablePathCreateContext {
        return this.getRuleContext(0, TablePathCreateContext)!;
    }
    public LR_BRACKET(): antlr.TerminalNode[];
    public LR_BRACKET(i: number): antlr.TerminalNode | null;
    public LR_BRACKET(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSQLParser.LR_BRACKET);
    	} else {
    		return this.getToken(SparkSQLParser.LR_BRACKET, i);
    	}
    }
    public KW_PRIMARY(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_PRIMARY, 0)!;
    }
    public KW_KEY(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_KEY, 0)!;
    }
    public identifier(): IdentifierContext[];
    public identifier(i: number): IdentifierContext | null;
    public identifier(i?: number): IdentifierContext[] | IdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IdentifierContext);
        }

        return this.getRuleContext(i, IdentifierContext);
    }
    public RR_BRACKET(): antlr.TerminalNode[];
    public RR_BRACKET(i: number): antlr.TerminalNode | null;
    public RR_BRACKET(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSQLParser.RR_BRACKET);
    	} else {
    		return this.getToken(SparkSQLParser.RR_BRACKET, i);
    	}
    }
    public KW_FRESHNESS(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_FRESHNESS, 0);
    }
    public EQUAL_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.EQUAL_SYMBOL, 0);
    }
    public KW_INTERVAL(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_INTERVAL, 0);
    }
    public createMaterializedTableAsSelectNoSortElement(): CreateMaterializedTableAsSelectNoSortElementContext[];
    public createMaterializedTableAsSelectNoSortElement(i: number): CreateMaterializedTableAsSelectNoSortElementContext | null;
    public createMaterializedTableAsSelectNoSortElement(i?: number): CreateMaterializedTableAsSelectNoSortElementContext[] | CreateMaterializedTableAsSelectNoSortElementContext | null {
        if (i === undefined) {
            return this.getRuleContexts(CreateMaterializedTableAsSelectNoSortElementContext);
        }

        return this.getRuleContext(i, CreateMaterializedTableAsSelectNoSortElementContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSQLParser.COMMA);
    	} else {
    		return this.getToken(SparkSQLParser.COMMA, i);
    	}
    }
    public KW_NOT(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_NOT, 0);
    }
    public KW_ENFORCED(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_ENFORCED, 0);
    }
    public KW_SECOND(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_SECOND, 0);
    }
    public KW_MINUTE(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_MINUTE, 0);
    }
    public KW_HOUR(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_HOUR, 0);
    }
    public KW_DAY(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_DAY, 0);
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_createMaterializedTableAsSelect;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterCreateMaterializedTableAsSelect) {
             listener.enterCreateMaterializedTableAsSelect(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitCreateMaterializedTableAsSelect) {
             listener.exitCreateMaterializedTableAsSelect(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitCreateMaterializedTableAsSelect) {
            return visitor.visitCreateMaterializedTableAsSelect(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateMaterializedTableAsSelectNoSortElementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public partitionDefinition(): PartitionDefinitionContext | null {
        return this.getRuleContext(0, PartitionDefinitionContext);
    }
    public withOption(): WithOptionContext | null {
        return this.getRuleContext(0, WithOptionContext);
    }
    public KW_REFRESH_MODE(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_REFRESH_MODE, 0);
    }
    public EQUAL_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.EQUAL_SYMBOL, 0);
    }
    public KW_FULL(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_FULL, 0);
    }
    public KW_CONTINUOUS(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_CONTINUOUS, 0);
    }
    public KW_AS(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_AS, 0);
    }
    public queryStatement(): QueryStatementContext | null {
        return this.getRuleContext(0, QueryStatementContext);
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_createMaterializedTableAsSelectNoSortElement;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterCreateMaterializedTableAsSelectNoSortElement) {
             listener.enterCreateMaterializedTableAsSelectNoSortElement(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitCreateMaterializedTableAsSelectNoSortElement) {
             listener.exitCreateMaterializedTableAsSelectNoSortElement(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitCreateMaterializedTableAsSelectNoSortElement) {
            return visitor.visitCreateMaterializedTableAsSelectNoSortElement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class UsingClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_USING(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_USING, 0)!;
    }
    public KW_JAR(): antlr.TerminalNode[];
    public KW_JAR(i: number): antlr.TerminalNode | null;
    public KW_JAR(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSQLParser.KW_JAR);
    	} else {
    		return this.getToken(SparkSQLParser.KW_JAR, i);
    	}
    }
    public jarFileName(): JarFileNameContext[];
    public jarFileName(i: number): JarFileNameContext | null;
    public jarFileName(i?: number): JarFileNameContext[] | JarFileNameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(JarFileNameContext);
        }

        return this.getRuleContext(i, JarFileNameContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSQLParser.COMMA);
    	} else {
    		return this.getToken(SparkSQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_usingClause;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterUsingClause) {
             listener.enterUsingClause(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitUsingClause) {
             listener.exitUsingClause(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitUsingClause) {
            return visitor.visitUsingClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class JarFileNameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public filePath(): FilePathContext {
        return this.getRuleContext(0, FilePathContext)!;
    }
    public DOT(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.DOT, 0);
    }
    public KW_JAR(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_JAR, 0);
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_jarFileName;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterJarFileName) {
             listener.enterJarFileName(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitJarFileName) {
             listener.exitJarFileName(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitJarFileName) {
            return visitor.visitJarFileName(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FilePathContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public STRING_LITERAL(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.STRING_LITERAL, 0);
    }
    public SLASH_SIGN(): antlr.TerminalNode[];
    public SLASH_SIGN(i: number): antlr.TerminalNode | null;
    public SLASH_SIGN(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSQLParser.SLASH_SIGN);
    	} else {
    		return this.getToken(SparkSQLParser.SLASH_SIGN, i);
    	}
    }
    public ID_LITERAL(): antlr.TerminalNode[];
    public ID_LITERAL(i: number): antlr.TerminalNode | null;
    public ID_LITERAL(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSQLParser.ID_LITERAL);
    	} else {
    		return this.getToken(SparkSQLParser.ID_LITERAL, i);
    	}
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_filePath;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterFilePath) {
             listener.enterFilePath(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitFilePath) {
             listener.exitFilePath(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitFilePath) {
            return visitor.visitFilePath(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class IfExistsPartContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_IF(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_IF, 0)!;
    }
    public KW_EXISTS(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_EXISTS, 0)!;
    }
    public KW_NOT(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_NOT, 0);
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_ifExistsPart;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterIfExistsPart) {
             listener.enterIfExistsPart(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitIfExistsPart) {
             listener.exitIfExistsPart(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitIfExistsPart) {
            return visitor.visitIfExistsPart(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ColumnPositionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_FIRST(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_FIRST, 0);
    }
    public KW_LAST(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_LAST, 0);
    }
    public uid(): UidContext | null {
        return this.getRuleContext(0, UidContext);
    }
    public KW_BEFORE(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_BEFORE, 0);
    }
    public KW_AFTER(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_AFTER, 0);
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_columnPosition;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterColumnPosition) {
             listener.enterColumnPosition(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitColumnPosition) {
             listener.exitColumnPosition(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitColumnPosition) {
            return visitor.visitColumnPosition(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RenameDefinitionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_RENAME(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_RENAME, 0)!;
    }
    public KW_TO(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_TO, 0)!;
    }
    public uid(): UidContext[];
    public uid(i: number): UidContext | null;
    public uid(i?: number): UidContext[] | UidContext | null {
        if (i === undefined) {
            return this.getRuleContexts(UidContext);
        }

        return this.getRuleContext(i, UidContext);
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_renameDefinition;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterRenameDefinition) {
             listener.enterRenameDefinition(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitRenameDefinition) {
             listener.exitRenameDefinition(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitRenameDefinition) {
            return visitor.visitRenameDefinition(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SetKeyValueDefinitionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_SET(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_SET, 0)!;
    }
    public tablePropertyList(): TablePropertyListContext {
        return this.getRuleContext(0, TablePropertyListContext)!;
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_setKeyValueDefinition;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterSetKeyValueDefinition) {
             listener.enterSetKeyValueDefinition(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitSetKeyValueDefinition) {
             listener.exitSetKeyValueDefinition(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitSetKeyValueDefinition) {
            return visitor.visitSetKeyValueDefinition(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AddConstraintContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ADD(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_ADD, 0)!;
    }
    public KW_CONSTRAINT(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_CONSTRAINT, 0)!;
    }
    public constraintName(): ConstraintNameContext {
        return this.getRuleContext(0, ConstraintNameContext)!;
    }
    public KW_PRIMARY(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_PRIMARY, 0)!;
    }
    public KW_KEY(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_KEY, 0)!;
    }
    public columnNameList(): ColumnNameListContext {
        return this.getRuleContext(0, ColumnNameListContext)!;
    }
    public notForced(): NotForcedContext | null {
        return this.getRuleContext(0, NotForcedContext);
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_addConstraint;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterAddConstraint) {
             listener.enterAddConstraint(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitAddConstraint) {
             listener.exitAddConstraint(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitAddConstraint) {
            return visitor.visitAddConstraint(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DropConstraintContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_DROP(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_DROP, 0)!;
    }
    public KW_CONSTRAINT(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_CONSTRAINT, 0)!;
    }
    public constraintName(): ConstraintNameContext {
        return this.getRuleContext(0, ConstraintNameContext)!;
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_dropConstraint;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterDropConstraint) {
             listener.enterDropConstraint(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitDropConstraint) {
             listener.exitDropConstraint(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitDropConstraint) {
            return visitor.visitDropConstraint(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AddUniqueContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ADD(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_ADD, 0)!;
    }
    public KW_UNIQUE(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_UNIQUE, 0)!;
    }
    public columnNameList(): ColumnNameListContext {
        return this.getRuleContext(0, ColumnNameListContext)!;
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_addUnique;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterAddUnique) {
             listener.enterAddUnique(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitAddUnique) {
             listener.exitAddUnique(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitAddUnique) {
            return visitor.visitAddUnique(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class NotForcedContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_NOT(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_NOT, 0)!;
    }
    public KW_ENFORCED(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_ENFORCED, 0)!;
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_notForced;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterNotForced) {
             listener.enterNotForced(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitNotForced) {
             listener.exitNotForced(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitNotForced) {
            return visitor.visitNotForced(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class InsertStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public insertSimpleStatement(): InsertSimpleStatementContext {
        return this.getRuleContext(0, InsertSimpleStatementContext)!;
    }
    public KW_EXECUTE(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_EXECUTE, 0);
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_insertStatement;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterInsertStatement) {
             listener.enterInsertStatement(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitInsertStatement) {
             listener.exitInsertStatement(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitInsertStatement) {
            return visitor.visitInsertStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class InsertSimpleStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_INSERT(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_INSERT, 0)!;
    }
    public tablePath(): TablePathContext[];
    public tablePath(i: number): TablePathContext | null;
    public tablePath(i?: number): TablePathContext[] | TablePathContext | null {
        if (i === undefined) {
            return this.getRuleContexts(TablePathContext);
        }

        return this.getRuleContext(i, TablePathContext);
    }
    public KW_INTO(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_INTO, 0);
    }
    public KW_OVERWRITE(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_OVERWRITE, 0);
    }
    public queryStatement(): QueryStatementContext | null {
        return this.getRuleContext(0, QueryStatementContext);
    }
    public valuesDefinition(): ValuesDefinitionContext | null {
        return this.getRuleContext(0, ValuesDefinitionContext);
    }
    public KW_TABLE(): antlr.TerminalNode[];
    public KW_TABLE(i: number): antlr.TerminalNode | null;
    public KW_TABLE(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSQLParser.KW_TABLE);
    	} else {
    		return this.getToken(SparkSQLParser.KW_TABLE, i);
    	}
    }
    public insertPartitionDefinition(): InsertPartitionDefinitionContext | null {
        return this.getRuleContext(0, InsertPartitionDefinitionContext);
    }
    public columnNameList(): ColumnNameListContext | null {
        return this.getRuleContext(0, ColumnNameListContext);
    }
    public KW_REPLACE(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_REPLACE, 0);
    }
    public whereClause(): WhereClauseContext | null {
        return this.getRuleContext(0, WhereClauseContext);
    }
    public selectStatement(): SelectStatementContext | null {
        return this.getRuleContext(0, SelectStatementContext);
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_insertSimpleStatement;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterInsertSimpleStatement) {
             listener.enterInsertSimpleStatement(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitInsertSimpleStatement) {
             listener.exitInsertSimpleStatement(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitInsertSimpleStatement) {
            return visitor.visitInsertSimpleStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class InsertPartitionDefinitionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_PARTITION(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_PARTITION, 0)!;
    }
    public tablePropertyList(): TablePropertyListContext {
        return this.getRuleContext(0, TablePropertyListContext)!;
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_insertPartitionDefinition;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterInsertPartitionDefinition) {
             listener.enterInsertPartitionDefinition(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitInsertPartitionDefinition) {
             listener.exitInsertPartitionDefinition(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitInsertPartitionDefinition) {
            return visitor.visitInsertPartitionDefinition(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class QueryStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_queryStatement;
    }
    public override copyFrom(ctx: QueryStatementContext): void {
        super.copyFrom(ctx);
    }
}
export class WithQueryContext extends QueryStatementContext {
    public constructor(ctx: QueryStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public withClause(): WithClauseContext {
        return this.getRuleContext(0, WithClauseContext)!;
    }
    public queryStatement(): QueryStatementContext {
        return this.getRuleContext(0, QueryStatementContext)!;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterWithQuery) {
             listener.enterWithQuery(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitWithQuery) {
             listener.exitWithQuery(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitWithQuery) {
            return visitor.visitWithQuery(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class BracketQueryContext extends QueryStatementContext {
    public constructor(ctx: QueryStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public LR_BRACKET(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.LR_BRACKET, 0)!;
    }
    public queryStatement(): QueryStatementContext {
        return this.getRuleContext(0, QueryStatementContext)!;
    }
    public RR_BRACKET(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.RR_BRACKET, 0)!;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterBracketQuery) {
             listener.enterBracketQuery(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitBracketQuery) {
             listener.exitBracketQuery(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitBracketQuery) {
            return visitor.visitBracketQuery(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class OpQueryContext extends QueryStatementContext {
    public _left?: QueryStatementContext;
    public _operator?: Token | null;
    public _right?: QueryStatementContext;
    public constructor(ctx: QueryStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public queryStatement(): QueryStatementContext[];
    public queryStatement(i: number): QueryStatementContext | null;
    public queryStatement(i?: number): QueryStatementContext[] | QueryStatementContext | null {
        if (i === undefined) {
            return this.getRuleContexts(QueryStatementContext);
        }

        return this.getRuleContext(i, QueryStatementContext);
    }
    public KW_INTERSECT(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_INTERSECT, 0);
    }
    public KW_UNION(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_UNION, 0);
    }
    public KW_EXCEPT(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_EXCEPT, 0);
    }
    public KW_MINUS(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_MINUS, 0);
    }
    public sortByCaluse(): SortByCaluseContext | null {
        return this.getRuleContext(0, SortByCaluseContext);
    }
    public orderByCaluse(): OrderByCaluseContext | null {
        return this.getRuleContext(0, OrderByCaluseContext);
    }
    public limitClause(): LimitClauseContext | null {
        return this.getRuleContext(0, LimitClauseContext);
    }
    public offsetClause(): OffsetClauseContext | null {
        return this.getRuleContext(0, OffsetClauseContext);
    }
    public KW_ALL(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_ALL, 0);
    }
    public KW_DISTINCT(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_DISTINCT, 0);
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterOpQuery) {
             listener.enterOpQuery(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitOpQuery) {
             listener.exitOpQuery(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitOpQuery) {
            return visitor.visitOpQuery(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class CommonQueryContext extends QueryStatementContext {
    public constructor(ctx: QueryStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public selectClause(): SelectClauseContext | null {
        return this.getRuleContext(0, SelectClauseContext);
    }
    public selectStatement(): SelectStatementContext | null {
        return this.getRuleContext(0, SelectStatementContext);
    }
    public sortByCaluse(): SortByCaluseContext | null {
        return this.getRuleContext(0, SortByCaluseContext);
    }
    public orderByCaluse(): OrderByCaluseContext | null {
        return this.getRuleContext(0, OrderByCaluseContext);
    }
    public limitClause(): LimitClauseContext | null {
        return this.getRuleContext(0, LimitClauseContext);
    }
    public offsetClause(): OffsetClauseContext | null {
        return this.getRuleContext(0, OffsetClauseContext);
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterCommonQuery) {
             listener.enterCommonQuery(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitCommonQuery) {
             listener.exitCommonQuery(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitCommonQuery) {
            return visitor.visitCommonQuery(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class WithClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_WITH(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_WITH, 0)!;
    }
    public withItem(): WithItemContext[];
    public withItem(i: number): WithItemContext | null;
    public withItem(i?: number): WithItemContext[] | WithItemContext | null {
        if (i === undefined) {
            return this.getRuleContexts(WithItemContext);
        }

        return this.getRuleContext(i, WithItemContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSQLParser.COMMA);
    	} else {
    		return this.getToken(SparkSQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_withClause;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterWithClause) {
             listener.enterWithClause(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitWithClause) {
             listener.exitWithClause(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitWithClause) {
            return visitor.visitWithClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ValuesCaluseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_VALUES(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_VALUES, 0);
    }
    public inlineBody(): InlineBodyContext[];
    public inlineBody(i: number): InlineBodyContext | null;
    public inlineBody(i?: number): InlineBodyContext[] | InlineBodyContext | null {
        if (i === undefined) {
            return this.getRuleContexts(InlineBodyContext);
        }

        return this.getRuleContext(i, InlineBodyContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSQLParser.COMMA);
    	} else {
    		return this.getToken(SparkSQLParser.COMMA, i);
    	}
    }
    public tableAlias(): TableAliasContext[];
    public tableAlias(i: number): TableAliasContext | null;
    public tableAlias(i?: number): TableAliasContext[] | TableAliasContext | null {
        if (i === undefined) {
            return this.getRuleContexts(TableAliasContext);
        }

        return this.getRuleContext(i, TableAliasContext);
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_valuesCaluse;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterValuesCaluse) {
             listener.enterValuesCaluse(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitValuesCaluse) {
             listener.exitValuesCaluse(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitValuesCaluse) {
            return visitor.visitValuesCaluse(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class InlineBodyContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LR_BRACKET(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.LR_BRACKET, 0)!;
    }
    public expression(): ExpressionContext[];
    public expression(i: number): ExpressionContext | null;
    public expression(i?: number): ExpressionContext[] | ExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }

        return this.getRuleContext(i, ExpressionContext);
    }
    public RR_BRACKET(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.RR_BRACKET, 0)!;
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSQLParser.COMMA);
    	} else {
    		return this.getToken(SparkSQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_inlineBody;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterInlineBody) {
             listener.enterInlineBody(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitInlineBody) {
             listener.exitInlineBody(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitInlineBody) {
            return visitor.visitInlineBody(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class WithItemContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public withItemName(): WithItemNameContext {
        return this.getRuleContext(0, WithItemNameContext)!;
    }
    public KW_AS(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_AS, 0)!;
    }
    public LR_BRACKET(): antlr.TerminalNode[];
    public LR_BRACKET(i: number): antlr.TerminalNode | null;
    public LR_BRACKET(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSQLParser.LR_BRACKET);
    	} else {
    		return this.getToken(SparkSQLParser.LR_BRACKET, i);
    	}
    }
    public queryStatement(): QueryStatementContext {
        return this.getRuleContext(0, QueryStatementContext)!;
    }
    public RR_BRACKET(): antlr.TerminalNode[];
    public RR_BRACKET(i: number): antlr.TerminalNode | null;
    public RR_BRACKET(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSQLParser.RR_BRACKET);
    	} else {
    		return this.getToken(SparkSQLParser.RR_BRACKET, i);
    	}
    }
    public columnName(): ColumnNameContext[];
    public columnName(i: number): ColumnNameContext | null;
    public columnName(i?: number): ColumnNameContext[] | ColumnNameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ColumnNameContext);
        }

        return this.getRuleContext(i, ColumnNameContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSQLParser.COMMA);
    	} else {
    		return this.getToken(SparkSQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_withItem;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterWithItem) {
             listener.enterWithItem(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitWithItem) {
             listener.exitWithItem(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitWithItem) {
            return visitor.visitWithItem(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class WithItemNameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_withItemName;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterWithItemName) {
             listener.enterWithItemName(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitWithItemName) {
             listener.exitWithItemName(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitWithItemName) {
            return visitor.visitWithItemName(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SelectClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_SELECT(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_SELECT, 0)!;
    }
    public projectItemDefinition(): ProjectItemDefinitionContext[];
    public projectItemDefinition(i: number): ProjectItemDefinitionContext | null;
    public projectItemDefinition(i?: number): ProjectItemDefinitionContext[] | ProjectItemDefinitionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ProjectItemDefinitionContext);
        }

        return this.getRuleContext(i, ProjectItemDefinitionContext);
    }
    public setQuantifier(): SetQuantifierContext | null {
        return this.getRuleContext(0, SetQuantifierContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSQLParser.COMMA);
    	} else {
    		return this.getToken(SparkSQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_selectClause;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterSelectClause) {
             listener.enterSelectClause(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitSelectClause) {
             listener.exitSelectClause(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitSelectClause) {
            return visitor.visitSelectClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FilterPartContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_FILTER(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_FILTER, 0)!;
    }
    public LR_BRACKET(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.LR_BRACKET, 0)!;
    }
    public whereClause(): WhereClauseContext {
        return this.getRuleContext(0, WhereClauseContext)!;
    }
    public RR_BRACKET(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.RR_BRACKET, 0)!;
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_filterPart;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterFilterPart) {
             listener.enterFilterPart(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitFilterPart) {
             listener.exitFilterPart(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitFilterPart) {
            return visitor.visitFilterPart(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class OverWindowItemContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public windowFunctioPart(): WindowFunctioPartContext {
        return this.getRuleContext(0, WindowFunctioPartContext)!;
    }
    public KW_OVER(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_OVER, 0)!;
    }
    public KW_NULLS(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_NULLS, 0);
    }
    public anonymousWindowsName(): AnonymousWindowsNameContext | null {
        return this.getRuleContext(0, AnonymousWindowsNameContext);
    }
    public LR_BRACKET(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.LR_BRACKET, 0);
    }
    public orderByCaluse(): OrderByCaluseContext | null {
        return this.getRuleContext(0, OrderByCaluseContext);
    }
    public RR_BRACKET(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.RR_BRACKET, 0);
    }
    public KW_IGNORE(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_IGNORE, 0);
    }
    public KW_RESPECT(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_RESPECT, 0);
    }
    public overClause(): OverClauseContext | null {
        return this.getRuleContext(0, OverClauseContext);
    }
    public windowFrameForWindowsQuery(): WindowFrameForWindowsQueryContext | null {
        return this.getRuleContext(0, WindowFrameForWindowsQueryContext);
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_overWindowItem;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterOverWindowItem) {
             listener.enterOverWindowItem(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitOverWindowItem) {
             listener.exitOverWindowItem(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitOverWindowItem) {
            return visitor.visitOverWindowItem(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class OverClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_BY(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_BY, 0)!;
    }
    public columnName(): ColumnNameContext[];
    public columnName(i: number): ColumnNameContext | null;
    public columnName(i?: number): ColumnNameContext[] | ColumnNameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ColumnNameContext);
        }

        return this.getRuleContext(i, ColumnNameContext);
    }
    public KW_PARTITION(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_PARTITION, 0);
    }
    public KW_DISTRIBUTE(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_DISTRIBUTE, 0);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSQLParser.COMMA);
    	} else {
    		return this.getToken(SparkSQLParser.COMMA, i);
    	}
    }
    public EQUAL_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.EQUAL_SYMBOL, 0);
    }
    public expression(): ExpressionContext | null {
        return this.getRuleContext(0, ExpressionContext);
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_overClause;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterOverClause) {
             listener.enterOverClause(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitOverClause) {
             listener.exitOverClause(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitOverClause) {
            return visitor.visitOverClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class WindowFunctioPartContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public windowFunctionName(): WindowFunctionNameContext | null {
        return this.getRuleContext(0, WindowFunctionNameContext);
    }
    public LR_BRACKET(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.LR_BRACKET, 0);
    }
    public RR_BRACKET(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.RR_BRACKET, 0);
    }
    public functionParam(): FunctionParamContext[];
    public functionParam(i: number): FunctionParamContext | null;
    public functionParam(i?: number): FunctionParamContext[] | FunctionParamContext | null {
        if (i === undefined) {
            return this.getRuleContexts(FunctionParamContext);
        }

        return this.getRuleContext(i, FunctionParamContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSQLParser.COMMA);
    	} else {
    		return this.getToken(SparkSQLParser.COMMA, i);
    	}
    }
    public primaryExpression(): PrimaryExpressionContext | null {
        return this.getRuleContext(0, PrimaryExpressionContext);
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_windowFunctioPart;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterWindowFunctioPart) {
             listener.enterWindowFunctioPart(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitWindowFunctioPart) {
             listener.exitWindowFunctioPart(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitWindowFunctioPart) {
            return visitor.visitWindowFunctioPart(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class WindowFunctionNameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public rangkingFunction(): RangkingFunctionContext | null {
        return this.getRuleContext(0, RangkingFunctionContext);
    }
    public analyticFunction(): AnalyticFunctionContext | null {
        return this.getRuleContext(0, AnalyticFunctionContext);
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_windowFunctionName;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterWindowFunctionName) {
             listener.enterWindowFunctionName(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitWindowFunctionName) {
             listener.exitWindowFunctionName(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitWindowFunctionName) {
            return visitor.visitWindowFunctionName(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AnalyticFunctionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_CUME_DIST(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_CUME_DIST, 0);
    }
    public KW_LAG(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_LAG, 0);
    }
    public KW_LEAD(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_LEAD, 0);
    }
    public KW_NTH_VALUE(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_NTH_VALUE, 0);
    }
    public KW_FIRST_VALUE(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_FIRST_VALUE, 0);
    }
    public KW_LAST_VALUE(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_LAST_VALUE, 0);
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_analyticFunction;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterAnalyticFunction) {
             listener.enterAnalyticFunction(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitAnalyticFunction) {
             listener.exitAnalyticFunction(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitAnalyticFunction) {
            return visitor.visitAnalyticFunction(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RangkingFunctionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_RANK(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_RANK, 0);
    }
    public KW_DENSE_RANK(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_DENSE_RANK, 0);
    }
    public KW_PERCENT_RANK(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_PERCENT_RANK, 0);
    }
    public KW_NTILE(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_NTILE, 0);
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_rangkingFunction;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterRangkingFunction) {
             listener.enterRangkingFunction(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitRangkingFunction) {
             listener.exitRangkingFunction(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitRangkingFunction) {
            return visitor.visitRangkingFunction(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FromClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_FROM(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_FROM, 0)!;
    }
    public tableExpression(): TableExpressionContext {
        return this.getRuleContext(0, TableExpressionContext)!;
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_fromClause;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterFromClause) {
             listener.enterFromClause(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitFromClause) {
             listener.exitFromClause(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitFromClause) {
            return visitor.visitFromClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class WindowFrameForWindowsQueryContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_RANGE(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_RANGE, 0);
    }
    public KW_ROWS(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_ROWS, 0);
    }
    public frameExpession(): FrameExpessionContext[];
    public frameExpession(i: number): FrameExpessionContext | null;
    public frameExpession(i?: number): FrameExpessionContext[] | FrameExpessionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(FrameExpessionContext);
        }

        return this.getRuleContext(i, FrameExpessionContext);
    }
    public KW_BETWEEN(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_BETWEEN, 0);
    }
    public KW_AND(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_AND, 0);
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_windowFrameForWindowsQuery;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterWindowFrameForWindowsQuery) {
             listener.enterWindowFrameForWindowsQuery(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitWindowFrameForWindowsQuery) {
             listener.exitWindowFrameForWindowsQuery(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitWindowFrameForWindowsQuery) {
            return visitor.visitWindowFrameForWindowsQuery(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FrameExpessionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_UNBOUNDED(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_UNBOUNDED, 0);
    }
    public KW_PRECEDING(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_PRECEDING, 0);
    }
    public expression(): ExpressionContext | null {
        return this.getRuleContext(0, ExpressionContext);
    }
    public KW_CURRENT(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_CURRENT, 0);
    }
    public KW_ROW(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_ROW, 0);
    }
    public KW_FOLLOWING(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_FOLLOWING, 0);
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_frameExpession;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterFrameExpession) {
             listener.enterFrameExpession(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitFrameExpession) {
             listener.exitFrameExpession(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitFrameExpession) {
            return visitor.visitFrameExpession(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TableExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_tableExpression;
    }
    public override copyFrom(ctx: TableExpressionContext): void {
        super.copyFrom(ctx);
    }
}
export class WindowTVFClauseForTableExprContext extends TableExpressionContext {
    public constructor(ctx: TableExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public windowTVFClause(): WindowTVFClauseContext {
        return this.getRuleContext(0, WindowTVFClauseContext)!;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterWindowTVFClauseForTableExpr) {
             listener.enterWindowTVFClauseForTableExpr(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitWindowTVFClauseForTableExpr) {
             listener.exitWindowTVFClauseForTableExpr(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitWindowTVFClauseForTableExpr) {
            return visitor.visitWindowTVFClauseForTableExpr(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class TvfClauseTableExprContext extends TableExpressionContext {
    public constructor(ctx: TableExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public tvfClause(): TvfClauseContext {
        return this.getRuleContext(0, TvfClauseContext)!;
    }
    public tableAlias(): TableAliasContext | null {
        return this.getRuleContext(0, TableAliasContext);
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterTvfClauseTableExpr) {
             listener.enterTvfClauseTableExpr(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitTvfClauseTableExpr) {
             listener.exitTvfClauseTableExpr(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitTvfClauseTableExpr) {
            return visitor.visitTvfClauseTableExpr(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ValuesClauseContext extends TableExpressionContext {
    public constructor(ctx: TableExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public valuesCaluse(): ValuesCaluseContext {
        return this.getRuleContext(0, ValuesCaluseContext)!;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterValuesClause) {
             listener.enterValuesClause(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitValuesClause) {
             listener.exitValuesClause(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitValuesClause) {
            return visitor.visitValuesClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class TableRefCommaTableRefContext extends TableExpressionContext {
    public constructor(ctx: TableExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public tableReference(): TableReferenceContext[];
    public tableReference(i: number): TableReferenceContext | null;
    public tableReference(i?: number): TableReferenceContext[] | TableReferenceContext | null {
        if (i === undefined) {
            return this.getRuleContexts(TableReferenceContext);
        }

        return this.getRuleContext(i, TableReferenceContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSQLParser.COMMA);
    	} else {
    		return this.getToken(SparkSQLParser.COMMA, i);
    	}
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterTableRefCommaTableRef) {
             listener.enterTableRefCommaTableRef(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitTableRefCommaTableRef) {
             listener.exitTableRefCommaTableRef(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitTableRefCommaTableRef) {
            return visitor.visitTableRefCommaTableRef(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class TableRefViewRefContext extends TableExpressionContext {
    public constructor(ctx: TableExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public tableReference(): TableReferenceContext {
        return this.getRuleContext(0, TableReferenceContext)!;
    }
    public viewReference(): ViewReferenceContext[];
    public viewReference(i: number): ViewReferenceContext | null;
    public viewReference(i?: number): ViewReferenceContext[] | ViewReferenceContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ViewReferenceContext);
        }

        return this.getRuleContext(i, ViewReferenceContext);
    }
    public tableAlias(): TableAliasContext | null {
        return this.getRuleContext(0, TableAliasContext);
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterTableRefViewRef) {
             listener.enterTableRefViewRef(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitTableRefViewRef) {
             listener.exitTableRefViewRef(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitTableRefViewRef) {
            return visitor.visitTableRefViewRef(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class TablePivotRefContext extends TableExpressionContext {
    public constructor(ctx: TableExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public tableReference(): TableReferenceContext {
        return this.getRuleContext(0, TableReferenceContext)!;
    }
    public pivotReference(): PivotReferenceContext {
        return this.getRuleContext(0, PivotReferenceContext)!;
    }
    public tableAlias(): TableAliasContext | null {
        return this.getRuleContext(0, TableAliasContext);
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterTablePivotRef) {
             listener.enterTablePivotRef(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitTablePivotRef) {
             listener.exitTablePivotRef(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitTablePivotRef) {
            return visitor.visitTablePivotRef(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class TableExpOpTableRefContext extends TableExpressionContext {
    public constructor(ctx: TableExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public tableExpression(): TableExpressionContext[];
    public tableExpression(i: number): TableExpressionContext | null;
    public tableExpression(i?: number): TableExpressionContext[] | TableExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(TableExpressionContext);
        }

        return this.getRuleContext(i, TableExpressionContext);
    }
    public KW_JOIN(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_JOIN, 0)!;
    }
    public KW_NATURAL(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_NATURAL, 0);
    }
    public KW_OUTER(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_OUTER, 0);
    }
    public KW_SEMI(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_SEMI, 0);
    }
    public joinCondition(): JoinConditionContext | null {
        return this.getRuleContext(0, JoinConditionContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSQLParser.COMMA);
    	} else {
    		return this.getToken(SparkSQLParser.COMMA, i);
    	}
    }
    public tableReference(): TableReferenceContext[];
    public tableReference(i: number): TableReferenceContext | null;
    public tableReference(i?: number): TableReferenceContext[] | TableReferenceContext | null {
        if (i === undefined) {
            return this.getRuleContexts(TableReferenceContext);
        }

        return this.getRuleContext(i, TableReferenceContext);
    }
    public KW_LEFT(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_LEFT, 0);
    }
    public KW_RIGHT(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_RIGHT, 0);
    }
    public KW_FULL(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_FULL, 0);
    }
    public KW_INNER(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_INNER, 0);
    }
    public KW_CROSS(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_CROSS, 0);
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterTableExpOpTableRef) {
             listener.enterTableExpOpTableRef(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitTableExpOpTableRef) {
             listener.exitTableExpOpTableRef(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitTableExpOpTableRef) {
            return visitor.visitTableExpOpTableRef(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TvfClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public rangeClause(): RangeClauseContext {
        return this.getRuleContext(0, RangeClauseContext)!;
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_tvfClause;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterTvfClause) {
             listener.enterTvfClause(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitTvfClause) {
             listener.exitTvfClause(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitTvfClause) {
            return visitor.visitTvfClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RangeClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_RANGE(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_RANGE, 0)!;
    }
    public LR_BRACKET(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.LR_BRACKET, 0)!;
    }
    public expression(): ExpressionContext[];
    public expression(i: number): ExpressionContext | null;
    public expression(i?: number): ExpressionContext[] | ExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }

        return this.getRuleContext(i, ExpressionContext);
    }
    public RR_BRACKET(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.RR_BRACKET, 0)!;
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSQLParser.COMMA);
    	} else {
    		return this.getToken(SparkSQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_rangeClause;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterRangeClause) {
             listener.enterRangeClause(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitRangeClause) {
             listener.exitRangeClause(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitRangeClause) {
            return visitor.visitRangeClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ViewReferenceContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_LATERAL(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_LATERAL, 0)!;
    }
    public KW_VIEW(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_VIEW, 0)!;
    }
    public funtionBody(): FuntionBodyContext {
        return this.getRuleContext(0, FuntionBodyContext)!;
    }
    public KW_AS(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_AS, 0)!;
    }
    public columnAlias(): ColumnAliasContext[];
    public columnAlias(i: number): ColumnAliasContext | null;
    public columnAlias(i?: number): ColumnAliasContext[] | ColumnAliasContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ColumnAliasContext);
        }

        return this.getRuleContext(i, ColumnAliasContext);
    }
    public KW_OUTER(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_OUTER, 0);
    }
    public tableAlias(): TableAliasContext | null {
        return this.getRuleContext(0, TableAliasContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSQLParser.COMMA);
    	} else {
    		return this.getToken(SparkSQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_viewReference;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterViewReference) {
             listener.enterViewReference(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitViewReference) {
             listener.exitViewReference(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitViewReference) {
            return visitor.visitViewReference(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PivotReferenceContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_PIVOT(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_PIVOT, 0);
    }
    public LR_BRACKET(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.LR_BRACKET, 0)!;
    }
    public pivotBody(): PivotBodyContext | null {
        return this.getRuleContext(0, PivotBodyContext);
    }
    public RR_BRACKET(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.RR_BRACKET, 0)!;
    }
    public KW_UNPIVOT(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_UNPIVOT, 0);
    }
    public unpivotBody(): UnpivotBodyContext | null {
        return this.getRuleContext(0, UnpivotBodyContext);
    }
    public KW_NULLS(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_NULLS, 0);
    }
    public KW_INCLUDE(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_INCLUDE, 0);
    }
    public KW_EXCLUDE(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_EXCLUDE, 0);
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_pivotReference;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterPivotReference) {
             listener.enterPivotReference(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitPivotReference) {
             listener.exitPivotReference(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitPivotReference) {
            return visitor.visitPivotReference(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TableReferenceContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public tablePrimary(): TablePrimaryContext {
        return this.getRuleContext(0, TablePrimaryContext)!;
    }
    public tableAlias(): TableAliasContext | null {
        return this.getRuleContext(0, TableAliasContext);
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_tableReference;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterTableReference) {
             listener.enterTableReference(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitTableReference) {
             listener.exitTableReference(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitTableReference) {
            return visitor.visitTableReference(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TablePrimaryContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_tablePrimary;
    }
    public override copyFrom(ctx: TablePrimaryContext): void {
        super.copyFrom(ctx);
    }
}
export class TablePathForTablePrimaryContext extends TablePrimaryContext {
    public constructor(ctx: TablePrimaryContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public tablePath(): TablePathContext {
        return this.getRuleContext(0, TablePathContext)!;
    }
    public KW_TABLE(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_TABLE, 0);
    }
    public systemTimePeriod(): SystemTimePeriodContext | null {
        return this.getRuleContext(0, SystemTimePeriodContext);
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterTablePathForTablePrimary) {
             listener.enterTablePathForTablePrimary(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitTablePathForTablePrimary) {
             listener.exitTablePathForTablePrimary(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitTablePathForTablePrimary) {
            return visitor.visitTablePathForTablePrimary(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class LateralQueryContext extends TablePrimaryContext {
    public constructor(ctx: TablePrimaryContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_LATERAL(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_LATERAL, 0)!;
    }
    public LR_BRACKET(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.LR_BRACKET, 0)!;
    }
    public queryStatement(): QueryStatementContext {
        return this.getRuleContext(0, QueryStatementContext)!;
    }
    public RR_BRACKET(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.RR_BRACKET, 0)!;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterLateralQuery) {
             listener.enterLateralQuery(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitLateralQuery) {
             listener.exitLateralQuery(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitLateralQuery) {
            return visitor.visitLateralQuery(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class LateralTableContext extends TablePrimaryContext {
    public constructor(ctx: TablePrimaryContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_LATERAL(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_LATERAL, 0)!;
    }
    public KW_TABLE(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_TABLE, 0)!;
    }
    public funtionBody(): FuntionBodyContext | null {
        return this.getRuleContext(0, FuntionBodyContext);
    }
    public complexDataTypeExpression(): ComplexDataTypeExpressionContext | null {
        return this.getRuleContext(0, ComplexDataTypeExpressionContext);
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterLateralTable) {
             listener.enterLateralTable(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitLateralTable) {
             listener.exitLateralTable(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitLateralTable) {
            return visitor.visitLateralTable(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class LateralTableExplodeContext extends TablePrimaryContext {
    public constructor(ctx: TablePrimaryContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_LATERAL(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_LATERAL, 0)!;
    }
    public KW_TABLE(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_TABLE, 0)!;
    }
    public KW_EXPLODE(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_EXPLODE, 0)!;
    }
    public LR_BRACKET(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.LR_BRACKET, 0)!;
    }
    public RR_BRACKET(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.RR_BRACKET, 0)!;
    }
    public funtionBody(): FuntionBodyContext | null {
        return this.getRuleContext(0, FuntionBodyContext);
    }
    public complexDataTypeExpression(): ComplexDataTypeExpressionContext | null {
        return this.getRuleContext(0, ComplexDataTypeExpressionContext);
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterLateralTableExplode) {
             listener.enterLateralTableExplode(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitLateralTableExplode) {
             listener.exitLateralTableExplode(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitLateralTableExplode) {
            return visitor.visitLateralTableExplode(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SubQueryContext extends TablePrimaryContext {
    public constructor(ctx: TablePrimaryContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public LR_BRACKET(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.LR_BRACKET, 0)!;
    }
    public RR_BRACKET(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.RR_BRACKET, 0)!;
    }
    public queryStatement(): QueryStatementContext[];
    public queryStatement(i: number): QueryStatementContext | null;
    public queryStatement(i?: number): QueryStatementContext[] | QueryStatementContext | null {
        if (i === undefined) {
            return this.getRuleContexts(QueryStatementContext);
        }

        return this.getRuleContext(i, QueryStatementContext);
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterSubQuery) {
             listener.enterSubQuery(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitSubQuery) {
             listener.exitSubQuery(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitSubQuery) {
            return visitor.visitSubQuery(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class UnsetExprContext extends TablePrimaryContext {
    public constructor(ctx: TablePrimaryContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_UNSET(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_UNSET, 0)!;
    }
    public LR_BRACKET(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.LR_BRACKET, 0)!;
    }
    public expression(): ExpressionContext {
        return this.getRuleContext(0, ExpressionContext)!;
    }
    public RR_BRACKET(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.RR_BRACKET, 0)!;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterUnsetExpr) {
             listener.enterUnsetExpr(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitUnsetExpr) {
             listener.exitUnsetExpr(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitUnsetExpr) {
            return visitor.visitUnsetExpr(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FuntionBodyContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public functionName(): FunctionNameContext {
        return this.getRuleContext(0, FunctionNameContext)!;
    }
    public LR_BRACKET(): antlr.TerminalNode[];
    public LR_BRACKET(i: number): antlr.TerminalNode | null;
    public LR_BRACKET(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSQLParser.LR_BRACKET);
    	} else {
    		return this.getToken(SparkSQLParser.LR_BRACKET, i);
    	}
    }
    public RR_BRACKET(): antlr.TerminalNode[];
    public RR_BRACKET(i: number): antlr.TerminalNode | null;
    public RR_BRACKET(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSQLParser.RR_BRACKET);
    	} else {
    		return this.getToken(SparkSQLParser.RR_BRACKET, i);
    	}
    }
    public funtionBody(): FuntionBodyContext[];
    public funtionBody(i: number): FuntionBodyContext | null;
    public funtionBody(i?: number): FuntionBodyContext[] | FuntionBodyContext | null {
        if (i === undefined) {
            return this.getRuleContexts(FuntionBodyContext);
        }

        return this.getRuleContext(i, FuntionBodyContext);
    }
    public functionParam(): FunctionParamContext[];
    public functionParam(i: number): FunctionParamContext | null;
    public functionParam(i?: number): FunctionParamContext[] | FunctionParamContext | null {
        if (i === undefined) {
            return this.getRuleContexts(FunctionParamContext);
        }

        return this.getRuleContext(i, FunctionParamContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSQLParser.COMMA);
    	} else {
    		return this.getToken(SparkSQLParser.COMMA, i);
    	}
    }
    public KW_AS(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_AS, 0);
    }
    public tableAlias(): TableAliasContext | null {
        return this.getRuleContext(0, TableAliasContext);
    }
    public projectItemDefinition(): ProjectItemDefinitionContext[];
    public projectItemDefinition(i: number): ProjectItemDefinitionContext | null;
    public projectItemDefinition(i?: number): ProjectItemDefinitionContext[] | ProjectItemDefinitionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ProjectItemDefinitionContext);
        }

        return this.getRuleContext(i, ProjectItemDefinitionContext);
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_funtionBody;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterFuntionBody) {
             listener.enterFuntionBody(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitFuntionBody) {
             listener.exitFuntionBody(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitFuntionBody) {
            return visitor.visitFuntionBody(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class UnpivotBodyContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_FOR(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_FOR, 0)!;
    }
    public columnName(): ColumnNameContext[];
    public columnName(i: number): ColumnNameContext | null;
    public columnName(i?: number): ColumnNameContext[] | ColumnNameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ColumnNameContext);
        }

        return this.getRuleContext(i, ColumnNameContext);
    }
    public KW_IN(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_IN, 0)!;
    }
    public expressionAsAliasList(): ExpressionAsAliasListContext {
        return this.getRuleContext(0, ExpressionAsAliasListContext)!;
    }
    public columnNameList(): ColumnNameListContext | null {
        return this.getRuleContext(0, ColumnNameListContext);
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_unpivotBody;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterUnpivotBody) {
             listener.enterUnpivotBody(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitUnpivotBody) {
             listener.exitUnpivotBody(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitUnpivotBody) {
            return visitor.visitUnpivotBody(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PivotBodyContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public expressionAsAlias(): ExpressionAsAliasContext[];
    public expressionAsAlias(i: number): ExpressionAsAliasContext | null;
    public expressionAsAlias(i?: number): ExpressionAsAliasContext[] | ExpressionAsAliasContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionAsAliasContext);
        }

        return this.getRuleContext(i, ExpressionAsAliasContext);
    }
    public KW_FOR(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_FOR, 0)!;
    }
    public KW_IN(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_IN, 0)!;
    }
    public expressionAsAliasList(): ExpressionAsAliasListContext {
        return this.getRuleContext(0, ExpressionAsAliasListContext)!;
    }
    public COMMA(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.COMMA, 0);
    }
    public columnName(): ColumnNameContext | null {
        return this.getRuleContext(0, ColumnNameContext);
    }
    public columnNameList(): ColumnNameListContext | null {
        return this.getRuleContext(0, ColumnNameListContext);
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_pivotBody;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterPivotBody) {
             listener.enterPivotBody(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitPivotBody) {
             listener.exitPivotBody(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitPivotBody) {
            return visitor.visitPivotBody(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ExpressionAsAliasContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public expression(): ExpressionContext {
        return this.getRuleContext(0, ExpressionContext)!;
    }
    public KW_AS(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_AS, 0);
    }
    public columnAlias(): ColumnAliasContext | null {
        return this.getRuleContext(0, ColumnAliasContext);
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_expressionAsAlias;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterExpressionAsAlias) {
             listener.enterExpressionAsAlias(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitExpressionAsAlias) {
             listener.exitExpressionAsAlias(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitExpressionAsAlias) {
            return visitor.visitExpressionAsAlias(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ExpressionAsAliasListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LR_BRACKET(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.LR_BRACKET, 0)!;
    }
    public expressionAsAlias(): ExpressionAsAliasContext[];
    public expressionAsAlias(i: number): ExpressionAsAliasContext | null;
    public expressionAsAlias(i?: number): ExpressionAsAliasContext[] | ExpressionAsAliasContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionAsAliasContext);
        }

        return this.getRuleContext(i, ExpressionAsAliasContext);
    }
    public RR_BRACKET(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.RR_BRACKET, 0)!;
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSQLParser.COMMA);
    	} else {
    		return this.getToken(SparkSQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_expressionAsAliasList;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterExpressionAsAliasList) {
             listener.enterExpressionAsAliasList(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitExpressionAsAliasList) {
             listener.exitExpressionAsAliasList(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitExpressionAsAliasList) {
            return visitor.visitExpressionAsAliasList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SystemTimePeriodContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_FOR(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_FOR, 0)!;
    }
    public KW_SYSTEM_TIME(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_SYSTEM_TIME, 0)!;
    }
    public KW_AS(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_AS, 0)!;
    }
    public KW_OF(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_OF, 0)!;
    }
    public dateTimeExpression(): DateTimeExpressionContext {
        return this.getRuleContext(0, DateTimeExpressionContext)!;
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_systemTimePeriod;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterSystemTimePeriod) {
             listener.enterSystemTimePeriod(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitSystemTimePeriod) {
             listener.exitSystemTimePeriod(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitSystemTimePeriod) {
            return visitor.visitSystemTimePeriod(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DateTimeExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public expression(): ExpressionContext {
        return this.getRuleContext(0, ExpressionContext)!;
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_dateTimeExpression;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterDateTimeExpression) {
             listener.enterDateTimeExpression(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitDateTimeExpression) {
             listener.exitDateTimeExpression(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitDateTimeExpression) {
            return visitor.visitDateTimeExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class InlineDataValueClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public expression(): ExpressionContext[];
    public expression(i: number): ExpressionContext | null;
    public expression(i?: number): ExpressionContext[] | ExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }

        return this.getRuleContext(i, ExpressionContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSQLParser.COMMA);
    	} else {
    		return this.getToken(SparkSQLParser.COMMA, i);
    	}
    }
    public tableAlias(): TableAliasContext | null {
        return this.getRuleContext(0, TableAliasContext);
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_inlineDataValueClause;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterInlineDataValueClause) {
             listener.enterInlineDataValueClause(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitInlineDataValueClause) {
             listener.exitInlineDataValueClause(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitInlineDataValueClause) {
            return visitor.visitInlineDataValueClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class WindowTVFClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_TABLE(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_TABLE, 0)!;
    }
    public LR_BRACKET(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.LR_BRACKET, 0)!;
    }
    public windowTVFExpression(): WindowTVFExpressionContext {
        return this.getRuleContext(0, WindowTVFExpressionContext)!;
    }
    public RR_BRACKET(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.RR_BRACKET, 0)!;
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_windowTVFClause;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterWindowTVFClause) {
             listener.enterWindowTVFClause(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitWindowTVFClause) {
             listener.exitWindowTVFClause(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitWindowTVFClause) {
            return visitor.visitWindowTVFClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class WindowTVFExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public windowTVFName(): WindowTVFNameContext {
        return this.getRuleContext(0, WindowTVFNameContext)!;
    }
    public LR_BRACKET(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.LR_BRACKET, 0)!;
    }
    public windowTVFParam(): WindowTVFParamContext[];
    public windowTVFParam(i: number): WindowTVFParamContext | null;
    public windowTVFParam(i?: number): WindowTVFParamContext[] | WindowTVFParamContext | null {
        if (i === undefined) {
            return this.getRuleContexts(WindowTVFParamContext);
        }

        return this.getRuleContext(i, WindowTVFParamContext);
    }
    public RR_BRACKET(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.RR_BRACKET, 0)!;
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSQLParser.COMMA);
    	} else {
    		return this.getToken(SparkSQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_windowTVFExpression;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterWindowTVFExpression) {
             listener.enterWindowTVFExpression(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitWindowTVFExpression) {
             listener.exitWindowTVFExpression(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitWindowTVFExpression) {
            return visitor.visitWindowTVFExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class WindowTVFNameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_TUMBLE(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_TUMBLE, 0);
    }
    public KW_HOP(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_HOP, 0);
    }
    public KW_CUMULATE(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_CUMULATE, 0);
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_windowTVFName;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterWindowTVFName) {
             listener.enterWindowTVFName(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitWindowTVFName) {
             listener.exitWindowTVFName(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitWindowTVFName) {
            return visitor.visitWindowTVFName(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RowFormatDelimitedContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public sparkRecordWriterPart(): SparkRecordWriterPartContext[];
    public sparkRecordWriterPart(i: number): SparkRecordWriterPartContext | null;
    public sparkRecordWriterPart(i?: number): SparkRecordWriterPartContext[] | SparkRecordWriterPartContext | null {
        if (i === undefined) {
            return this.getRuleContexts(SparkRecordWriterPartContext);
        }

        return this.getRuleContext(i, SparkRecordWriterPartContext);
    }
    public usingAsColumnPart(): UsingAsColumnPartContext {
        return this.getRuleContext(0, UsingAsColumnPartContext)!;
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_rowFormatDelimited;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterRowFormatDelimited) {
             listener.enterRowFormatDelimited(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitRowFormatDelimited) {
             listener.exitRowFormatDelimited(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitRowFormatDelimited) {
            return visitor.visitRowFormatDelimited(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class HiveSerdeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public hiveSerdePart(): HiveSerdePartContext[];
    public hiveSerdePart(i: number): HiveSerdePartContext | null;
    public hiveSerdePart(i?: number): HiveSerdePartContext[] | HiveSerdePartContext | null {
        if (i === undefined) {
            return this.getRuleContexts(HiveSerdePartContext);
        }

        return this.getRuleContext(i, HiveSerdePartContext);
    }
    public usingAsColumnPart(): UsingAsColumnPartContext {
        return this.getRuleContext(0, UsingAsColumnPartContext)!;
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_hiveSerde;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterHiveSerde) {
             listener.enterHiveSerde(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitHiveSerde) {
             listener.exitHiveSerde(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitHiveSerde) {
            return visitor.visitHiveSerde(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class UsingAsColumnPartContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_USING(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_USING, 0)!;
    }
    public stringLiteral(): StringLiteralContext {
        return this.getRuleContext(0, StringLiteralContext)!;
    }
    public KW_AS(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_AS, 0)!;
    }
    public columnNameList(): ColumnNameListContext | null {
        return this.getRuleContext(0, ColumnNameListContext);
    }
    public physicalColumnDefinitionList(): PhysicalColumnDefinitionListContext | null {
        return this.getRuleContext(0, PhysicalColumnDefinitionListContext);
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_usingAsColumnPart;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterUsingAsColumnPart) {
             listener.enterUsingAsColumnPart(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitUsingAsColumnPart) {
             listener.exitUsingAsColumnPart(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitUsingAsColumnPart) {
            return visitor.visitUsingAsColumnPart(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class HiveSerdePartContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ROW(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_ROW, 0);
    }
    public KW_FORMAT(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_FORMAT, 0);
    }
    public KW_SERDE(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_SERDE, 0);
    }
    public stringLiteral(): StringLiteralContext[];
    public stringLiteral(i: number): StringLiteralContext | null;
    public stringLiteral(i?: number): StringLiteralContext[] | StringLiteralContext | null {
        if (i === undefined) {
            return this.getRuleContexts(StringLiteralContext);
        }

        return this.getRuleContext(i, StringLiteralContext);
    }
    public KW_WITH(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_WITH, 0);
    }
    public KW_SERDEPROPERTIES(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_SERDEPROPERTIES, 0);
    }
    public tableCanHasKeyPropertyList(): TableCanHasKeyPropertyListContext | null {
        return this.getRuleContext(0, TableCanHasKeyPropertyListContext);
    }
    public KW_RECORDWRITER(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_RECORDWRITER, 0);
    }
    public fieldsTerminatedBy(): FieldsTerminatedByContext | null {
        return this.getRuleContext(0, FieldsTerminatedByContext);
    }
    public KW_RECORDREADER(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_RECORDREADER, 0);
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_hiveSerdePart;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterHiveSerdePart) {
             listener.enterHiveSerdePart(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitHiveSerdePart) {
             listener.exitHiveSerdePart(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitHiveSerdePart) {
            return visitor.visitHiveSerdePart(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TableCanHasKeyPropertyListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LR_BRACKET(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.LR_BRACKET, 0)!;
    }
    public RR_BRACKET(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.RR_BRACKET, 0)!;
    }
    public tableProperty(): TablePropertyContext[];
    public tableProperty(i: number): TablePropertyContext | null;
    public tableProperty(i?: number): TablePropertyContext[] | TablePropertyContext | null {
        if (i === undefined) {
            return this.getRuleContexts(TablePropertyContext);
        }

        return this.getRuleContext(i, TablePropertyContext);
    }
    public tablePropertyKey(): TablePropertyKeyContext[];
    public tablePropertyKey(i: number): TablePropertyKeyContext | null;
    public tablePropertyKey(i?: number): TablePropertyKeyContext[] | TablePropertyKeyContext | null {
        if (i === undefined) {
            return this.getRuleContexts(TablePropertyKeyContext);
        }

        return this.getRuleContext(i, TablePropertyKeyContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSQLParser.COMMA);
    	} else {
    		return this.getToken(SparkSQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_tableCanHasKeyPropertyList;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterTableCanHasKeyPropertyList) {
             listener.enterTableCanHasKeyPropertyList(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitTableCanHasKeyPropertyList) {
             listener.exitTableCanHasKeyPropertyList(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitTableCanHasKeyPropertyList) {
            return visitor.visitTableCanHasKeyPropertyList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SparkRecordWriterPartContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public rowFormatDelimted(): RowFormatDelimtedContext | null {
        return this.getRuleContext(0, RowFormatDelimtedContext);
    }
    public fieldsTerminatedBy(): FieldsTerminatedByContext | null {
        return this.getRuleContext(0, FieldsTerminatedByContext);
    }
    public KW_LINES(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_LINES, 0);
    }
    public KW_TERMINATED(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_TERMINATED, 0);
    }
    public KW_BY(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_BY, 0);
    }
    public stringLiteral(): StringLiteralContext[];
    public stringLiteral(i: number): StringLiteralContext | null;
    public stringLiteral(i?: number): StringLiteralContext[] | StringLiteralContext | null {
        if (i === undefined) {
            return this.getRuleContexts(StringLiteralContext);
        }

        return this.getRuleContext(i, StringLiteralContext);
    }
    public KW_NULL(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_NULL, 0);
    }
    public KW_DEFINED(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_DEFINED, 0);
    }
    public KW_AS(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_AS, 0);
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_sparkRecordWriterPart;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterSparkRecordWriterPart) {
             listener.enterSparkRecordWriterPart(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitSparkRecordWriterPart) {
             listener.exitSparkRecordWriterPart(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitSparkRecordWriterPart) {
            return visitor.visitSparkRecordWriterPart(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class WindowTVFParamContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_TABLE(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_TABLE, 0);
    }
    public timeAttrColumn(): TimeAttrColumnContext | null {
        return this.getRuleContext(0, TimeAttrColumnContext);
    }
    public columnDescriptor(): ColumnDescriptorContext | null {
        return this.getRuleContext(0, ColumnDescriptorContext);
    }
    public timeIntervalExpression(): TimeIntervalExpressionContext | null {
        return this.getRuleContext(0, TimeIntervalExpressionContext);
    }
    public KW_DATA(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_DATA, 0);
    }
    public DOUBLE_RIGHT_ARROW(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.DOUBLE_RIGHT_ARROW, 0);
    }
    public KW_TIMECOL(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_TIMECOL, 0);
    }
    public timeIntervalParamName(): TimeIntervalParamNameContext | null {
        return this.getRuleContext(0, TimeIntervalParamNameContext);
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_windowTVFParam;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterWindowTVFParam) {
             listener.enterWindowTVFParam(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitWindowTVFParam) {
             listener.exitWindowTVFParam(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitWindowTVFParam) {
            return visitor.visitWindowTVFParam(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TimeIntervalParamNameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_DATA(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_DATA, 0);
    }
    public KW_TIMECOL(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_TIMECOL, 0);
    }
    public KW_SIZE(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_SIZE, 0);
    }
    public KW_OFFSET(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_OFFSET, 0);
    }
    public KW_STEP(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_STEP, 0);
    }
    public KW_SLIDE(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_SLIDE, 0);
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_timeIntervalParamName;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterTimeIntervalParamName) {
             listener.enterTimeIntervalParamName(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitTimeIntervalParamName) {
             listener.exitTimeIntervalParamName(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitTimeIntervalParamName) {
            return visitor.visitTimeIntervalParamName(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ColumnDescriptorContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_DESCRIPTOR(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_DESCRIPTOR, 0)!;
    }
    public LR_BRACKET(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.LR_BRACKET, 0)!;
    }
    public uid(): UidContext {
        return this.getRuleContext(0, UidContext)!;
    }
    public RR_BRACKET(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.RR_BRACKET, 0)!;
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_columnDescriptor;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterColumnDescriptor) {
             listener.enterColumnDescriptor(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitColumnDescriptor) {
             listener.exitColumnDescriptor(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitColumnDescriptor) {
            return visitor.visitColumnDescriptor(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class JoinConditionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ON(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_ON, 0);
    }
    public booleanExpression(): BooleanExpressionContext | null {
        return this.getRuleContext(0, BooleanExpressionContext);
    }
    public KW_USING(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_USING, 0);
    }
    public LR_BRACKET(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.LR_BRACKET, 0);
    }
    public uid(): UidContext[];
    public uid(i: number): UidContext | null;
    public uid(i?: number): UidContext[] | UidContext | null {
        if (i === undefined) {
            return this.getRuleContexts(UidContext);
        }

        return this.getRuleContext(i, UidContext);
    }
    public RR_BRACKET(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.RR_BRACKET, 0);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSQLParser.COMMA);
    	} else {
    		return this.getToken(SparkSQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_joinCondition;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterJoinCondition) {
             listener.enterJoinCondition(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitJoinCondition) {
             listener.exitJoinCondition(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitJoinCondition) {
            return visitor.visitJoinCondition(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class WhereClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_WHERE(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_WHERE, 0)!;
    }
    public booleanExpression(): BooleanExpressionContext {
        return this.getRuleContext(0, BooleanExpressionContext)!;
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_whereClause;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterWhereClause) {
             listener.enterWhereClause(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitWhereClause) {
             listener.exitWhereClause(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitWhereClause) {
            return visitor.visitWhereClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SamplingQueriesContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_TABLESAMPLE(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_TABLESAMPLE, 0)!;
    }
    public LR_BRACKET(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.LR_BRACKET, 0)!;
    }
    public KW_PERCENT(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_PERCENT, 0);
    }
    public RR_BRACKET(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.RR_BRACKET, 0)!;
    }
    public decimalLiteral(): DecimalLiteralContext | null {
        return this.getRuleContext(0, DecimalLiteralContext);
    }
    public DIG_LITERAL(): antlr.TerminalNode[];
    public DIG_LITERAL(i: number): antlr.TerminalNode | null;
    public DIG_LITERAL(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSQLParser.DIG_LITERAL);
    	} else {
    		return this.getToken(SparkSQLParser.DIG_LITERAL, i);
    	}
    }
    public expression(): ExpressionContext[];
    public expression(i: number): ExpressionContext | null;
    public expression(i?: number): ExpressionContext[] | ExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }

        return this.getRuleContext(i, ExpressionContext);
    }
    public KW_ROWS(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_ROWS, 0);
    }
    public KW_BUCKET(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_BUCKET, 0);
    }
    public KW_OUT(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_OUT, 0);
    }
    public KW_OF(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_OF, 0);
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_samplingQueries;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterSamplingQueries) {
             listener.enterSamplingQueries(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitSamplingQueries) {
             listener.exitSamplingQueries(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitSamplingQueries) {
            return visitor.visitSamplingQueries(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SomeByClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public clusteredByClause(): ClusteredByClauseContext | null {
        return this.getRuleContext(0, ClusteredByClauseContext);
    }
    public clusterByClause(): ClusterByClauseContext | null {
        return this.getRuleContext(0, ClusterByClauseContext);
    }
    public distributeByClause(): DistributeByClauseContext | null {
        return this.getRuleContext(0, DistributeByClauseContext);
    }
    public groupByClause(): GroupByClauseContext | null {
        return this.getRuleContext(0, GroupByClauseContext);
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_someByClause;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterSomeByClause) {
             listener.enterSomeByClause(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitSomeByClause) {
             listener.exitSomeByClause(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitSomeByClause) {
            return visitor.visitSomeByClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ClusterByClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_CLUSTER(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_CLUSTER, 0)!;
    }
    public KW_BY(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_BY, 0)!;
    }
    public groupItemDefinition(): GroupItemDefinitionContext[];
    public groupItemDefinition(i: number): GroupItemDefinitionContext | null;
    public groupItemDefinition(i?: number): GroupItemDefinitionContext[] | GroupItemDefinitionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(GroupItemDefinitionContext);
        }

        return this.getRuleContext(i, GroupItemDefinitionContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSQLParser.COMMA);
    	} else {
    		return this.getToken(SparkSQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_clusterByClause;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterClusterByClause) {
             listener.enterClusterByClause(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitClusterByClause) {
             listener.exitClusterByClause(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitClusterByClause) {
            return visitor.visitClusterByClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ClusteredByClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_CLUSTERED(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_CLUSTERED, 0)!;
    }
    public KW_BY(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_BY, 0)!;
    }
    public groupItemDefinition(): GroupItemDefinitionContext[];
    public groupItemDefinition(i: number): GroupItemDefinitionContext | null;
    public groupItemDefinition(i?: number): GroupItemDefinitionContext[] | GroupItemDefinitionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(GroupItemDefinitionContext);
        }

        return this.getRuleContext(i, GroupItemDefinitionContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSQLParser.COMMA);
    	} else {
    		return this.getToken(SparkSQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_clusteredByClause;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterClusteredByClause) {
             listener.enterClusteredByClause(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitClusteredByClause) {
             listener.exitClusteredByClause(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitClusteredByClause) {
            return visitor.visitClusteredByClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DistributeByClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_DISTRIBUTE(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_DISTRIBUTE, 0)!;
    }
    public KW_BY(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_BY, 0)!;
    }
    public groupItemDefinition(): GroupItemDefinitionContext[];
    public groupItemDefinition(i: number): GroupItemDefinitionContext | null;
    public groupItemDefinition(i?: number): GroupItemDefinitionContext[] | GroupItemDefinitionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(GroupItemDefinitionContext);
        }

        return this.getRuleContext(i, GroupItemDefinitionContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSQLParser.COMMA);
    	} else {
    		return this.getToken(SparkSQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_distributeByClause;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterDistributeByClause) {
             listener.enterDistributeByClause(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitDistributeByClause) {
             listener.exitDistributeByClause(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitDistributeByClause) {
            return visitor.visitDistributeByClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class GroupByClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_GROUP(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_GROUP, 0)!;
    }
    public KW_BY(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_BY, 0)!;
    }
    public groupingSet(): GroupingSetContext | null {
        return this.getRuleContext(0, GroupingSetContext);
    }
    public KW_WITH(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_WITH, 0);
    }
    public groupingSetsNotionName(): GroupingSetsNotionNameContext | null {
        return this.getRuleContext(0, GroupingSetsNotionNameContext);
    }
    public groupItemDefinition(): GroupItemDefinitionContext[];
    public groupItemDefinition(i: number): GroupItemDefinitionContext | null;
    public groupItemDefinition(i?: number): GroupItemDefinitionContext[] | GroupItemDefinitionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(GroupItemDefinitionContext);
        }

        return this.getRuleContext(i, GroupItemDefinitionContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSQLParser.COMMA);
    	} else {
    		return this.getToken(SparkSQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_groupByClause;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterGroupByClause) {
             listener.enterGroupByClause(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitGroupByClause) {
             listener.exitGroupByClause(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitGroupByClause) {
            return visitor.visitGroupByClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class GroupItemDefinitionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public expression(): ExpressionContext[];
    public expression(i: number): ExpressionContext | null;
    public expression(i?: number): ExpressionContext[] | ExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }

        return this.getRuleContext(i, ExpressionContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSQLParser.COMMA);
    	} else {
    		return this.getToken(SparkSQLParser.COMMA, i);
    	}
    }
    public groupWindowFunction(): GroupWindowFunctionContext | null {
        return this.getRuleContext(0, GroupWindowFunctionContext);
    }
    public LR_BRACKET(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.LR_BRACKET, 0);
    }
    public RR_BRACKET(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.RR_BRACKET, 0);
    }
    public groupingSetsNotionName(): GroupingSetsNotionNameContext | null {
        return this.getRuleContext(0, GroupingSetsNotionNameContext);
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_groupItemDefinition;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterGroupItemDefinition) {
             listener.enterGroupItemDefinition(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitGroupItemDefinition) {
             listener.exitGroupItemDefinition(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitGroupItemDefinition) {
            return visitor.visitGroupItemDefinition(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class GroupingSetContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public groupingSets(): GroupingSetsContext {
        return this.getRuleContext(0, GroupingSetsContext)!;
    }
    public LR_BRACKET(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.LR_BRACKET, 0)!;
    }
    public groupItemDefinition(): GroupItemDefinitionContext[];
    public groupItemDefinition(i: number): GroupItemDefinitionContext | null;
    public groupItemDefinition(i?: number): GroupItemDefinitionContext[] | GroupItemDefinitionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(GroupItemDefinitionContext);
        }

        return this.getRuleContext(i, GroupItemDefinitionContext);
    }
    public RR_BRACKET(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.RR_BRACKET, 0)!;
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSQLParser.COMMA);
    	} else {
    		return this.getToken(SparkSQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_groupingSet;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterGroupingSet) {
             listener.enterGroupingSet(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitGroupingSet) {
             listener.exitGroupingSet(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitGroupingSet) {
            return visitor.visitGroupingSet(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class GroupingSetsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_GROUPING(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_GROUPING, 0)!;
    }
    public KW_SETS(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_SETS, 0)!;
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_groupingSets;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterGroupingSets) {
             listener.enterGroupingSets(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitGroupingSets) {
             listener.exitGroupingSets(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitGroupingSets) {
            return visitor.visitGroupingSets(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class GroupingSetsNotionNameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_CUBE(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_CUBE, 0);
    }
    public KW_ROLLUP(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_ROLLUP, 0);
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_groupingSetsNotionName;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterGroupingSetsNotionName) {
             listener.enterGroupingSetsNotionName(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitGroupingSetsNotionName) {
             listener.exitGroupingSetsNotionName(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitGroupingSetsNotionName) {
            return visitor.visitGroupingSetsNotionName(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class GroupWindowFunctionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public groupWindowFunctionName(): GroupWindowFunctionNameContext {
        return this.getRuleContext(0, GroupWindowFunctionNameContext)!;
    }
    public LR_BRACKET(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.LR_BRACKET, 0)!;
    }
    public timeAttrColumn(): TimeAttrColumnContext {
        return this.getRuleContext(0, TimeAttrColumnContext)!;
    }
    public COMMA(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.COMMA, 0)!;
    }
    public timeIntervalExpression(): TimeIntervalExpressionContext {
        return this.getRuleContext(0, TimeIntervalExpressionContext)!;
    }
    public RR_BRACKET(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.RR_BRACKET, 0)!;
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_groupWindowFunction;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterGroupWindowFunction) {
             listener.enterGroupWindowFunction(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitGroupWindowFunction) {
             listener.exitGroupWindowFunction(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitGroupWindowFunction) {
            return visitor.visitGroupWindowFunction(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class GroupWindowFunctionNameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_TUMBLE(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_TUMBLE, 0);
    }
    public KW_HOP(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_HOP, 0);
    }
    public KW_SESSION(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_SESSION, 0);
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_groupWindowFunctionName;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterGroupWindowFunctionName) {
             listener.enterGroupWindowFunctionName(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitGroupWindowFunctionName) {
             listener.exitGroupWindowFunctionName(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitGroupWindowFunctionName) {
            return visitor.visitGroupWindowFunctionName(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TimeAttrColumnContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public uid(): UidContext {
        return this.getRuleContext(0, UidContext)!;
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_timeAttrColumn;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterTimeAttrColumn) {
             listener.enterTimeAttrColumn(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitTimeAttrColumn) {
             listener.exitTimeAttrColumn(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitTimeAttrColumn) {
            return visitor.visitTimeAttrColumn(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class HavingClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_HAVING(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_HAVING, 0)!;
    }
    public booleanExpression(): BooleanExpressionContext {
        return this.getRuleContext(0, BooleanExpressionContext)!;
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_havingClause;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterHavingClause) {
             listener.enterHavingClause(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitHavingClause) {
             listener.exitHavingClause(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitHavingClause) {
            return visitor.visitHavingClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class WindowClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_WINDOW(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_WINDOW, 0)!;
    }
    public namedWindow(): NamedWindowContext[];
    public namedWindow(i: number): NamedWindowContext | null;
    public namedWindow(i?: number): NamedWindowContext[] | NamedWindowContext | null {
        if (i === undefined) {
            return this.getRuleContexts(NamedWindowContext);
        }

        return this.getRuleContext(i, NamedWindowContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSQLParser.COMMA);
    	} else {
    		return this.getToken(SparkSQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_windowClause;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterWindowClause) {
             listener.enterWindowClause(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitWindowClause) {
             listener.exitWindowClause(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitWindowClause) {
            return visitor.visitWindowClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class NamedWindowContext extends antlr.ParserRuleContext {
    public _name?: ErrorCapturingIdentifierContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_AS(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_AS, 0)!;
    }
    public windowSpec(): WindowSpecContext {
        return this.getRuleContext(0, WindowSpecContext)!;
    }
    public errorCapturingIdentifier(): ErrorCapturingIdentifierContext {
        return this.getRuleContext(0, ErrorCapturingIdentifierContext)!;
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_namedWindow;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterNamedWindow) {
             listener.enterNamedWindow(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitNamedWindow) {
             listener.exitNamedWindow(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitNamedWindow) {
            return visitor.visitNamedWindow(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class WindowSpecContext extends antlr.ParserRuleContext {
    public _name?: ErrorCapturingIdentifierContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LR_BRACKET(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.LR_BRACKET, 0)!;
    }
    public RR_BRACKET(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.RR_BRACKET, 0)!;
    }
    public partitionByClause(): PartitionByClauseContext | null {
        return this.getRuleContext(0, PartitionByClauseContext);
    }
    public sortByCaluse(): SortByCaluseContext | null {
        return this.getRuleContext(0, SortByCaluseContext);
    }
    public orderByCaluse(): OrderByCaluseContext | null {
        return this.getRuleContext(0, OrderByCaluseContext);
    }
    public windowFrame(): WindowFrameContext | null {
        return this.getRuleContext(0, WindowFrameContext);
    }
    public errorCapturingIdentifier(): ErrorCapturingIdentifierContext | null {
        return this.getRuleContext(0, ErrorCapturingIdentifierContext);
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_windowSpec;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterWindowSpec) {
             listener.enterWindowSpec(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitWindowSpec) {
             listener.exitWindowSpec(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitWindowSpec) {
            return visitor.visitWindowSpec(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class MatchRecognizeClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_MATCH_RECOGNIZE(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_MATCH_RECOGNIZE, 0)!;
    }
    public LR_BRACKET(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.LR_BRACKET, 0)!;
    }
    public patternVariablesDefinition(): PatternVariablesDefinitionContext {
        return this.getRuleContext(0, PatternVariablesDefinitionContext)!;
    }
    public RR_BRACKET(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.RR_BRACKET, 0)!;
    }
    public partitionByClause(): PartitionByClauseContext | null {
        return this.getRuleContext(0, PartitionByClauseContext);
    }
    public sortByCaluse(): SortByCaluseContext | null {
        return this.getRuleContext(0, SortByCaluseContext);
    }
    public orderByCaluse(): OrderByCaluseContext | null {
        return this.getRuleContext(0, OrderByCaluseContext);
    }
    public measuresClause(): MeasuresClauseContext | null {
        return this.getRuleContext(0, MeasuresClauseContext);
    }
    public outputMode(): OutputModeContext | null {
        return this.getRuleContext(0, OutputModeContext);
    }
    public afterMatchStrategy(): AfterMatchStrategyContext | null {
        return this.getRuleContext(0, AfterMatchStrategyContext);
    }
    public patternDefinition(): PatternDefinitionContext | null {
        return this.getRuleContext(0, PatternDefinitionContext);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public KW_AS(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_AS, 0);
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_matchRecognizeClause;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterMatchRecognizeClause) {
             listener.enterMatchRecognizeClause(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitMatchRecognizeClause) {
             listener.exitMatchRecognizeClause(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitMatchRecognizeClause) {
            return visitor.visitMatchRecognizeClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class OrderByCaluseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ORDER(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_ORDER, 0)!;
    }
    public KW_BY(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_BY, 0)!;
    }
    public orderItemDefinition(): OrderItemDefinitionContext[];
    public orderItemDefinition(i: number): OrderItemDefinitionContext | null;
    public orderItemDefinition(i?: number): OrderItemDefinitionContext[] | OrderItemDefinitionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(OrderItemDefinitionContext);
        }

        return this.getRuleContext(i, OrderItemDefinitionContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSQLParser.COMMA);
    	} else {
    		return this.getToken(SparkSQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_orderByCaluse;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterOrderByCaluse) {
             listener.enterOrderByCaluse(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitOrderByCaluse) {
             listener.exitOrderByCaluse(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitOrderByCaluse) {
            return visitor.visitOrderByCaluse(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SortByCaluseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_SORT(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_SORT, 0)!;
    }
    public KW_BY(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_BY, 0)!;
    }
    public orderItemDefinition(): OrderItemDefinitionContext[];
    public orderItemDefinition(i: number): OrderItemDefinitionContext | null;
    public orderItemDefinition(i?: number): OrderItemDefinitionContext[] | OrderItemDefinitionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(OrderItemDefinitionContext);
        }

        return this.getRuleContext(i, OrderItemDefinitionContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSQLParser.COMMA);
    	} else {
    		return this.getToken(SparkSQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_sortByCaluse;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterSortByCaluse) {
             listener.enterSortByCaluse(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitSortByCaluse) {
             listener.exitSortByCaluse(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitSortByCaluse) {
            return visitor.visitSortByCaluse(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class OrderItemDefinitionContext extends antlr.ParserRuleContext {
    public _ordering?: Token | null;
    public _nullOrder?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public expression(): ExpressionContext {
        return this.getRuleContext(0, ExpressionContext)!;
    }
    public KW_NULLS(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_NULLS, 0);
    }
    public KW_ASC(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_ASC, 0);
    }
    public KW_DESC(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_DESC, 0);
    }
    public KW_LAST(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_LAST, 0);
    }
    public KW_FIRST(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_FIRST, 0);
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_orderItemDefinition;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterOrderItemDefinition) {
             listener.enterOrderItemDefinition(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitOrderItemDefinition) {
             listener.exitOrderItemDefinition(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitOrderItemDefinition) {
            return visitor.visitOrderItemDefinition(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class LimitClauseContext extends antlr.ParserRuleContext {
    public _limit?: ExpressionContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_LIMIT(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_LIMIT, 0)!;
    }
    public KW_ALL(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_ALL, 0);
    }
    public expression(): ExpressionContext | null {
        return this.getRuleContext(0, ExpressionContext);
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_limitClause;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterLimitClause) {
             listener.enterLimitClause(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitLimitClause) {
             listener.exitLimitClause(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitLimitClause) {
            return visitor.visitLimitClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class OffsetClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_OFFSET(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_OFFSET, 0)!;
    }
    public DIG_LITERAL(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.DIG_LITERAL, 0);
    }
    public expression(): ExpressionContext | null {
        return this.getRuleContext(0, ExpressionContext);
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_offsetClause;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterOffsetClause) {
             listener.enterOffsetClause(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitOffsetClause) {
             listener.exitOffsetClause(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitOffsetClause) {
            return visitor.visitOffsetClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PartitionByClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_PARTITION(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_PARTITION, 0)!;
    }
    public KW_BY(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_BY, 0)!;
    }
    public expression(): ExpressionContext[];
    public expression(i: number): ExpressionContext | null;
    public expression(i?: number): ExpressionContext[] | ExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }

        return this.getRuleContext(i, ExpressionContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSQLParser.COMMA);
    	} else {
    		return this.getToken(SparkSQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_partitionByClause;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterPartitionByClause) {
             listener.enterPartitionByClause(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitPartitionByClause) {
             listener.exitPartitionByClause(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitPartitionByClause) {
            return visitor.visitPartitionByClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class QuantifiersContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ASTERISK_SIGN(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.ASTERISK_SIGN, 0);
    }
    public ADD_SIGN(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.ADD_SIGN, 0);
    }
    public QUESTION_MARK_SIGN(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.QUESTION_MARK_SIGN, 0);
    }
    public LB_BRACKET(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.LB_BRACKET, 0);
    }
    public DIG_LITERAL(): antlr.TerminalNode[];
    public DIG_LITERAL(i: number): antlr.TerminalNode | null;
    public DIG_LITERAL(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSQLParser.DIG_LITERAL);
    	} else {
    		return this.getToken(SparkSQLParser.DIG_LITERAL, i);
    	}
    }
    public COMMA(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.COMMA, 0);
    }
    public RB_BRACKET(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.RB_BRACKET, 0);
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_quantifiers;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterQuantifiers) {
             listener.enterQuantifiers(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitQuantifiers) {
             listener.exitQuantifiers(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitQuantifiers) {
            return visitor.visitQuantifiers(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class MeasuresClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_MEASURES(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_MEASURES, 0)!;
    }
    public projectItemDefinition(): ProjectItemDefinitionContext[];
    public projectItemDefinition(i: number): ProjectItemDefinitionContext | null;
    public projectItemDefinition(i?: number): ProjectItemDefinitionContext[] | ProjectItemDefinitionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ProjectItemDefinitionContext);
        }

        return this.getRuleContext(i, ProjectItemDefinitionContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSQLParser.COMMA);
    	} else {
    		return this.getToken(SparkSQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_measuresClause;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterMeasuresClause) {
             listener.enterMeasuresClause(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitMeasuresClause) {
             listener.exitMeasuresClause(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitMeasuresClause) {
            return visitor.visitMeasuresClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PatternDefinitionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_PATTERN(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_PATTERN, 0)!;
    }
    public LR_BRACKET(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.LR_BRACKET, 0)!;
    }
    public RR_BRACKET(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.RR_BRACKET, 0)!;
    }
    public patternVariable(): PatternVariableContext[];
    public patternVariable(i: number): PatternVariableContext | null;
    public patternVariable(i?: number): PatternVariableContext[] | PatternVariableContext | null {
        if (i === undefined) {
            return this.getRuleContexts(PatternVariableContext);
        }

        return this.getRuleContext(i, PatternVariableContext);
    }
    public withinClause(): WithinClauseContext | null {
        return this.getRuleContext(0, WithinClauseContext);
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_patternDefinition;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterPatternDefinition) {
             listener.enterPatternDefinition(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitPatternDefinition) {
             listener.exitPatternDefinition(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitPatternDefinition) {
            return visitor.visitPatternDefinition(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PatternVariableContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public unquotedIdentifier(): UnquotedIdentifierContext {
        return this.getRuleContext(0, UnquotedIdentifierContext)!;
    }
    public quantifiers(): QuantifiersContext | null {
        return this.getRuleContext(0, QuantifiersContext);
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_patternVariable;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterPatternVariable) {
             listener.enterPatternVariable(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitPatternVariable) {
             listener.exitPatternVariable(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitPatternVariable) {
            return visitor.visitPatternVariable(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class OutputModeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ALL(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_ALL, 0);
    }
    public KW_ROWS(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_ROWS, 0);
    }
    public KW_PER(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_PER, 0)!;
    }
    public KW_MATCH(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_MATCH, 0)!;
    }
    public KW_ONE(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_ONE, 0);
    }
    public KW_ROW(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_ROW, 0);
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_outputMode;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterOutputMode) {
             listener.enterOutputMode(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitOutputMode) {
             listener.exitOutputMode(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitOutputMode) {
            return visitor.visitOutputMode(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AfterMatchStrategyContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_AFTER(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_AFTER, 0)!;
    }
    public KW_MATCH(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_MATCH, 0)!;
    }
    public KW_SKIP(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_SKIP, 0)!;
    }
    public KW_PAST(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_PAST, 0);
    }
    public KW_LAST(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_LAST, 0);
    }
    public KW_ROW(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_ROW, 0);
    }
    public KW_TO(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_TO, 0);
    }
    public KW_NEXT(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_NEXT, 0);
    }
    public unquotedIdentifier(): UnquotedIdentifierContext | null {
        return this.getRuleContext(0, UnquotedIdentifierContext);
    }
    public KW_FIRST(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_FIRST, 0);
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_afterMatchStrategy;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterAfterMatchStrategy) {
             listener.enterAfterMatchStrategy(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitAfterMatchStrategy) {
             listener.exitAfterMatchStrategy(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitAfterMatchStrategy) {
            return visitor.visitAfterMatchStrategy(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PatternVariablesDefinitionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_DEFINE(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_DEFINE, 0)!;
    }
    public projectItemDefinition(): ProjectItemDefinitionContext[];
    public projectItemDefinition(i: number): ProjectItemDefinitionContext | null;
    public projectItemDefinition(i?: number): ProjectItemDefinitionContext[] | ProjectItemDefinitionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ProjectItemDefinitionContext);
        }

        return this.getRuleContext(i, ProjectItemDefinitionContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSQLParser.COMMA);
    	} else {
    		return this.getToken(SparkSQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_patternVariablesDefinition;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterPatternVariablesDefinition) {
             listener.enterPatternVariablesDefinition(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitPatternVariablesDefinition) {
             listener.exitPatternVariablesDefinition(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitPatternVariablesDefinition) {
            return visitor.visitPatternVariablesDefinition(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class WindowFrameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_RANGE(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_RANGE, 0);
    }
    public KW_BETWEEN(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_BETWEEN, 0)!;
    }
    public timeIntervalExpression(): TimeIntervalExpressionContext | null {
        return this.getRuleContext(0, TimeIntervalExpressionContext);
    }
    public frameBound(): FrameBoundContext {
        return this.getRuleContext(0, FrameBoundContext)!;
    }
    public KW_ROWS(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_ROWS, 0);
    }
    public DIG_LITERAL(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.DIG_LITERAL, 0);
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_windowFrame;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterWindowFrame) {
             listener.enterWindowFrame(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitWindowFrame) {
             listener.exitWindowFrame(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitWindowFrame) {
            return visitor.visitWindowFrame(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FrameBoundContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_PRECEDING(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_PRECEDING, 0)!;
    }
    public KW_AND(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_AND, 0)!;
    }
    public KW_CURRENT(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_CURRENT, 0)!;
    }
    public KW_ROW(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_ROW, 0)!;
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_frameBound;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterFrameBound) {
             listener.enterFrameBound(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitFrameBound) {
             listener.exitFrameBound(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitFrameBound) {
            return visitor.visitFrameBound(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class WithinClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_WITHIN(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_WITHIN, 0)!;
    }
    public timeIntervalExpression(): TimeIntervalExpressionContext {
        return this.getRuleContext(0, TimeIntervalExpressionContext)!;
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_withinClause;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterWithinClause) {
             listener.enterWithinClause(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitWithinClause) {
             listener.exitWithinClause(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitWithinClause) {
            return visitor.visitWithinClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SelfDefinitionClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_PERIOD(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_PERIOD, 0)!;
    }
    public KW_FOR(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_FOR, 0)!;
    }
    public KW_SYSTEM_TIME(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_SYSTEM_TIME, 0)!;
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_selfDefinitionClause;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterSelfDefinitionClause) {
             listener.enterSelfDefinitionClause(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitSelfDefinitionClause) {
             listener.exitSelfDefinitionClause(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitSelfDefinitionClause) {
            return visitor.visitSelfDefinitionClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PartitionDefinitionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_PARTITIONED(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_PARTITIONED, 0)!;
    }
    public KW_BY(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_BY, 0)!;
    }
    public transformList(): TransformListContext {
        return this.getRuleContext(0, TransformListContext)!;
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_partitionDefinition;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterPartitionDefinition) {
             listener.enterPartitionDefinition(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitPartitionDefinition) {
             listener.exitPartitionDefinition(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitPartitionDefinition) {
            return visitor.visitPartitionDefinition(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TransformListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LR_BRACKET(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.LR_BRACKET, 0)!;
    }
    public transform(): TransformContext[];
    public transform(i: number): TransformContext | null;
    public transform(i?: number): TransformContext[] | TransformContext | null {
        if (i === undefined) {
            return this.getRuleContexts(TransformContext);
        }

        return this.getRuleContext(i, TransformContext);
    }
    public RR_BRACKET(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.RR_BRACKET, 0)!;
    }
    public dataTypeExpression(): DataTypeExpressionContext[];
    public dataTypeExpression(i: number): DataTypeExpressionContext | null;
    public dataTypeExpression(i?: number): DataTypeExpressionContext[] | DataTypeExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(DataTypeExpressionContext);
        }

        return this.getRuleContext(i, DataTypeExpressionContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSQLParser.COMMA);
    	} else {
    		return this.getToken(SparkSQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_transformList;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterTransformList) {
             listener.enterTransformList(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitTransformList) {
             listener.exitTransformList(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitTransformList) {
            return visitor.visitTransformList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TransformContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_transform;
    }
    public override copyFrom(ctx: TransformContext): void {
        super.copyFrom(ctx);
    }
}
export class IdentityTransformContext extends TransformContext {
    public constructor(ctx: TransformContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public qualifiedName(): QualifiedNameContext {
        return this.getRuleContext(0, QualifiedNameContext)!;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterIdentityTransform) {
             listener.enterIdentityTransform(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitIdentityTransform) {
             listener.exitIdentityTransform(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitIdentityTransform) {
            return visitor.visitIdentityTransform(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ApplyTransformContext extends TransformContext {
    public _transformName?: IdentifierContext;
    public constructor(ctx: TransformContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public LR_BRACKET(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.LR_BRACKET, 0)!;
    }
    public transformArgument(): TransformArgumentContext[];
    public transformArgument(i: number): TransformArgumentContext | null;
    public transformArgument(i?: number): TransformArgumentContext[] | TransformArgumentContext | null {
        if (i === undefined) {
            return this.getRuleContexts(TransformArgumentContext);
        }

        return this.getRuleContext(i, TransformArgumentContext);
    }
    public RR_BRACKET(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.RR_BRACKET, 0)!;
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSQLParser.COMMA);
    	} else {
    		return this.getToken(SparkSQLParser.COMMA, i);
    	}
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterApplyTransform) {
             listener.enterApplyTransform(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitApplyTransform) {
             listener.exitApplyTransform(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitApplyTransform) {
            return visitor.visitApplyTransform(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TransformArgumentContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public qualifiedName(): QualifiedNameContext | null {
        return this.getRuleContext(0, QualifiedNameContext);
    }
    public constant(): ConstantContext | null {
        return this.getRuleContext(0, ConstantContext);
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_transformArgument;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterTransformArgument) {
             listener.enterTransformArgument(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitTransformArgument) {
             listener.exitTransformArgument(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitTransformArgument) {
            return visitor.visitTransformArgument(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class LikeDefinitionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_LIKE(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_LIKE, 0)!;
    }
    public tablePath(): TablePathContext {
        return this.getRuleContext(0, TablePathContext)!;
    }
    public LR_BRACKET(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.LR_BRACKET, 0);
    }
    public RR_BRACKET(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.RR_BRACKET, 0);
    }
    public likeOption(): LikeOptionContext[];
    public likeOption(i: number): LikeOptionContext | null;
    public likeOption(i?: number): LikeOptionContext[] | LikeOptionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(LikeOptionContext);
        }

        return this.getRuleContext(i, LikeOptionContext);
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_likeDefinition;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterLikeDefinition) {
             listener.enterLikeDefinition(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitLikeDefinition) {
             listener.exitLikeDefinition(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitLikeDefinition) {
            return visitor.visitLikeDefinition(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DistributionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_DISTRIBUTED(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_DISTRIBUTED, 0)!;
    }
    public KW_BY(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_BY, 0);
    }
    public LR_BRACKET(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.LR_BRACKET, 0);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public RR_BRACKET(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.RR_BRACKET, 0);
    }
    public intoBuckets(): IntoBucketsContext | null {
        return this.getRuleContext(0, IntoBucketsContext);
    }
    public KW_HASH(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_HASH, 0);
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_distribution;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterDistribution) {
             listener.enterDistribution(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitDistribution) {
             listener.exitDistribution(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitDistribution) {
            return visitor.visitDistribution(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class UsingContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_USING(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_USING, 0)!;
    }
    public ID_LITERAL(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.ID_LITERAL, 0)!;
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_using;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterUsing) {
             listener.enterUsing(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitUsing) {
             listener.exitUsing(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitUsing) {
            return visitor.visitUsing(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class LikeOptionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_INCLUDING(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_INCLUDING, 0);
    }
    public KW_EXCLUDING(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_EXCLUDING, 0);
    }
    public KW_ALL(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_ALL, 0);
    }
    public KW_CONSTRAINTS(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_CONSTRAINTS, 0);
    }
    public KW_PARTITIONS(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_PARTITIONS, 0);
    }
    public KW_OVERWRITING(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_OVERWRITING, 0);
    }
    public KW_GENERATED(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_GENERATED, 0);
    }
    public KW_OPTIONS(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_OPTIONS, 0);
    }
    public KW_WATERMARKS(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_WATERMARKS, 0);
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_likeOption;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterLikeOption) {
             listener.enterLikeOption(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitLikeOption) {
             listener.exitLikeOption(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitLikeOption) {
            return visitor.visitLikeOption(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ColumnOptionDefinitionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public physicalColumnDefinition(): PhysicalColumnDefinitionContext | null {
        return this.getRuleContext(0, PhysicalColumnDefinitionContext);
    }
    public metadataColumnDefinition(): MetadataColumnDefinitionContext | null {
        return this.getRuleContext(0, MetadataColumnDefinitionContext);
    }
    public computedColumnDefinition(): ComputedColumnDefinitionContext | null {
        return this.getRuleContext(0, ComputedColumnDefinitionContext);
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_columnOptionDefinition;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterColumnOptionDefinition) {
             listener.enterColumnOptionDefinition(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitColumnOptionDefinition) {
             listener.exitColumnOptionDefinition(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitColumnOptionDefinition) {
            return visitor.visitColumnOptionDefinition(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PhysicalColumnDefinitionListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LR_BRACKET(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.LR_BRACKET, 0)!;
    }
    public RR_BRACKET(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.RR_BRACKET, 0)!;
    }
    public physicalColumnDefinition(): PhysicalColumnDefinitionContext[];
    public physicalColumnDefinition(i: number): PhysicalColumnDefinitionContext | null;
    public physicalColumnDefinition(i?: number): PhysicalColumnDefinitionContext[] | PhysicalColumnDefinitionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(PhysicalColumnDefinitionContext);
        }

        return this.getRuleContext(i, PhysicalColumnDefinitionContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSQLParser.COMMA);
    	} else {
    		return this.getToken(SparkSQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_physicalColumnDefinitionList;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterPhysicalColumnDefinitionList) {
             listener.enterPhysicalColumnDefinitionList(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitPhysicalColumnDefinitionList) {
             listener.exitPhysicalColumnDefinitionList(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitPhysicalColumnDefinitionList) {
            return visitor.visitPhysicalColumnDefinitionList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PhysicalColumnDefinitionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public columnName(): ColumnNameContext {
        return this.getRuleContext(0, ColumnNameContext)!;
    }
    public columnType(): ColumnTypeContext {
        return this.getRuleContext(0, ColumnTypeContext)!;
    }
    public columnConstraint(): ColumnConstraintContext | null {
        return this.getRuleContext(0, ColumnConstraintContext);
    }
    public commentSpec(): CommentSpecContext | null {
        return this.getRuleContext(0, CommentSpecContext);
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_physicalColumnDefinition;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterPhysicalColumnDefinition) {
             listener.enterPhysicalColumnDefinition(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitPhysicalColumnDefinition) {
             listener.exitPhysicalColumnDefinition(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitPhysicalColumnDefinition) {
            return visitor.visitPhysicalColumnDefinition(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ComputedColumnExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public expression(): ExpressionContext {
        return this.getRuleContext(0, ExpressionContext)!;
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_computedColumnExpression;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterComputedColumnExpression) {
             listener.enterComputedColumnExpression(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitComputedColumnExpression) {
             listener.exitComputedColumnExpression(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitComputedColumnExpression) {
            return visitor.visitComputedColumnExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class WatermarkDefinitionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_WATERMARK(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_WATERMARK, 0)!;
    }
    public KW_FOR(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_FOR, 0)!;
    }
    public expression(): ExpressionContext[];
    public expression(i: number): ExpressionContext | null;
    public expression(i?: number): ExpressionContext[] | ExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }

        return this.getRuleContext(i, ExpressionContext);
    }
    public KW_AS(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_AS, 0)!;
    }
    public uid(): UidContext[];
    public uid(i: number): UidContext | null;
    public uid(i?: number): UidContext[] | UidContext | null {
        if (i === undefined) {
            return this.getRuleContexts(UidContext);
        }

        return this.getRuleContext(i, UidContext);
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_watermarkDefinition;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterWatermarkDefinition) {
             listener.enterWatermarkDefinition(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitWatermarkDefinition) {
             listener.exitWatermarkDefinition(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitWatermarkDefinition) {
            return visitor.visitWatermarkDefinition(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TableConstraintContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_PRIMARY(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_PRIMARY, 0)!;
    }
    public KW_KEY(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_KEY, 0)!;
    }
    public columnNameList(): ColumnNameListContext {
        return this.getRuleContext(0, ColumnNameListContext)!;
    }
    public KW_NOT(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_NOT, 0)!;
    }
    public KW_ENFORCED(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_ENFORCED, 0)!;
    }
    public KW_CONSTRAINT(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_CONSTRAINT, 0);
    }
    public constraintName(): ConstraintNameContext | null {
        return this.getRuleContext(0, ConstraintNameContext);
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_tableConstraint;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterTableConstraint) {
             listener.enterTableConstraint(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitTableConstraint) {
             listener.exitTableConstraint(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitTableConstraint) {
            return visitor.visitTableConstraint(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ConstraintNameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_constraintName;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterConstraintName) {
             listener.enterConstraintName(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitConstraintName) {
             listener.exitConstraintName(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitConstraintName) {
            return visitor.visitConstraintName(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ValuesDefinitionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_VALUES(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_VALUES, 0)!;
    }
    public valuesRowDefinition(): ValuesRowDefinitionContext[];
    public valuesRowDefinition(i: number): ValuesRowDefinitionContext | null;
    public valuesRowDefinition(i?: number): ValuesRowDefinitionContext[] | ValuesRowDefinitionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ValuesRowDefinitionContext);
        }

        return this.getRuleContext(i, ValuesRowDefinitionContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSQLParser.COMMA);
    	} else {
    		return this.getToken(SparkSQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_valuesDefinition;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterValuesDefinition) {
             listener.enterValuesDefinition(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitValuesDefinition) {
             listener.exitValuesDefinition(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitValuesDefinition) {
            return visitor.visitValuesDefinition(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ValuesRowDefinitionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LR_BRACKET(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.LR_BRACKET, 0)!;
    }
    public constant(): ConstantContext[];
    public constant(i: number): ConstantContext | null;
    public constant(i?: number): ConstantContext[] | ConstantContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ConstantContext);
        }

        return this.getRuleContext(i, ConstantContext);
    }
    public RR_BRACKET(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.RR_BRACKET, 0)!;
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSQLParser.COMMA);
    	} else {
    		return this.getToken(SparkSQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_valuesRowDefinition;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterValuesRowDefinition) {
             listener.enterValuesRowDefinition(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitValuesRowDefinition) {
             listener.exitValuesRowDefinition(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitValuesRowDefinition) {
            return visitor.visitValuesRowDefinition(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class LengthOneDimensionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LR_BRACKET(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.LR_BRACKET, 0)!;
    }
    public decimalLiteral(): DecimalLiteralContext {
        return this.getRuleContext(0, DecimalLiteralContext)!;
    }
    public RR_BRACKET(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.RR_BRACKET, 0)!;
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_lengthOneDimension;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterLengthOneDimension) {
             listener.enterLengthOneDimension(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitLengthOneDimension) {
             listener.exitLengthOneDimension(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitLengthOneDimension) {
            return visitor.visitLengthOneDimension(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class LengthTwoOptionalDimensionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LR_BRACKET(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.LR_BRACKET, 0)!;
    }
    public decimalLiteral(): DecimalLiteralContext[];
    public decimalLiteral(i: number): DecimalLiteralContext | null;
    public decimalLiteral(i?: number): DecimalLiteralContext[] | DecimalLiteralContext | null {
        if (i === undefined) {
            return this.getRuleContexts(DecimalLiteralContext);
        }

        return this.getRuleContext(i, DecimalLiteralContext);
    }
    public RR_BRACKET(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.RR_BRACKET, 0)!;
    }
    public COMMA(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.COMMA, 0);
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_lengthTwoOptionalDimension;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterLengthTwoOptionalDimension) {
             listener.enterLengthTwoOptionalDimension(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitLengthTwoOptionalDimension) {
             listener.exitLengthTwoOptionalDimension(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitLengthTwoOptionalDimension) {
            return visitor.visitLengthTwoOptionalDimension(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class LengthTwoStringDimensionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LR_BRACKET(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.LR_BRACKET, 0)!;
    }
    public stringLiteral(): StringLiteralContext[];
    public stringLiteral(i: number): StringLiteralContext | null;
    public stringLiteral(i?: number): StringLiteralContext[] | StringLiteralContext | null {
        if (i === undefined) {
            return this.getRuleContexts(StringLiteralContext);
        }

        return this.getRuleContext(i, StringLiteralContext);
    }
    public RR_BRACKET(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.RR_BRACKET, 0)!;
    }
    public COMMA(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.COMMA, 0);
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_lengthTwoStringDimension;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterLengthTwoStringDimension) {
             listener.enterLengthTwoStringDimension(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitLengthTwoStringDimension) {
             listener.exitLengthTwoStringDimension(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitLengthTwoStringDimension) {
            return visitor.visitLengthTwoStringDimension(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class LengthOneTypeDimensionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_lengthOneTypeDimension;
    }
    public override copyFrom(ctx: LengthOneTypeDimensionContext): void {
        super.copyFrom(ctx);
    }
}
export class LengthSymbolsTypeDimensionContext extends LengthOneTypeDimensionContext {
    public constructor(ctx: LengthOneTypeDimensionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public LESS_SYMBOL(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.LESS_SYMBOL, 0)!;
    }
    public columnType(): ColumnTypeContext[];
    public columnType(i: number): ColumnTypeContext | null;
    public columnType(i?: number): ColumnTypeContext[] | ColumnTypeContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ColumnTypeContext);
        }

        return this.getRuleContext(i, ColumnTypeContext);
    }
    public GREATER_SYMBOL(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.GREATER_SYMBOL, 0)!;
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSQLParser.COMMA);
    	} else {
    		return this.getToken(SparkSQLParser.COMMA, i);
    	}
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterLengthSymbolsTypeDimension) {
             listener.enterLengthSymbolsTypeDimension(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitLengthSymbolsTypeDimension) {
             listener.exitLengthSymbolsTypeDimension(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitLengthSymbolsTypeDimension) {
            return visitor.visitLengthSymbolsTypeDimension(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class MapTypeDimensionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LESS_SYMBOL(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.LESS_SYMBOL, 0)!;
    }
    public columnType(): ColumnTypeContext[];
    public columnType(i: number): ColumnTypeContext | null;
    public columnType(i?: number): ColumnTypeContext[] | ColumnTypeContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ColumnTypeContext);
        }

        return this.getRuleContext(i, ColumnTypeContext);
    }
    public GREATER_SYMBOL(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.GREATER_SYMBOL, 0)!;
    }
    public COMMA(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.COMMA, 0);
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_mapTypeDimension;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterMapTypeDimension) {
             listener.enterMapTypeDimension(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitMapTypeDimension) {
             listener.exitMapTypeDimension(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitMapTypeDimension) {
            return visitor.visitMapTypeDimension(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RowTypeDimensionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_rowTypeDimension;
    }
    public override copyFrom(ctx: RowTypeDimensionContext): void {
        super.copyFrom(ctx);
    }
}
export class RowSymbolsTypeDimensionContext extends RowTypeDimensionContext {
    public constructor(ctx: RowTypeDimensionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public LESS_SYMBOL(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.LESS_SYMBOL, 0)!;
    }
    public columnName(): ColumnNameContext[];
    public columnName(i: number): ColumnNameContext | null;
    public columnName(i?: number): ColumnNameContext[] | ColumnNameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ColumnNameContext);
        }

        return this.getRuleContext(i, ColumnNameContext);
    }
    public columnType(): ColumnTypeContext[];
    public columnType(i: number): ColumnTypeContext | null;
    public columnType(i?: number): ColumnTypeContext[] | ColumnTypeContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ColumnTypeContext);
        }

        return this.getRuleContext(i, ColumnTypeContext);
    }
    public GREATER_SYMBOL(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.GREATER_SYMBOL, 0)!;
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSQLParser.COMMA);
    	} else {
    		return this.getToken(SparkSQLParser.COMMA, i);
    	}
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterRowSymbolsTypeDimension) {
             listener.enterRowSymbolsTypeDimension(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitRowSymbolsTypeDimension) {
             listener.exitRowSymbolsTypeDimension(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitRowSymbolsTypeDimension) {
            return visitor.visitRowSymbolsTypeDimension(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class StructTypeDimensionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_structTypeDimension;
    }
    public override copyFrom(ctx: StructTypeDimensionContext): void {
        super.copyFrom(ctx);
    }
}
export class StructSymbolsTypeDimensionContext extends StructTypeDimensionContext {
    public constructor(ctx: StructTypeDimensionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public LESS_SYMBOL(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.LESS_SYMBOL, 0)!;
    }
    public columnName(): ColumnNameContext[];
    public columnName(i: number): ColumnNameContext | null;
    public columnName(i?: number): ColumnNameContext[] | ColumnNameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ColumnNameContext);
        }

        return this.getRuleContext(i, ColumnNameContext);
    }
    public COLON_SYMB(): antlr.TerminalNode[];
    public COLON_SYMB(i: number): antlr.TerminalNode | null;
    public COLON_SYMB(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSQLParser.COLON_SYMB);
    	} else {
    		return this.getToken(SparkSQLParser.COLON_SYMB, i);
    	}
    }
    public columnType(): ColumnTypeContext[];
    public columnType(i: number): ColumnTypeContext | null;
    public columnType(i?: number): ColumnTypeContext[] | ColumnTypeContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ColumnTypeContext);
        }

        return this.getRuleContext(i, ColumnTypeContext);
    }
    public GREATER_SYMBOL(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.GREATER_SYMBOL, 0)!;
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSQLParser.COMMA);
    	} else {
    		return this.getToken(SparkSQLParser.COMMA, i);
    	}
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterStructSymbolsTypeDimension) {
             listener.enterStructSymbolsTypeDimension(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitStructSymbolsTypeDimension) {
             listener.exitStructSymbolsTypeDimension(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitStructSymbolsTypeDimension) {
            return visitor.visitStructSymbolsTypeDimension(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ColumnConstraintContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_PRIMARY(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_PRIMARY, 0);
    }
    public KW_KEY(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_KEY, 0);
    }
    public KW_CONSTRAINT(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_CONSTRAINT, 0);
    }
    public constraintName(): ConstraintNameContext | null {
        return this.getRuleContext(0, ConstraintNameContext);
    }
    public KW_NOT(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_NOT, 0);
    }
    public KW_ENFORCED(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_ENFORCED, 0);
    }
    public KW_NULL(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_NULL, 0);
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_columnConstraint;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterColumnConstraint) {
             listener.enterColumnConstraint(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitColumnConstraint) {
             listener.exitColumnConstraint(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitColumnConstraint) {
            return visitor.visitColumnConstraint(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CommentSpecContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_COMMENT(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_COMMENT, 0)!;
    }
    public propertyName(): PropertyNameContext {
        return this.getRuleContext(0, PropertyNameContext)!;
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_commentSpec;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterCommentSpec) {
             listener.enterCommentSpec(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitCommentSpec) {
             listener.exitCommentSpec(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitCommentSpec) {
            return visitor.visitCommentSpec(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class MetadataColumnDefinitionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public columnName(): ColumnNameContext {
        return this.getRuleContext(0, ColumnNameContext)!;
    }
    public columnType(): ColumnTypeContext {
        return this.getRuleContext(0, ColumnTypeContext)!;
    }
    public KW_METADATA(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_METADATA, 0)!;
    }
    public KW_FROM(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_FROM, 0);
    }
    public metadataKey(): MetadataKeyContext | null {
        return this.getRuleContext(0, MetadataKeyContext);
    }
    public KW_VIRTUAL(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_VIRTUAL, 0);
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_metadataColumnDefinition;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterMetadataColumnDefinition) {
             listener.enterMetadataColumnDefinition(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitMetadataColumnDefinition) {
             listener.exitMetadataColumnDefinition(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitMetadataColumnDefinition) {
            return visitor.visitMetadataColumnDefinition(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class MetadataKeyContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public STRING_LITERAL(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.STRING_LITERAL, 0)!;
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_metadataKey;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterMetadataKey) {
             listener.enterMetadataKey(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitMetadataKey) {
             listener.exitMetadataKey(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitMetadataKey) {
            return visitor.visitMetadataKey(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ComputedColumnDefinitionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public columnName(): ColumnNameContext {
        return this.getRuleContext(0, ColumnNameContext)!;
    }
    public KW_AS(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_AS, 0)!;
    }
    public computedColumnExpression(): ComputedColumnExpressionContext {
        return this.getRuleContext(0, ComputedColumnExpressionContext)!;
    }
    public commentSpec(): CommentSpecContext | null {
        return this.getRuleContext(0, CommentSpecContext);
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_computedColumnDefinition;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterComputedColumnDefinition) {
             listener.enterComputedColumnDefinition(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitComputedColumnDefinition) {
             listener.exitComputedColumnDefinition(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitComputedColumnDefinition) {
            return visitor.visitComputedColumnDefinition(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ColumnNameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public uid(): UidContext | null {
        return this.getRuleContext(0, UidContext);
    }
    public expression(): ExpressionContext | null {
        return this.getRuleContext(0, ExpressionContext);
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_columnName;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterColumnName) {
             listener.enterColumnName(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitColumnName) {
             listener.exitColumnName(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitColumnName) {
            return visitor.visitColumnName(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ColumnNameListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LR_BRACKET(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.LR_BRACKET, 0)!;
    }
    public columnName(): ColumnNameContext[];
    public columnName(i: number): ColumnNameContext | null;
    public columnName(i?: number): ColumnNameContext[] | ColumnNameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ColumnNameContext);
        }

        return this.getRuleContext(i, ColumnNameContext);
    }
    public RR_BRACKET(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.RR_BRACKET, 0)!;
    }
    public commentSpec(): CommentSpecContext[];
    public commentSpec(i: number): CommentSpecContext | null;
    public commentSpec(i?: number): CommentSpecContext[] | CommentSpecContext | null {
        if (i === undefined) {
            return this.getRuleContexts(CommentSpecContext);
        }

        return this.getRuleContext(i, CommentSpecContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSQLParser.COMMA);
    	} else {
    		return this.getToken(SparkSQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_columnNameList;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterColumnNameList) {
             listener.enterColumnNameList(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitColumnNameList) {
             listener.exitColumnNameList(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitColumnNameList) {
            return visitor.visitColumnNameList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ColumnTypeContext extends antlr.ParserRuleContext {
    public _typeName?: Token | null;
    public _type_?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_DATE(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_DATE, 0);
    }
    public KW_BOOLEAN(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_BOOLEAN, 0);
    }
    public KW_NULL(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_NULL, 0);
    }
    public KW_CHAR(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_CHAR, 0);
    }
    public KW_VARCHAR(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_VARCHAR, 0);
    }
    public KW_STRING(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_STRING, 0);
    }
    public KW_BINARY(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_BINARY, 0);
    }
    public KW_VARBINARY(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_VARBINARY, 0);
    }
    public KW_BYTES(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_BYTES, 0);
    }
    public KW_TINYINT(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_TINYINT, 0);
    }
    public KW_SMALLINT(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_SMALLINT, 0);
    }
    public KW_INT(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_INT, 0);
    }
    public KW_INTEGER(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_INTEGER, 0);
    }
    public KW_BIGINT(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_BIGINT, 0);
    }
    public KW_TIME(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_TIME, 0);
    }
    public KW_TIMESTAMP_LTZ(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_TIMESTAMP_LTZ, 0);
    }
    public KW_DATETIME(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_DATETIME, 0);
    }
    public lengthOneDimension(): LengthOneDimensionContext | null {
        return this.getRuleContext(0, LengthOneDimensionContext);
    }
    public KW_TIMESTAMP(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_TIMESTAMP, 0);
    }
    public KW_ZONE(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_ZONE, 0);
    }
    public KW_WITHOUT(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_WITHOUT, 0);
    }
    public KW_WITH(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_WITH, 0);
    }
    public KW_LOCAL(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_LOCAL, 0);
    }
    public KW_TIMESTAMP_3(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_TIMESTAMP_3, 0);
    }
    public KW_TIMESTAMP_6(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_TIMESTAMP_6, 0);
    }
    public KW_TIMESTAMP_9(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_TIMESTAMP_9, 0);
    }
    public KW_DECIMAL(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_DECIMAL, 0);
    }
    public KW_DEC(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_DEC, 0);
    }
    public KW_NUMERIC(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_NUMERIC, 0);
    }
    public KW_FLOAT(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_FLOAT, 0);
    }
    public KW_DOUBLE(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_DOUBLE, 0);
    }
    public lengthTwoOptionalDimension(): LengthTwoOptionalDimensionContext | null {
        return this.getRuleContext(0, LengthTwoOptionalDimensionContext);
    }
    public KW_ARRAY(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_ARRAY, 0);
    }
    public KW_MULTISET(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_MULTISET, 0);
    }
    public lengthOneTypeDimension(): LengthOneTypeDimensionContext | null {
        return this.getRuleContext(0, LengthOneTypeDimensionContext);
    }
    public KW_MAP(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_MAP, 0);
    }
    public mapTypeDimension(): MapTypeDimensionContext | null {
        return this.getRuleContext(0, MapTypeDimensionContext);
    }
    public KW_ROW(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_ROW, 0);
    }
    public rowTypeDimension(): RowTypeDimensionContext | null {
        return this.getRuleContext(0, RowTypeDimensionContext);
    }
    public structTypeDimension(): StructTypeDimensionContext | null {
        return this.getRuleContext(0, StructTypeDimensionContext);
    }
    public KW_STRUCT(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_STRUCT, 0);
    }
    public KW_RAW(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_RAW, 0);
    }
    public lengthTwoStringDimension(): LengthTwoStringDimensionContext | null {
        return this.getRuleContext(0, LengthTwoStringDimensionContext);
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_columnType;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterColumnType) {
             listener.enterColumnType(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitColumnType) {
             listener.exitColumnType(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitColumnType) {
            return visitor.visitColumnType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public booleanExpression(): BooleanExpressionContext {
        return this.getRuleContext(0, BooleanExpressionContext)!;
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_expression;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterExpression) {
             listener.enterExpression(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitExpression) {
             listener.exitExpression(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitExpression) {
            return visitor.visitExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class BooleanExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_booleanExpression;
    }
    public override copyFrom(ctx: BooleanExpressionContext): void {
        super.copyFrom(ctx);
    }
}
export class LogicalNotContext extends BooleanExpressionContext {
    public constructor(ctx: BooleanExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_NOT(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_NOT, 0)!;
    }
    public booleanExpression(): BooleanExpressionContext {
        return this.getRuleContext(0, BooleanExpressionContext)!;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterLogicalNot) {
             listener.enterLogicalNot(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitLogicalNot) {
             listener.exitLogicalNot(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitLogicalNot) {
            return visitor.visitLogicalNot(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class PredicatedContext extends BooleanExpressionContext {
    public constructor(ctx: BooleanExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public valueExpression(): ValueExpressionContext {
        return this.getRuleContext(0, ValueExpressionContext)!;
    }
    public predicate(): PredicateContext | null {
        return this.getRuleContext(0, PredicateContext);
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterPredicated) {
             listener.enterPredicated(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitPredicated) {
             listener.exitPredicated(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitPredicated) {
            return visitor.visitPredicated(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ExistsContext extends BooleanExpressionContext {
    public constructor(ctx: BooleanExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_EXISTS(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_EXISTS, 0)!;
    }
    public LR_BRACKET(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.LR_BRACKET, 0)!;
    }
    public queryStatement(): QueryStatementContext {
        return this.getRuleContext(0, QueryStatementContext)!;
    }
    public RR_BRACKET(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.RR_BRACKET, 0)!;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterExists) {
             listener.enterExists(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitExists) {
             listener.exitExists(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitExists) {
            return visitor.visitExists(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class LogicalNestedContext extends BooleanExpressionContext {
    public _kind?: Token | null;
    public constructor(ctx: BooleanExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public booleanExpression(): BooleanExpressionContext {
        return this.getRuleContext(0, BooleanExpressionContext)!;
    }
    public KW_IS(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_IS, 0)!;
    }
    public KW_TRUE(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_TRUE, 0);
    }
    public KW_FALSE(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_FALSE, 0);
    }
    public KW_UNKNOWN(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_UNKNOWN, 0);
    }
    public KW_NULL(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_NULL, 0);
    }
    public KW_NOT(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_NOT, 0);
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterLogicalNested) {
             listener.enterLogicalNested(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitLogicalNested) {
             listener.exitLogicalNested(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitLogicalNested) {
            return visitor.visitLogicalNested(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class LogicalBinaryContext extends BooleanExpressionContext {
    public _left?: BooleanExpressionContext;
    public _operator?: Token | null;
    public _right?: BooleanExpressionContext;
    public constructor(ctx: BooleanExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public booleanExpression(): BooleanExpressionContext[];
    public booleanExpression(i: number): BooleanExpressionContext | null;
    public booleanExpression(i?: number): BooleanExpressionContext[] | BooleanExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(BooleanExpressionContext);
        }

        return this.getRuleContext(i, BooleanExpressionContext);
    }
    public KW_AND(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_AND, 0);
    }
    public KW_OR(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_OR, 0);
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterLogicalBinary) {
             listener.enterLogicalBinary(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitLogicalBinary) {
             listener.exitLogicalBinary(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitLogicalBinary) {
            return visitor.visitLogicalBinary(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PredicateContext extends antlr.ParserRuleContext {
    public _kind?: Token | null;
    public _lower?: ValueExpressionContext;
    public _upper?: ValueExpressionContext;
    public _pattern?: ValueExpressionContext;
    public _right?: ValueExpressionContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_AND(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_AND, 0);
    }
    public KW_BETWEEN(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_BETWEEN, 0);
    }
    public valueExpression(): ValueExpressionContext[];
    public valueExpression(i: number): ValueExpressionContext | null;
    public valueExpression(i?: number): ValueExpressionContext[] | ValueExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ValueExpressionContext);
        }

        return this.getRuleContext(i, ValueExpressionContext);
    }
    public KW_NOT(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_NOT, 0);
    }
    public KW_ASYMMETRIC(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_ASYMMETRIC, 0);
    }
    public KW_SYMMETRIC(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_SYMMETRIC, 0);
    }
    public LR_BRACKET(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.LR_BRACKET, 0);
    }
    public expression(): ExpressionContext[];
    public expression(i: number): ExpressionContext | null;
    public expression(i?: number): ExpressionContext[] | ExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }

        return this.getRuleContext(i, ExpressionContext);
    }
    public RR_BRACKET(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.RR_BRACKET, 0);
    }
    public KW_IN(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_IN, 0);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSQLParser.COMMA);
    	} else {
    		return this.getToken(SparkSQLParser.COMMA, i);
    	}
    }
    public queryStatement(): QueryStatementContext | null {
        return this.getRuleContext(0, QueryStatementContext);
    }
    public KW_EXISTS(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_EXISTS, 0);
    }
    public KW_RLIKE(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_RLIKE, 0);
    }
    public likePredicate(): LikePredicateContext | null {
        return this.getRuleContext(0, LikePredicateContext);
    }
    public KW_IS(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_IS, 0);
    }
    public KW_TRUE(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_TRUE, 0);
    }
    public KW_FALSE(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_FALSE, 0);
    }
    public KW_UNKNOWN(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_UNKNOWN, 0);
    }
    public KW_NULL(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_NULL, 0);
    }
    public KW_FROM(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_FROM, 0);
    }
    public KW_DISTINCT(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_DISTINCT, 0);
    }
    public KW_TO(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_TO, 0);
    }
    public KW_SIMILAR(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_SIMILAR, 0);
    }
    public KW_ESCAPE(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_ESCAPE, 0);
    }
    public stringLiteral(): StringLiteralContext | null {
        return this.getRuleContext(0, StringLiteralContext);
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_predicate;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterPredicate) {
             listener.enterPredicate(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitPredicate) {
             listener.exitPredicate(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitPredicate) {
            return visitor.visitPredicate(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class LikePredicateContext extends antlr.ParserRuleContext {
    public _kind?: Token | null;
    public _quantifier?: Token | null;
    public _pattern?: ValueExpressionContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_LIKE(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_LIKE, 0);
    }
    public KW_ANY(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_ANY, 0);
    }
    public KW_ALL(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_ALL, 0);
    }
    public LR_BRACKET(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.LR_BRACKET, 0);
    }
    public RR_BRACKET(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.RR_BRACKET, 0);
    }
    public expression(): ExpressionContext[];
    public expression(i: number): ExpressionContext | null;
    public expression(i?: number): ExpressionContext[] | ExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }

        return this.getRuleContext(i, ExpressionContext);
    }
    public KW_NOT(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_NOT, 0);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSQLParser.COMMA);
    	} else {
    		return this.getToken(SparkSQLParser.COMMA, i);
    	}
    }
    public valueExpression(): ValueExpressionContext | null {
        return this.getRuleContext(0, ValueExpressionContext);
    }
    public KW_RLIKE(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_RLIKE, 0);
    }
    public KW_ESCAPE(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_ESCAPE, 0);
    }
    public stringLiteral(): StringLiteralContext[];
    public stringLiteral(i: number): StringLiteralContext | null;
    public stringLiteral(i?: number): StringLiteralContext[] | StringLiteralContext | null {
        if (i === undefined) {
            return this.getRuleContexts(StringLiteralContext);
        }

        return this.getRuleContext(i, StringLiteralContext);
    }
    public KW_REGEXP(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_REGEXP, 0);
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_likePredicate;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterLikePredicate) {
             listener.enterLikePredicate(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitLikePredicate) {
             listener.exitLikePredicate(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitLikePredicate) {
            return visitor.visitLikePredicate(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ValueExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_valueExpression;
    }
    public override copyFrom(ctx: ValueExpressionContext): void {
        super.copyFrom(ctx);
    }
}
export class ValueExpressionDefaultContext extends ValueExpressionContext {
    public constructor(ctx: ValueExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public primaryExpression(): PrimaryExpressionContext {
        return this.getRuleContext(0, PrimaryExpressionContext)!;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterValueExpressionDefault) {
             listener.enterValueExpressionDefault(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitValueExpressionDefault) {
             listener.exitValueExpressionDefault(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitValueExpressionDefault) {
            return visitor.visitValueExpressionDefault(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class OrContext extends ValueExpressionContext {
    public _left?: ValueExpressionContext;
    public _operator?: Token | null;
    public _right?: ValueExpressionContext;
    public constructor(ctx: ValueExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public valueExpression(): ValueExpressionContext[];
    public valueExpression(i: number): ValueExpressionContext | null;
    public valueExpression(i?: number): ValueExpressionContext[] | ValueExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ValueExpressionContext);
        }

        return this.getRuleContext(i, ValueExpressionContext);
    }
    public BIT_OR_OP(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.BIT_OR_OP, 0)!;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterOr) {
             listener.enterOr(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitOr) {
             listener.exitOr(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitOr) {
            return visitor.visitOr(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ComparisonContext extends ValueExpressionContext {
    public _left?: ValueExpressionContext;
    public _operator?: ComparisonOperatorContext;
    public _right?: ValueExpressionContext;
    public constructor(ctx: ValueExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public valueExpression(): ValueExpressionContext[];
    public valueExpression(i: number): ValueExpressionContext | null;
    public valueExpression(i?: number): ValueExpressionContext[] | ValueExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ValueExpressionContext);
        }

        return this.getRuleContext(i, ValueExpressionContext);
    }
    public comparisonOperator(): ComparisonOperatorContext {
        return this.getRuleContext(0, ComparisonOperatorContext)!;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterComparison) {
             listener.enterComparison(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitComparison) {
             listener.exitComparison(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitComparison) {
            return visitor.visitComparison(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ArithmeticBinaryContext extends ValueExpressionContext {
    public _left?: ValueExpressionContext;
    public _operator?: Token | null;
    public _right?: ValueExpressionContext;
    public constructor(ctx: ValueExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public valueExpression(): ValueExpressionContext[];
    public valueExpression(i: number): ValueExpressionContext | null;
    public valueExpression(i?: number): ValueExpressionContext[] | ValueExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ValueExpressionContext);
        }

        return this.getRuleContext(i, ValueExpressionContext);
    }
    public ASTERISK_SIGN(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.ASTERISK_SIGN, 0);
    }
    public SLASH_SIGN(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.SLASH_SIGN, 0);
    }
    public PENCENT_SIGN(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.PENCENT_SIGN, 0);
    }
    public KW_DIV(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_DIV, 0);
    }
    public ADD_SIGN(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.ADD_SIGN, 0);
    }
    public HYPNEN_SIGN(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.HYPNEN_SIGN, 0);
    }
    public DOUBLE_VERTICAL_SIGN(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.DOUBLE_VERTICAL_SIGN, 0);
    }
    public BIT_AND_OP(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.BIT_AND_OP, 0);
    }
    public BIT_XOR_OP(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.BIT_XOR_OP, 0);
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterArithmeticBinary) {
             listener.enterArithmeticBinary(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitArithmeticBinary) {
             listener.exitArithmeticBinary(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitArithmeticBinary) {
            return visitor.visitArithmeticBinary(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ArithmeticUnaryContext extends ValueExpressionContext {
    public _operator?: Token | null;
    public constructor(ctx: ValueExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public valueExpression(): ValueExpressionContext {
        return this.getRuleContext(0, ValueExpressionContext)!;
    }
    public HYPNEN_SIGN(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.HYPNEN_SIGN, 0);
    }
    public ADD_SIGN(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.ADD_SIGN, 0);
    }
    public BIT_NOT_OP(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.BIT_NOT_OP, 0);
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterArithmeticUnary) {
             listener.enterArithmeticUnary(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitArithmeticUnary) {
             listener.exitArithmeticUnary(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitArithmeticUnary) {
            return visitor.visitArithmeticUnary(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PrimaryExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_primaryExpression;
    }
    public override copyFrom(ctx: PrimaryExpressionContext): void {
        super.copyFrom(ctx);
    }
}
export class SimpleCaseContext extends PrimaryExpressionContext {
    public _value?: ExpressionContext;
    public _elseExpression?: ExpressionContext;
    public constructor(ctx: PrimaryExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_CASE(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_CASE, 0)!;
    }
    public KW_END(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_END, 0)!;
    }
    public expression(): ExpressionContext[];
    public expression(i: number): ExpressionContext | null;
    public expression(i?: number): ExpressionContext[] | ExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }

        return this.getRuleContext(i, ExpressionContext);
    }
    public whenClause(): WhenClauseContext[];
    public whenClause(i: number): WhenClauseContext | null;
    public whenClause(i?: number): WhenClauseContext[] | WhenClauseContext | null {
        if (i === undefined) {
            return this.getRuleContexts(WhenClauseContext);
        }

        return this.getRuleContext(i, WhenClauseContext);
    }
    public KW_ELSE(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_ELSE, 0);
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterSimpleCase) {
             listener.enterSimpleCase(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitSimpleCase) {
             listener.exitSimpleCase(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitSimpleCase) {
            return visitor.visitSimpleCase(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ColumnReferenceContext extends PrimaryExpressionContext {
    public constructor(ctx: PrimaryExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterColumnReference) {
             listener.enterColumnReference(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitColumnReference) {
             listener.exitColumnReference(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitColumnReference) {
            return visitor.visitColumnReference(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class LastContext extends PrimaryExpressionContext {
    public constructor(ctx: PrimaryExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_LAST(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_LAST, 0)!;
    }
    public LR_BRACKET(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.LR_BRACKET, 0)!;
    }
    public expression(): ExpressionContext {
        return this.getRuleContext(0, ExpressionContext)!;
    }
    public RR_BRACKET(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.RR_BRACKET, 0)!;
    }
    public KW_IGNORE(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_IGNORE, 0);
    }
    public KW_NULLS(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_NULLS, 0);
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterLast) {
             listener.enterLast(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitLast) {
             listener.exitLast(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitLast) {
            return visitor.visitLast(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class StarContext extends PrimaryExpressionContext {
    public constructor(ctx: PrimaryExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public ASTERISK_SIGN(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.ASTERISK_SIGN, 0)!;
    }
    public uid(): UidContext | null {
        return this.getRuleContext(0, UidContext);
    }
    public DOT(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.DOT, 0);
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterStar) {
             listener.enterStar(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitStar) {
             listener.exitStar(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitStar) {
            return visitor.visitStar(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class AggregateFunctionsContext extends PrimaryExpressionContext {
    public constructor(ctx: PrimaryExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public funtionBody(): FuntionBodyContext {
        return this.getRuleContext(0, FuntionBodyContext)!;
    }
    public filterPart(): FilterPartContext {
        return this.getRuleContext(0, FilterPartContext)!;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterAggregateFunctions) {
             listener.enterAggregateFunctions(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitAggregateFunctions) {
             listener.exitAggregateFunctions(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitAggregateFunctions) {
            return visitor.visitAggregateFunctions(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SubscriptContext extends PrimaryExpressionContext {
    public _value?: PrimaryExpressionContext;
    public _index?: ValueExpressionContext;
    public constructor(ctx: PrimaryExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public LS_BRACKET(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.LS_BRACKET, 0)!;
    }
    public RS_BRACKET(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.RS_BRACKET, 0)!;
    }
    public primaryExpression(): PrimaryExpressionContext {
        return this.getRuleContext(0, PrimaryExpressionContext)!;
    }
    public valueExpression(): ValueExpressionContext {
        return this.getRuleContext(0, ValueExpressionContext)!;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterSubscript) {
             listener.enterSubscript(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitSubscript) {
             listener.exitSubscript(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitSubscript) {
            return visitor.visitSubscript(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ValuesContext extends PrimaryExpressionContext {
    public constructor(ctx: PrimaryExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public LR_BRACKET(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.LR_BRACKET, 0)!;
    }
    public RR_BRACKET(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.RR_BRACKET, 0)!;
    }
    public functionParam(): FunctionParamContext[];
    public functionParam(i: number): FunctionParamContext | null;
    public functionParam(i?: number): FunctionParamContext[] | FunctionParamContext | null {
        if (i === undefined) {
            return this.getRuleContexts(FunctionParamContext);
        }

        return this.getRuleContext(i, FunctionParamContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSQLParser.COMMA);
    	} else {
    		return this.getToken(SparkSQLParser.COMMA, i);
    	}
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterValues) {
             listener.enterValues(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitValues) {
             listener.exitValues(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitValues) {
            return visitor.visitValues(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class FunctionCallFilterContext extends PrimaryExpressionContext {
    public constructor(ctx: PrimaryExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public functionName(): FunctionNameContext {
        return this.getRuleContext(0, FunctionNameContext)!;
    }
    public LR_BRACKET(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.LR_BRACKET, 0)!;
    }
    public functionParam(): FunctionParamContext {
        return this.getRuleContext(0, FunctionParamContext)!;
    }
    public RR_BRACKET(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.RR_BRACKET, 0)!;
    }
    public setQuantifier(): SetQuantifierContext | null {
        return this.getRuleContext(0, SetQuantifierContext);
    }
    public filterClause(): FilterClauseContext | null {
        return this.getRuleContext(0, FilterClauseContext);
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterFunctionCallFilter) {
             listener.enterFunctionCallFilter(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitFunctionCallFilter) {
             listener.exitFunctionCallFilter(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitFunctionCallFilter) {
            return visitor.visitFunctionCallFilter(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class OrderSetAggregateFunctionsContext extends PrimaryExpressionContext {
    public constructor(ctx: PrimaryExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public funtionBody(): FuntionBodyContext {
        return this.getRuleContext(0, FuntionBodyContext)!;
    }
    public KW_WITHIN(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_WITHIN, 0)!;
    }
    public KW_GROUP(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_GROUP, 0)!;
    }
    public LR_BRACKET(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.LR_BRACKET, 0)!;
    }
    public orderByCaluse(): OrderByCaluseContext {
        return this.getRuleContext(0, OrderByCaluseContext)!;
    }
    public RR_BRACKET(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.RR_BRACKET, 0)!;
    }
    public filterPart(): FilterPartContext | null {
        return this.getRuleContext(0, FilterPartContext);
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterOrderSetAggregateFunctions) {
             listener.enterOrderSetAggregateFunctions(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitOrderSetAggregateFunctions) {
             listener.exitOrderSetAggregateFunctions(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitOrderSetAggregateFunctions) {
            return visitor.visitOrderSetAggregateFunctions(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SubqueryExpressionContext extends PrimaryExpressionContext {
    public constructor(ctx: PrimaryExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public LR_BRACKET(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.LR_BRACKET, 0)!;
    }
    public queryStatement(): QueryStatementContext {
        return this.getRuleContext(0, QueryStatementContext)!;
    }
    public RR_BRACKET(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.RR_BRACKET, 0)!;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterSubqueryExpression) {
             listener.enterSubqueryExpression(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitSubqueryExpression) {
             listener.exitSubqueryExpression(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitSubqueryExpression) {
            return visitor.visitSubqueryExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class CastContext extends PrimaryExpressionContext {
    public constructor(ctx: PrimaryExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_CAST(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_CAST, 0)!;
    }
    public LR_BRACKET(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.LR_BRACKET, 0)!;
    }
    public expression(): ExpressionContext {
        return this.getRuleContext(0, ExpressionContext)!;
    }
    public KW_AS(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_AS, 0)!;
    }
    public columnType(): ColumnTypeContext {
        return this.getRuleContext(0, ColumnTypeContext)!;
    }
    public RR_BRACKET(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.RR_BRACKET, 0)!;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterCast) {
             listener.enterCast(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitCast) {
             listener.exitCast(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitCast) {
            return visitor.visitCast(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ConstantDefaultContext extends PrimaryExpressionContext {
    public constructor(ctx: PrimaryExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public constant(): ConstantContext {
        return this.getRuleContext(0, ConstantContext)!;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterConstantDefault) {
             listener.enterConstantDefault(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitConstantDefault) {
             listener.exitConstantDefault(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitConstantDefault) {
            return visitor.visitConstantDefault(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ParenthesizedExpressionContext extends PrimaryExpressionContext {
    public constructor(ctx: PrimaryExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public LR_BRACKET(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.LR_BRACKET, 0)!;
    }
    public expression(): ExpressionContext {
        return this.getRuleContext(0, ExpressionContext)!;
    }
    public RR_BRACKET(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.RR_BRACKET, 0)!;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterParenthesizedExpression) {
             listener.enterParenthesizedExpression(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitParenthesizedExpression) {
             listener.exitParenthesizedExpression(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitParenthesizedExpression) {
            return visitor.visitParenthesizedExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ComplexDataTypeFieldExpressionContext extends PrimaryExpressionContext {
    public constructor(ctx: PrimaryExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public complexDataTypeExpression(): ComplexDataTypeExpressionContext {
        return this.getRuleContext(0, ComplexDataTypeExpressionContext)!;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterComplexDataTypeFieldExpression) {
             listener.enterComplexDataTypeFieldExpression(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitComplexDataTypeFieldExpression) {
             listener.exitComplexDataTypeFieldExpression(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitComplexDataTypeFieldExpression) {
            return visitor.visitComplexDataTypeFieldExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class FunctionCallContext extends PrimaryExpressionContext {
    public constructor(ctx: PrimaryExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public functionName(): FunctionNameContext {
        return this.getRuleContext(0, FunctionNameContext)!;
    }
    public LR_BRACKET(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.LR_BRACKET, 0)!;
    }
    public RR_BRACKET(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.RR_BRACKET, 0)!;
    }
    public functionParam(): FunctionParamContext[];
    public functionParam(i: number): FunctionParamContext | null;
    public functionParam(i?: number): FunctionParamContext[] | FunctionParamContext | null {
        if (i === undefined) {
            return this.getRuleContexts(FunctionParamContext);
        }

        return this.getRuleContext(i, FunctionParamContext);
    }
    public setQuantifier(): SetQuantifierContext | null {
        return this.getRuleContext(0, SetQuantifierContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSQLParser.COMMA);
    	} else {
    		return this.getToken(SparkSQLParser.COMMA, i);
    	}
    }
    public KW_TO(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_TO, 0);
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterFunctionCall) {
             listener.enterFunctionCall(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitFunctionCall) {
             listener.exitFunctionCall(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitFunctionCall) {
            return visitor.visitFunctionCall(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class UidForColumnNameContext extends PrimaryExpressionContext {
    public constructor(ctx: PrimaryExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public uid(): UidContext {
        return this.getRuleContext(0, UidContext)!;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterUidForColumnName) {
             listener.enterUidForColumnName(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitUidForColumnName) {
             listener.exitUidForColumnName(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitUidForColumnName) {
            return visitor.visitUidForColumnName(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SearchedCaseContext extends PrimaryExpressionContext {
    public _elseExpression?: ExpressionContext;
    public constructor(ctx: PrimaryExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_CASE(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_CASE, 0)!;
    }
    public KW_END(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_END, 0)!;
    }
    public whenClause(): WhenClauseContext[];
    public whenClause(i: number): WhenClauseContext | null;
    public whenClause(i?: number): WhenClauseContext[] | WhenClauseContext | null {
        if (i === undefined) {
            return this.getRuleContexts(WhenClauseContext);
        }

        return this.getRuleContext(i, WhenClauseContext);
    }
    public KW_ELSE(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_ELSE, 0);
    }
    public expression(): ExpressionContext | null {
        return this.getRuleContext(0, ExpressionContext);
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterSearchedCase) {
             listener.enterSearchedCase(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitSearchedCase) {
             listener.exitSearchedCase(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitSearchedCase) {
            return visitor.visitSearchedCase(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class PositionContext extends PrimaryExpressionContext {
    public _substr?: ValueExpressionContext;
    public _str?: ValueExpressionContext;
    public constructor(ctx: PrimaryExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_POSITION(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_POSITION, 0)!;
    }
    public LR_BRACKET(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.LR_BRACKET, 0)!;
    }
    public KW_IN(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_IN, 0)!;
    }
    public RR_BRACKET(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.RR_BRACKET, 0)!;
    }
    public valueExpression(): ValueExpressionContext[];
    public valueExpression(i: number): ValueExpressionContext | null;
    public valueExpression(i?: number): ValueExpressionContext[] | ValueExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ValueExpressionContext);
        }

        return this.getRuleContext(i, ValueExpressionContext);
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterPosition) {
             listener.enterPosition(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitPosition) {
             listener.exitPosition(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitPosition) {
            return visitor.visitPosition(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class FirstContext extends PrimaryExpressionContext {
    public constructor(ctx: PrimaryExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_FIRST(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_FIRST, 0)!;
    }
    public LR_BRACKET(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.LR_BRACKET, 0)!;
    }
    public expression(): ExpressionContext {
        return this.getRuleContext(0, ExpressionContext)!;
    }
    public RR_BRACKET(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.RR_BRACKET, 0)!;
    }
    public KW_IGNORE(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_IGNORE, 0);
    }
    public KW_NULLS(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_NULLS, 0);
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterFirst) {
             listener.enterFirst(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitFirst) {
             listener.exitFirst(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitFirst) {
            return visitor.visitFirst(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ComplexDataTypeExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public arrayExpression(): ArrayExpressionContext | null {
        return this.getRuleContext(0, ArrayExpressionContext);
    }
    public rowExpression(): RowExpressionContext | null {
        return this.getRuleContext(0, RowExpressionContext);
    }
    public mapExpression(): MapExpressionContext | null {
        return this.getRuleContext(0, MapExpressionContext);
    }
    public structExpression(): StructExpressionContext | null {
        return this.getRuleContext(0, StructExpressionContext);
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_complexDataTypeExpression;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterComplexDataTypeExpression) {
             listener.enterComplexDataTypeExpression(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitComplexDataTypeExpression) {
             listener.exitComplexDataTypeExpression(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitComplexDataTypeExpression) {
            return visitor.visitComplexDataTypeExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ArrayExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ARRAY(): antlr.TerminalNode[];
    public KW_ARRAY(i: number): antlr.TerminalNode | null;
    public KW_ARRAY(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSQLParser.KW_ARRAY);
    	} else {
    		return this.getToken(SparkSQLParser.KW_ARRAY, i);
    	}
    }
    public LS_BRACKET(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.LS_BRACKET, 0)!;
    }
    public dataTypeExpression(): DataTypeExpressionContext[];
    public dataTypeExpression(i: number): DataTypeExpressionContext | null;
    public dataTypeExpression(i?: number): DataTypeExpressionContext[] | DataTypeExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(DataTypeExpressionContext);
        }

        return this.getRuleContext(i, DataTypeExpressionContext);
    }
    public RS_BRACKET(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.RS_BRACKET, 0)!;
    }
    public LR_BRACKET(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.LR_BRACKET, 0)!;
    }
    public RR_BRACKET(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.RR_BRACKET, 0)!;
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSQLParser.COMMA);
    	} else {
    		return this.getToken(SparkSQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_arrayExpression;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterArrayExpression) {
             listener.enterArrayExpression(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitArrayExpression) {
             listener.exitArrayExpression(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitArrayExpression) {
            return visitor.visitArrayExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class StructExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_STRUCT(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_STRUCT, 0)!;
    }
    public LR_BRACKET(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.LR_BRACKET, 0)!;
    }
    public dataTypeExpression(): DataTypeExpressionContext[];
    public dataTypeExpression(i: number): DataTypeExpressionContext | null;
    public dataTypeExpression(i?: number): DataTypeExpressionContext[] | DataTypeExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(DataTypeExpressionContext);
        }

        return this.getRuleContext(i, DataTypeExpressionContext);
    }
    public RR_BRACKET(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.RR_BRACKET, 0)!;
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSQLParser.COMMA);
    	} else {
    		return this.getToken(SparkSQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_structExpression;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterStructExpression) {
             listener.enterStructExpression(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitStructExpression) {
             listener.exitStructExpression(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitStructExpression) {
            return visitor.visitStructExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RowExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ROW(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_ROW, 0)!;
    }
    public LR_BRACKET(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.LR_BRACKET, 0)!;
    }
    public dataTypeExpression(): DataTypeExpressionContext[];
    public dataTypeExpression(i: number): DataTypeExpressionContext | null;
    public dataTypeExpression(i?: number): DataTypeExpressionContext[] | DataTypeExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(DataTypeExpressionContext);
        }

        return this.getRuleContext(i, DataTypeExpressionContext);
    }
    public RR_BRACKET(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.RR_BRACKET, 0)!;
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSQLParser.COMMA);
    	} else {
    		return this.getToken(SparkSQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_rowExpression;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterRowExpression) {
             listener.enterRowExpression(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitRowExpression) {
             listener.exitRowExpression(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitRowExpression) {
            return visitor.visitRowExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class MapExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_MAP(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_MAP, 0)!;
    }
    public LS_BRACKET(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.LS_BRACKET, 0)!;
    }
    public dataTypeExpression(): DataTypeExpressionContext[];
    public dataTypeExpression(i: number): DataTypeExpressionContext | null;
    public dataTypeExpression(i?: number): DataTypeExpressionContext[] | DataTypeExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(DataTypeExpressionContext);
        }

        return this.getRuleContext(i, DataTypeExpressionContext);
    }
    public COMMA(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.COMMA, 0)!;
    }
    public RS_BRACKET(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.RS_BRACKET, 0)!;
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_mapExpression;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterMapExpression) {
             listener.enterMapExpression(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitMapExpression) {
             listener.exitMapExpression(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitMapExpression) {
            return visitor.visitMapExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DataTypeExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public columnAlias(): ColumnAliasContext | null {
        return this.getRuleContext(0, ColumnAliasContext);
    }
    public constant(): ConstantContext | null {
        return this.getRuleContext(0, ConstantContext);
    }
    public complexDataTypeExpression(): ComplexDataTypeExpressionContext | null {
        return this.getRuleContext(0, ComplexDataTypeExpressionContext);
    }
    public sqlSimpleType(): SqlSimpleTypeContext | null {
        return this.getRuleContext(0, SqlSimpleTypeContext);
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_dataTypeExpression;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterDataTypeExpression) {
             listener.enterDataTypeExpression(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitDataTypeExpression) {
             listener.exitDataTypeExpression(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitDataTypeExpression) {
            return visitor.visitDataTypeExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SqlSimpleTypeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_BOOLEAN(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_BOOLEAN, 0);
    }
    public KW_BIGINT(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_BIGINT, 0);
    }
    public KW_BYTE(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_BYTE, 0);
    }
    public KW_TINYINT(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_TINYINT, 0);
    }
    public KW_SMALLINT(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_SMALLINT, 0);
    }
    public KW_INT(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_INT, 0);
    }
    public KW_INTEGER(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_INTEGER, 0);
    }
    public KW_FLOAT(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_FLOAT, 0);
    }
    public KW_DOUBLE(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_DOUBLE, 0);
    }
    public KW_DATE(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_DATE, 0);
    }
    public KW_LONG(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_LONG, 0);
    }
    public KW_DECIMAL(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_DECIMAL, 0);
    }
    public KW_NUMERIC(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_NUMERIC, 0);
    }
    public KW_TIME(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_TIME, 0);
    }
    public KW_TIMESTAMP(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_TIMESTAMP, 0);
    }
    public KW_TIMESTAMP_LTZ(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_TIMESTAMP_LTZ, 0);
    }
    public KW_TIMESTAMP_NTZ(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_TIMESTAMP_NTZ, 0);
    }
    public KW_REAL(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_REAL, 0);
    }
    public KW_SHORT(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_SHORT, 0);
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_sqlSimpleType;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterSqlSimpleType) {
             listener.enterSqlSimpleType(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitSqlSimpleType) {
             listener.exitSqlSimpleType(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitSqlSimpleType) {
            return visitor.visitSqlSimpleType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FunctionNameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public nonReservedKeywords(): NonReservedKeywordsContext | null {
        return this.getRuleContext(0, NonReservedKeywordsContext);
    }
    public uid(): UidContext | null {
        return this.getRuleContext(0, UidContext);
    }
    public reservedKeywordsUsedAsFuncName(): ReservedKeywordsUsedAsFuncNameContext | null {
        return this.getRuleContext(0, ReservedKeywordsUsedAsFuncNameContext);
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_functionName;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterFunctionName) {
             listener.enterFunctionName(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitFunctionName) {
             listener.exitFunctionName(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitFunctionName) {
            return visitor.visitFunctionName(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FunctionParamContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public reservedKeywordsUsedAsFuncParam(): ReservedKeywordsUsedAsFuncParamContext | null {
        return this.getRuleContext(0, ReservedKeywordsUsedAsFuncParamContext);
    }
    public timeIntervalUnit(): TimeIntervalUnitContext | null {
        return this.getRuleContext(0, TimeIntervalUnitContext);
    }
    public timePointUnit(): TimePointUnitContext | null {
        return this.getRuleContext(0, TimePointUnitContext);
    }
    public expression(): ExpressionContext | null {
        return this.getRuleContext(0, ExpressionContext);
    }
    public filterClause(): FilterClauseContext | null {
        return this.getRuleContext(0, FilterClauseContext);
    }
    public constant(): ConstantContext | null {
        return this.getRuleContext(0, ConstantContext);
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_functionParam;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterFunctionParam) {
             listener.enterFunctionParam(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitFunctionParam) {
             listener.exitFunctionParam(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitFunctionParam) {
            return visitor.visitFunctionParam(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FilterClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_FILTER(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_FILTER, 0)!;
    }
    public LR_BRACKET(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.LR_BRACKET, 0)!;
    }
    public KW_WHERE(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_WHERE, 0)!;
    }
    public booleanExpression(): BooleanExpressionContext {
        return this.getRuleContext(0, BooleanExpressionContext)!;
    }
    public RR_BRACKET(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.RR_BRACKET, 0)!;
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_filterClause;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterFilterClause) {
             listener.enterFilterClause(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitFilterClause) {
             listener.exitFilterClause(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitFilterClause) {
            return visitor.visitFilterClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CorrelationNameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_correlationName;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterCorrelationName) {
             listener.enterCorrelationName(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitCorrelationName) {
             listener.exitCorrelationName(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitCorrelationName) {
            return visitor.visitCorrelationName(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class QualifiedNameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public uid(): UidContext | null {
        return this.getRuleContext(0, UidContext);
    }
    public unquotedAnyString(): UnquotedAnyStringContext | null {
        return this.getRuleContext(0, UnquotedAnyStringContext);
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_qualifiedName;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterQualifiedName) {
             listener.enterQualifiedName(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitQualifiedName) {
             listener.exitQualifiedName(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitQualifiedName) {
            return visitor.visitQualifiedName(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TimeIntervalExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_INTERVAL(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_INTERVAL, 0)!;
    }
    public errorCapturingMultiUnitsInterval(): ErrorCapturingMultiUnitsIntervalContext | null {
        return this.getRuleContext(0, ErrorCapturingMultiUnitsIntervalContext);
    }
    public errorCapturingUnitToUnitInterval(): ErrorCapturingUnitToUnitIntervalContext | null {
        return this.getRuleContext(0, ErrorCapturingUnitToUnitIntervalContext);
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_timeIntervalExpression;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterTimeIntervalExpression) {
             listener.enterTimeIntervalExpression(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitTimeIntervalExpression) {
             listener.exitTimeIntervalExpression(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitTimeIntervalExpression) {
            return visitor.visitTimeIntervalExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ErrorCapturingMultiUnitsIntervalContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public multiUnitsInterval(): MultiUnitsIntervalContext {
        return this.getRuleContext(0, MultiUnitsIntervalContext)!;
    }
    public unitToUnitInterval(): UnitToUnitIntervalContext | null {
        return this.getRuleContext(0, UnitToUnitIntervalContext);
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_errorCapturingMultiUnitsInterval;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterErrorCapturingMultiUnitsInterval) {
             listener.enterErrorCapturingMultiUnitsInterval(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitErrorCapturingMultiUnitsInterval) {
             listener.exitErrorCapturingMultiUnitsInterval(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitErrorCapturingMultiUnitsInterval) {
            return visitor.visitErrorCapturingMultiUnitsInterval(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class MultiUnitsIntervalContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public intervalValue(): IntervalValueContext[];
    public intervalValue(i: number): IntervalValueContext | null;
    public intervalValue(i?: number): IntervalValueContext[] | IntervalValueContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IntervalValueContext);
        }

        return this.getRuleContext(i, IntervalValueContext);
    }
    public timeIntervalUnit(): TimeIntervalUnitContext[];
    public timeIntervalUnit(i: number): TimeIntervalUnitContext | null;
    public timeIntervalUnit(i?: number): TimeIntervalUnitContext[] | TimeIntervalUnitContext | null {
        if (i === undefined) {
            return this.getRuleContexts(TimeIntervalUnitContext);
        }

        return this.getRuleContext(i, TimeIntervalUnitContext);
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_multiUnitsInterval;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterMultiUnitsInterval) {
             listener.enterMultiUnitsInterval(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitMultiUnitsInterval) {
             listener.exitMultiUnitsInterval(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitMultiUnitsInterval) {
            return visitor.visitMultiUnitsInterval(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ErrorCapturingUnitToUnitIntervalContext extends antlr.ParserRuleContext {
    public _body?: UnitToUnitIntervalContext;
    public _error1?: MultiUnitsIntervalContext;
    public _error2?: UnitToUnitIntervalContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public unitToUnitInterval(): UnitToUnitIntervalContext[];
    public unitToUnitInterval(i: number): UnitToUnitIntervalContext | null;
    public unitToUnitInterval(i?: number): UnitToUnitIntervalContext[] | UnitToUnitIntervalContext | null {
        if (i === undefined) {
            return this.getRuleContexts(UnitToUnitIntervalContext);
        }

        return this.getRuleContext(i, UnitToUnitIntervalContext);
    }
    public multiUnitsInterval(): MultiUnitsIntervalContext | null {
        return this.getRuleContext(0, MultiUnitsIntervalContext);
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_errorCapturingUnitToUnitInterval;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterErrorCapturingUnitToUnitInterval) {
             listener.enterErrorCapturingUnitToUnitInterval(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitErrorCapturingUnitToUnitInterval) {
             listener.exitErrorCapturingUnitToUnitInterval(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitErrorCapturingUnitToUnitInterval) {
            return visitor.visitErrorCapturingUnitToUnitInterval(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class UnitToUnitIntervalContext extends antlr.ParserRuleContext {
    public _value?: IntervalValueContext;
    public _from_?: TimeIntervalUnitContext;
    public _to?: TimeIntervalUnitContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_TO(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_TO, 0)!;
    }
    public intervalValue(): IntervalValueContext {
        return this.getRuleContext(0, IntervalValueContext)!;
    }
    public timeIntervalUnit(): TimeIntervalUnitContext[];
    public timeIntervalUnit(i: number): TimeIntervalUnitContext | null;
    public timeIntervalUnit(i?: number): TimeIntervalUnitContext[] | TimeIntervalUnitContext | null {
        if (i === undefined) {
            return this.getRuleContexts(TimeIntervalUnitContext);
        }

        return this.getRuleContext(i, TimeIntervalUnitContext);
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_unitToUnitInterval;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterUnitToUnitInterval) {
             listener.enterUnitToUnitInterval(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitUnitToUnitInterval) {
             listener.exitUnitToUnitInterval(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitUnitToUnitInterval) {
            return visitor.visitUnitToUnitInterval(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class IntervalValueContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DIG_LITERAL(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.DIG_LITERAL, 0);
    }
    public REAL_LITERAL(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.REAL_LITERAL, 0);
    }
    public ADD_SIGN(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.ADD_SIGN, 0);
    }
    public HYPNEN_SIGN(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.HYPNEN_SIGN, 0);
    }
    public STRING_LITERAL(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.STRING_LITERAL, 0);
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_intervalValue;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterIntervalValue) {
             listener.enterIntervalValue(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitIntervalValue) {
             listener.exitIntervalValue(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitIntervalValue) {
            return visitor.visitIntervalValue(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ColumnAliasContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public anyAlias(): AnyAliasContext {
        return this.getRuleContext(0, AnyAliasContext)!;
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_columnAlias;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterColumnAlias) {
             listener.enterColumnAlias(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitColumnAlias) {
             listener.exitColumnAlias(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitColumnAlias) {
            return visitor.visitColumnAlias(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TableAliasContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public anyAlias(): AnyAliasContext {
        return this.getRuleContext(0, AnyAliasContext)!;
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_tableAlias;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterTableAlias) {
             listener.enterTableAlias(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitTableAlias) {
             listener.exitTableAlias(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitTableAlias) {
            return visitor.visitTableAlias(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AnyAliasContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public KW_AS(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_AS, 0);
    }
    public identifierList(): IdentifierListContext | null {
        return this.getRuleContext(0, IdentifierListContext);
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_anyAlias;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterAnyAlias) {
             listener.enterAnyAlias(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitAnyAlias) {
             listener.exitAnyAlias(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitAnyAlias) {
            return visitor.visitAnyAlias(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ErrorCapturingIdentifierContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public errorCapturingIdentifierExtra(): ErrorCapturingIdentifierExtraContext {
        return this.getRuleContext(0, ErrorCapturingIdentifierExtraContext)!;
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_errorCapturingIdentifier;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterErrorCapturingIdentifier) {
             listener.enterErrorCapturingIdentifier(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitErrorCapturingIdentifier) {
             listener.exitErrorCapturingIdentifier(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitErrorCapturingIdentifier) {
            return visitor.visitErrorCapturingIdentifier(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ErrorCapturingIdentifierExtraContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_errorCapturingIdentifierExtra;
    }
    public override copyFrom(ctx: ErrorCapturingIdentifierExtraContext): void {
        super.copyFrom(ctx);
    }
}
export class ErrorIdentContext extends ErrorCapturingIdentifierExtraContext {
    public constructor(ctx: ErrorCapturingIdentifierExtraContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_MINUS(): antlr.TerminalNode[];
    public KW_MINUS(i: number): antlr.TerminalNode | null;
    public KW_MINUS(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSQLParser.KW_MINUS);
    	} else {
    		return this.getToken(SparkSQLParser.KW_MINUS, i);
    	}
    }
    public identifier(): IdentifierContext[];
    public identifier(i: number): IdentifierContext | null;
    public identifier(i?: number): IdentifierContext[] | IdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IdentifierContext);
        }

        return this.getRuleContext(i, IdentifierContext);
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterErrorIdent) {
             listener.enterErrorIdent(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitErrorIdent) {
             listener.exitErrorIdent(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitErrorIdent) {
            return visitor.visitErrorIdent(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class IdentifierListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LR_BRACKET(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.LR_BRACKET, 0)!;
    }
    public identifierSeq(): IdentifierSeqContext {
        return this.getRuleContext(0, IdentifierSeqContext)!;
    }
    public RR_BRACKET(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.RR_BRACKET, 0)!;
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_identifierList;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterIdentifierList) {
             listener.enterIdentifierList(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitIdentifierList) {
             listener.exitIdentifierList(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitIdentifierList) {
            return visitor.visitIdentifierList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class IdentifierSeqContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext[];
    public identifier(i: number): IdentifierContext | null;
    public identifier(i?: number): IdentifierContext[] | IdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IdentifierContext);
        }

        return this.getRuleContext(i, IdentifierContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSQLParser.COMMA);
    	} else {
    		return this.getToken(SparkSQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_identifierSeq;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterIdentifierSeq) {
             listener.enterIdentifierSeq(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitIdentifierSeq) {
             listener.exitIdentifierSeq(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitIdentifierSeq) {
            return visitor.visitIdentifierSeq(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class IdentifierContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_identifier;
    }
    public override copyFrom(ctx: IdentifierContext): void {
        super.copyFrom(ctx);
    }
}
export class QuotedIdentifierAlternativeContext extends IdentifierContext {
    public constructor(ctx: IdentifierContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public STRING_LITERAL(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.STRING_LITERAL, 0)!;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterQuotedIdentifierAlternative) {
             listener.enterQuotedIdentifierAlternative(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitQuotedIdentifierAlternative) {
             listener.exitQuotedIdentifierAlternative(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitQuotedIdentifierAlternative) {
            return visitor.visitQuotedIdentifierAlternative(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class NonReservedKeywordsAlternativeContext extends IdentifierContext {
    public constructor(ctx: IdentifierContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public nonReservedKeywords(): NonReservedKeywordsContext {
        return this.getRuleContext(0, NonReservedKeywordsContext)!;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterNonReservedKeywordsAlternative) {
             listener.enterNonReservedKeywordsAlternative(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitNonReservedKeywordsAlternative) {
             listener.exitNonReservedKeywordsAlternative(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitNonReservedKeywordsAlternative) {
            return visitor.visitNonReservedKeywordsAlternative(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class UnquotedIdentifierAlternativeContext extends IdentifierContext {
    public constructor(ctx: IdentifierContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public unquotedIdentifier(): UnquotedIdentifierContext {
        return this.getRuleContext(0, UnquotedIdentifierContext)!;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterUnquotedIdentifierAlternative) {
             listener.enterUnquotedIdentifierAlternative(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitUnquotedIdentifierAlternative) {
             listener.exitUnquotedIdentifierAlternative(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitUnquotedIdentifierAlternative) {
            return visitor.visitUnquotedIdentifierAlternative(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class UrefVarAlternativeContext extends IdentifierContext {
    public constructor(ctx: IdentifierContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public refVar(): RefVarContext {
        return this.getRuleContext(0, RefVarContext)!;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterUrefVarAlternative) {
             listener.enterUrefVarAlternative(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitUrefVarAlternative) {
             listener.exitUrefVarAlternative(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitUrefVarAlternative) {
            return visitor.visitUrefVarAlternative(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class UnquotedAnyStringContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public unquotedIdentifier(): UnquotedIdentifierContext | null {
        return this.getRuleContext(0, UnquotedIdentifierContext);
    }
    public reservedKeywordsUsedAsFuncParam(): ReservedKeywordsUsedAsFuncParamContext | null {
        return this.getRuleContext(0, ReservedKeywordsUsedAsFuncParamContext);
    }
    public nonReservedKeywords(): NonReservedKeywordsContext | null {
        return this.getRuleContext(0, NonReservedKeywordsContext);
    }
    public reservedKeywordsUsedAsFuncName(): ReservedKeywordsUsedAsFuncNameContext | null {
        return this.getRuleContext(0, ReservedKeywordsUsedAsFuncNameContext);
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_unquotedAnyString;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterUnquotedAnyString) {
             listener.enterUnquotedAnyString(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitUnquotedAnyString) {
             listener.exitUnquotedAnyString(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitUnquotedAnyString) {
            return visitor.visitUnquotedAnyString(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RefVarContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DOLLAR(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.DOLLAR, 0)!;
    }
    public LB_BRACKET(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.LB_BRACKET, 0)!;
    }
    public unquotedIdentifier(): UnquotedIdentifierContext {
        return this.getRuleContext(0, UnquotedIdentifierContext)!;
    }
    public RB_BRACKET(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.RB_BRACKET, 0)!;
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_refVar;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterRefVar) {
             listener.enterRefVar(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitRefVar) {
             listener.exitRefVar(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitRefVar) {
            return visitor.visitRefVar(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class UnquotedIdentifierContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DIG_LITERAL(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.DIG_LITERAL, 0);
    }
    public ID_LITERAL(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.ID_LITERAL, 0);
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_unquotedIdentifier;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterUnquotedIdentifier) {
             listener.enterUnquotedIdentifier(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitUnquotedIdentifier) {
             listener.exitUnquotedIdentifier(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitUnquotedIdentifier) {
            return visitor.visitUnquotedIdentifier(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class WhenClauseContext extends antlr.ParserRuleContext {
    public _condition?: ExpressionContext;
    public _result?: ExpressionContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_WHEN(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_WHEN, 0)!;
    }
    public KW_THEN(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_THEN, 0)!;
    }
    public expression(): ExpressionContext[];
    public expression(i: number): ExpressionContext | null;
    public expression(i?: number): ExpressionContext[] | ExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }

        return this.getRuleContext(i, ExpressionContext);
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_whenClause;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterWhenClause) {
             listener.enterWhenClause(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitWhenClause) {
             listener.exitWhenClause(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitWhenClause) {
            return visitor.visitWhenClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CatalogPathContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public uid(): UidContext {
        return this.getRuleContext(0, UidContext)!;
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_catalogPath;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterCatalogPath) {
             listener.enterCatalogPath(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitCatalogPath) {
             listener.exitCatalogPath(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitCatalogPath) {
            return visitor.visitCatalogPath(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DatabasePathContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public uid(): UidContext {
        return this.getRuleContext(0, UidContext)!;
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_databasePath;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterDatabasePath) {
             listener.enterDatabasePath(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitDatabasePath) {
             listener.exitDatabasePath(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitDatabasePath) {
            return visitor.visitDatabasePath(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DatabasePathCreateContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public uid(): UidContext {
        return this.getRuleContext(0, UidContext)!;
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_databasePathCreate;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterDatabasePathCreate) {
             listener.enterDatabasePathCreate(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitDatabasePathCreate) {
             listener.exitDatabasePathCreate(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitDatabasePathCreate) {
            return visitor.visitDatabasePathCreate(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TablePathCreateContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public uid(): UidContext {
        return this.getRuleContext(0, UidContext)!;
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_tablePathCreate;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterTablePathCreate) {
             listener.enterTablePathCreate(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitTablePathCreate) {
             listener.exitTablePathCreate(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitTablePathCreate) {
            return visitor.visitTablePathCreate(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TablePathContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public uid(): UidContext {
        return this.getRuleContext(0, UidContext)!;
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_tablePath;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterTablePath) {
             listener.enterTablePath(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitTablePath) {
             listener.exitTablePath(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitTablePath) {
            return visitor.visitTablePath(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AnonymousWindowsNameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_anonymousWindowsName;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterAnonymousWindowsName) {
             listener.enterAnonymousWindowsName(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitAnonymousWindowsName) {
             listener.exitAnonymousWindowsName(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitAnonymousWindowsName) {
            return visitor.visitAnonymousWindowsName(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class UidContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext[];
    public identifier(i: number): IdentifierContext | null;
    public identifier(i?: number): IdentifierContext[] | IdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IdentifierContext);
        }

        return this.getRuleContext(i, IdentifierContext);
    }
    public DOT(): antlr.TerminalNode[];
    public DOT(i: number): antlr.TerminalNode | null;
    public DOT(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSQLParser.DOT);
    	} else {
    		return this.getToken(SparkSQLParser.DOT, i);
    	}
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_uid;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterUid) {
             listener.enterUid(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitUid) {
             listener.exitUid(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitUid) {
            return visitor.visitUid(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class WithOptionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_WITH(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_WITH, 0)!;
    }
    public tablePropertyList(): TablePropertyListContext {
        return this.getRuleContext(0, TablePropertyListContext)!;
    }
    public KW_DBPROPERTIES(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_DBPROPERTIES, 0);
    }
    public KW_TBLPROPERTIES(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_TBLPROPERTIES, 0);
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_withOption;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterWithOption) {
             listener.enterWithOption(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitWithOption) {
             listener.exitWithOption(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitWithOption) {
            return visitor.visitWithOption(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class IfNotExistsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_IF(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_IF, 0)!;
    }
    public KW_NOT(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_NOT, 0)!;
    }
    public KW_EXISTS(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_EXISTS, 0)!;
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_ifNotExists;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterIfNotExists) {
             listener.enterIfNotExists(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitIfNotExists) {
             listener.exitIfNotExists(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitIfNotExists) {
            return visitor.visitIfNotExists(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class IfExistsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_IF(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_IF, 0)!;
    }
    public KW_EXISTS(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_EXISTS, 0)!;
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_ifExists;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterIfExists) {
             listener.enterIfExists(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitIfExists) {
             listener.exitIfExists(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitIfExists) {
            return visitor.visitIfExists(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TablePropertyListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LR_BRACKET(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.LR_BRACKET, 0)!;
    }
    public tableProperty(): TablePropertyContext[];
    public tableProperty(i: number): TablePropertyContext | null;
    public tableProperty(i?: number): TablePropertyContext[] | TablePropertyContext | null {
        if (i === undefined) {
            return this.getRuleContexts(TablePropertyContext);
        }

        return this.getRuleContext(i, TablePropertyContext);
    }
    public RR_BRACKET(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.RR_BRACKET, 0)!;
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSQLParser.COMMA);
    	} else {
    		return this.getToken(SparkSQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_tablePropertyList;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterTablePropertyList) {
             listener.enterTablePropertyList(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitTablePropertyList) {
             listener.exitTablePropertyList(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitTablePropertyList) {
            return visitor.visitTablePropertyList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TablePropertyContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public tablePropertyKey(): TablePropertyKeyContext {
        return this.getRuleContext(0, TablePropertyKeyContext)!;
    }
    public EQUAL_SYMBOL(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.EQUAL_SYMBOL, 0)!;
    }
    public tablePropertyValue(): TablePropertyValueContext {
        return this.getRuleContext(0, TablePropertyValueContext)!;
    }
    public KW_DATE(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_DATE, 0);
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_tableProperty;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterTableProperty) {
             listener.enterTableProperty(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitTableProperty) {
             listener.exitTableProperty(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitTableProperty) {
            return visitor.visitTableProperty(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TablePropertyKeyContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public uid(): UidContext | null {
        return this.getRuleContext(0, UidContext);
    }
    public stringLiteral(): StringLiteralContext | null {
        return this.getRuleContext(0, StringLiteralContext);
    }
    public functionParam(): FunctionParamContext | null {
        return this.getRuleContext(0, FunctionParamContext);
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_tablePropertyKey;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterTablePropertyKey) {
             listener.enterTablePropertyKey(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitTablePropertyKey) {
             listener.exitTablePropertyKey(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitTablePropertyKey) {
            return visitor.visitTablePropertyKey(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PropertyNameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SINGLE_QUOTE_SYMB(): antlr.TerminalNode[];
    public SINGLE_QUOTE_SYMB(i: number): antlr.TerminalNode | null;
    public SINGLE_QUOTE_SYMB(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSQLParser.SINGLE_QUOTE_SYMB);
    	} else {
    		return this.getToken(SparkSQLParser.SINGLE_QUOTE_SYMB, i);
    	}
    }
    public constant(): ConstantContext {
        return this.getRuleContext(0, ConstantContext)!;
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_propertyName;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterPropertyName) {
             listener.enterPropertyName(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitPropertyName) {
             listener.exitPropertyName(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitPropertyName) {
            return visitor.visitPropertyName(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TablePropertyValueContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DIG_LITERAL(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.DIG_LITERAL, 0);
    }
    public REAL_LITERAL(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.REAL_LITERAL, 0);
    }
    public booleanLiteral(): BooleanLiteralContext | null {
        return this.getRuleContext(0, BooleanLiteralContext);
    }
    public uid(): UidContext | null {
        return this.getRuleContext(0, UidContext);
    }
    public constant(): ConstantContext | null {
        return this.getRuleContext(0, ConstantContext);
    }
    public refVar(): RefVarContext | null {
        return this.getRuleContext(0, RefVarContext);
    }
    public SINGLE_QUOTE_SYMB(): antlr.TerminalNode[];
    public SINGLE_QUOTE_SYMB(i: number): antlr.TerminalNode | null;
    public SINGLE_QUOTE_SYMB(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSQLParser.SINGLE_QUOTE_SYMB);
    	} else {
    		return this.getToken(SparkSQLParser.SINGLE_QUOTE_SYMB, i);
    	}
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_tablePropertyValue;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterTablePropertyValue) {
             listener.enterTablePropertyValue(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitTablePropertyValue) {
             listener.exitTablePropertyValue(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitTablePropertyValue) {
            return visitor.visitTablePropertyValue(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ComparisonOperatorContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public EQUAL_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.EQUAL_SYMBOL, 0);
    }
    public GREATER_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.GREATER_SYMBOL, 0);
    }
    public LESS_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.LESS_SYMBOL, 0);
    }
    public EXCLAMATION_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.EXCLAMATION_SYMBOL, 0);
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_comparisonOperator;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterComparisonOperator) {
             listener.enterComparisonOperator(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitComparisonOperator) {
             listener.exitComparisonOperator(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitComparisonOperator) {
            return visitor.visitComparisonOperator(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ConstantContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public timeIntervalExpression(): TimeIntervalExpressionContext | null {
        return this.getRuleContext(0, TimeIntervalExpressionContext);
    }
    public timePointLiteral(): TimePointLiteralContext | null {
        return this.getRuleContext(0, TimePointLiteralContext);
    }
    public stringLiteral(): StringLiteralContext | null {
        return this.getRuleContext(0, StringLiteralContext);
    }
    public decimalLiteral(): DecimalLiteralContext | null {
        return this.getRuleContext(0, DecimalLiteralContext);
    }
    public HYPNEN_SIGN(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.HYPNEN_SIGN, 0);
    }
    public booleanLiteral(): BooleanLiteralContext | null {
        return this.getRuleContext(0, BooleanLiteralContext);
    }
    public REAL_LITERAL(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.REAL_LITERAL, 0);
    }
    public KW_NULL(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_NULL, 0);
    }
    public KW_NOT(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_NOT, 0);
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_constant;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterConstant) {
             listener.enterConstant(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitConstant) {
             listener.exitConstant(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitConstant) {
            return visitor.visitConstant(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TimePointLiteralContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public timePointUnit(): TimePointUnitContext {
        return this.getRuleContext(0, TimePointUnitContext)!;
    }
    public stringLiteral(): StringLiteralContext {
        return this.getRuleContext(0, StringLiteralContext)!;
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_timePointLiteral;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterTimePointLiteral) {
             listener.enterTimePointLiteral(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitTimePointLiteral) {
             listener.exitTimePointLiteral(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitTimePointLiteral) {
            return visitor.visitTimePointLiteral(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class StringLiteralContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public STRING_LITERAL(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.STRING_LITERAL, 0)!;
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_stringLiteral;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterStringLiteral) {
             listener.enterStringLiteral(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitStringLiteral) {
             listener.exitStringLiteral(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitStringLiteral) {
            return visitor.visitStringLiteral(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DecimalLiteralContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DIG_LITERAL(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.DIG_LITERAL, 0)!;
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_decimalLiteral;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterDecimalLiteral) {
             listener.enterDecimalLiteral(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitDecimalLiteral) {
             listener.exitDecimalLiteral(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitDecimalLiteral) {
            return visitor.visitDecimalLiteral(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class BooleanLiteralContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_TRUE(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_TRUE, 0);
    }
    public KW_FALSE(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_FALSE, 0);
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_booleanLiteral;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterBooleanLiteral) {
             listener.enterBooleanLiteral(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitBooleanLiteral) {
             listener.exitBooleanLiteral(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitBooleanLiteral) {
            return visitor.visitBooleanLiteral(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SetQuantifierContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_DISTINCT(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_DISTINCT, 0);
    }
    public KW_ALL(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_ALL, 0);
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_setQuantifier;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterSetQuantifier) {
             listener.enterSetQuantifier(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitSetQuantifier) {
             listener.exitSetQuantifier(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitSetQuantifier) {
            return visitor.visitSetQuantifier(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TimePointUnitContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_YEAR(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_YEAR, 0);
    }
    public KW_QUARTER(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_QUARTER, 0);
    }
    public KW_MONTH(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_MONTH, 0);
    }
    public KW_WEEK(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_WEEK, 0);
    }
    public KW_DAY(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_DAY, 0);
    }
    public KW_HOUR(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_HOUR, 0);
    }
    public KW_MINUTE(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_MINUTE, 0);
    }
    public KW_SECOND(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_SECOND, 0);
    }
    public KW_MILLISECOND(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_MILLISECOND, 0);
    }
    public KW_MICROSECOND(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_MICROSECOND, 0);
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_timePointUnit;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterTimePointUnit) {
             listener.enterTimePointUnit(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitTimePointUnit) {
             listener.exitTimePointUnit(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitTimePointUnit) {
            return visitor.visitTimePointUnit(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TimeIntervalUnitContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_MILLENNIUM(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_MILLENNIUM, 0);
    }
    public KW_CENTURY(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_CENTURY, 0);
    }
    public KW_DECADE(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_DECADE, 0);
    }
    public KW_YEAR(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_YEAR, 0);
    }
    public KW_YEARS(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_YEARS, 0);
    }
    public KW_QUARTER(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_QUARTER, 0);
    }
    public KW_MONTH(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_MONTH, 0);
    }
    public KW_MONTHS(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_MONTHS, 0);
    }
    public KW_WEEK(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_WEEK, 0);
    }
    public KW_WEEKS(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_WEEKS, 0);
    }
    public KW_DAY(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_DAY, 0);
    }
    public KW_DAYS(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_DAYS, 0);
    }
    public KW_HOUR(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_HOUR, 0);
    }
    public KW_HOURS(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_HOURS, 0);
    }
    public KW_MINUTE(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_MINUTE, 0);
    }
    public KW_MINUTES(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_MINUTES, 0);
    }
    public KW_SECOND(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_SECOND, 0);
    }
    public KW_SECONDS(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_SECONDS, 0);
    }
    public KW_MILLISECOND(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_MILLISECOND, 0);
    }
    public KW_MICROSECOND(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_MICROSECOND, 0);
    }
    public KW_NANOSECOND(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_NANOSECOND, 0);
    }
    public KW_EPOCH(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_EPOCH, 0);
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_timeIntervalUnit;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterTimeIntervalUnit) {
             listener.enterTimeIntervalUnit(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitTimeIntervalUnit) {
             listener.exitTimeIntervalUnit(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitTimeIntervalUnit) {
            return visitor.visitTimeIntervalUnit(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ReservedKeywordsUsedAsFuncParamContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_LEADING(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_LEADING, 0);
    }
    public KW_TRAILING(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_TRAILING, 0);
    }
    public KW_BOTH(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_BOTH, 0);
    }
    public KW_ALL(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_ALL, 0);
    }
    public KW_DISTINCT(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_DISTINCT, 0);
    }
    public ASTERISK_SIGN(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.ASTERISK_SIGN, 0);
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_reservedKeywordsUsedAsFuncParam;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterReservedKeywordsUsedAsFuncParam) {
             listener.enterReservedKeywordsUsedAsFuncParam(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitReservedKeywordsUsedAsFuncParam) {
             listener.exitReservedKeywordsUsedAsFuncParam(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitReservedKeywordsUsedAsFuncParam) {
            return visitor.visitReservedKeywordsUsedAsFuncParam(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ReservedKeywordsUsedAsFuncNameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ABS(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_ABS, 0);
    }
    public KW_ARRAY(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_ARRAY, 0);
    }
    public KW_AVG(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_AVG, 0);
    }
    public KW_CAST(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_CAST, 0);
    }
    public KW_CEIL(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_CEIL, 0);
    }
    public KW_COALESCE(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_COALESCE, 0);
    }
    public KW_COLLECT(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_COLLECT, 0);
    }
    public KW_COUNT(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_COUNT, 0);
    }
    public KW_CURRENT_TIMESTAMP(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_CURRENT_TIMESTAMP, 0);
    }
    public KW_DATE(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_DATE, 0);
    }
    public KW_EXPLODE(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_EXPLODE, 0);
    }
    public KW_FIRST_VALUE(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_FIRST_VALUE, 0);
    }
    public KW_FROM_UNIXTIME(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_FROM_UNIXTIME, 0);
    }
    public KW_GROUPING(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_GROUPING, 0);
    }
    public KW_HOUR(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_HOUR, 0);
    }
    public KW_IF(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_IF, 0);
    }
    public KW_LEAD(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_LEAD, 0);
    }
    public KW_LAG(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_LAG, 0);
    }
    public KW_LAST_VALUE(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_LAST_VALUE, 0);
    }
    public KW_LEFT(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_LEFT, 0);
    }
    public KW_NTILE(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_NTILE, 0);
    }
    public KW_MAP(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_MAP, 0);
    }
    public KW_MINUTE(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_MINUTE, 0);
    }
    public KW_MONTH(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_MONTH, 0);
    }
    public KW_OVERLAY(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_OVERLAY, 0);
    }
    public KW_POSITION(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_POSITION, 0);
    }
    public KW_PERCENT_RANK(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_PERCENT_RANK, 0);
    }
    public KW_PERCENTILE_CONT(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_PERCENTILE_CONT, 0);
    }
    public KW_PERCENTILE_DISC(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_PERCENTILE_DISC, 0);
    }
    public KW_POWER(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_POWER, 0);
    }
    public KW_QUARTER(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_QUARTER, 0);
    }
    public KW_RANK(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_RANK, 0);
    }
    public KW_ROW_NUMBER(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_ROW_NUMBER, 0);
    }
    public KW_RANGE(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_RANGE, 0);
    }
    public KW_RIGHT(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_RIGHT, 0);
    }
    public KW_SECOND(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_SECOND, 0);
    }
    public KW_SUBSTRING(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_SUBSTRING, 0);
    }
    public KW_SUM(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_SUM, 0);
    }
    public KW_TIME(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_TIME, 0);
    }
    public KW_TIMESTAMP(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_TIMESTAMP, 0);
    }
    public KW_TIMESTAMP_3(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_TIMESTAMP_3, 0);
    }
    public KW_TIMESTAMP_6(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_TIMESTAMP_6, 0);
    }
    public KW_TIMESTAMP_9(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_TIMESTAMP_9, 0);
    }
    public KW_TRUNCATE(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_TRUNCATE, 0);
    }
    public KW_UPPER(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_UPPER, 0);
    }
    public KW_WEEK(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_WEEK, 0);
    }
    public KW_YEAR(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_YEAR, 0);
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_reservedKeywordsUsedAsFuncName;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterReservedKeywordsUsedAsFuncName) {
             listener.enterReservedKeywordsUsedAsFuncName(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitReservedKeywordsUsedAsFuncName) {
             listener.exitReservedKeywordsUsedAsFuncName(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitReservedKeywordsUsedAsFuncName) {
            return visitor.visitReservedKeywordsUsedAsFuncName(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class NonReservedKeywordsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ADD(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_ADD, 0);
    }
    public KW_ADMIN(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_ADMIN, 0);
    }
    public KW_AFTER(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_AFTER, 0);
    }
    public KW_ANALYZE(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_ANALYZE, 0);
    }
    public KW_ASC(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_ASC, 0);
    }
    public KW_BEFORE(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_BEFORE, 0);
    }
    public KW_BYTES(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_BYTES, 0);
    }
    public KW_CASCADE(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_CASCADE, 0);
    }
    public KW_CATALOG(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_CATALOG, 0);
    }
    public KW_CATALOGS(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_CATALOGS, 0);
    }
    public KW_CENTURY(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_CENTURY, 0);
    }
    public KW_CHAIN(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_CHAIN, 0);
    }
    public KW_CHANGELOG_MODE(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_CHANGELOG_MODE, 0);
    }
    public KW_CHARACTERS(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_CHARACTERS, 0);
    }
    public KW_COMMENT(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_COMMENT, 0);
    }
    public KW_COMPACT(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_COMPACT, 0);
    }
    public KW_COMPUTE(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_COMPUTE, 0);
    }
    public KW_COLUMNS(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_COLUMNS, 0);
    }
    public KW_CONSTRAINTS(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_CONSTRAINTS, 0);
    }
    public KW_CONSTRUCTOR(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_CONSTRUCTOR, 0);
    }
    public KW_CUMULATE(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_CUMULATE, 0);
    }
    public KW_DATA(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_DATA, 0);
    }
    public KW_DATABASE(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_DATABASE, 0);
    }
    public KW_DATABASES(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_DATABASES, 0);
    }
    public KW_DAYS(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_DAYS, 0);
    }
    public KW_DECADE(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_DECADE, 0);
    }
    public KW_DEFINED(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_DEFINED, 0);
    }
    public KW_DESC(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_DESC, 0);
    }
    public KW_DESCRIPTOR(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_DESCRIPTOR, 0);
    }
    public KW_DIV(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_DIV, 0);
    }
    public KW_ENCODING(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_ENCODING, 0);
    }
    public KW_ENFORCED(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_ENFORCED, 0);
    }
    public KW_ENGINE(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_ENGINE, 0);
    }
    public KW_ERROR(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_ERROR, 0);
    }
    public KW_ESTIMATED_COST(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_ESTIMATED_COST, 0);
    }
    public KW_EXCEPTION(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_EXCEPTION, 0);
    }
    public KW_EXCLUDE(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_EXCLUDE, 0);
    }
    public KW_EXCLUDING(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_EXCLUDING, 0);
    }
    public KW_EXTENDED(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_EXTENDED, 0);
    }
    public KW_FILE(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_FILE, 0);
    }
    public KW_FINAL(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_FINAL, 0);
    }
    public KW_FIRST(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_FIRST, 0);
    }
    public KW_FOLLOWING(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_FOLLOWING, 0);
    }
    public KW_FORMAT(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_FORMAT, 0);
    }
    public KW_FORTRAN(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_FORTRAN, 0);
    }
    public KW_FOUND(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_FOUND, 0);
    }
    public KW_FRAC_SECOND(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_FRAC_SECOND, 0);
    }
    public KW_FUNCTIONS(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_FUNCTIONS, 0);
    }
    public KW_GENERAL(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_GENERAL, 0);
    }
    public KW_GENERATED(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_GENERATED, 0);
    }
    public KW_GO(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_GO, 0);
    }
    public KW_GOTO(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_GOTO, 0);
    }
    public KW_GRANTED(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_GRANTED, 0);
    }
    public KW_HOP(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_HOP, 0);
    }
    public KW_HOURS(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_HOURS, 0);
    }
    public KW_IF(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_IF, 0);
    }
    public KW_IGNORE(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_IGNORE, 0);
    }
    public KW_INCREMENT(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_INCREMENT, 0);
    }
    public KW_INPUT(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_INPUT, 0);
    }
    public KW_INVOKER(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_INVOKER, 0);
    }
    public KW_JAR(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_JAR, 0);
    }
    public KW_JARS(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_JARS, 0);
    }
    public KW_JAVA(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_JAVA, 0);
    }
    public KW_JSON(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_JSON, 0);
    }
    public KW_JSON_EXECUTION_PLAN(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_JSON_EXECUTION_PLAN, 0);
    }
    public KW_KEY(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_KEY, 0);
    }
    public KW_KEY_MEMBER(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_KEY_MEMBER, 0);
    }
    public KW_KEY_TYPE(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_KEY_TYPE, 0);
    }
    public KW_LABEL(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_LABEL, 0);
    }
    public KW_LAST(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_LAST, 0);
    }
    public KW_LENGTH(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_LENGTH, 0);
    }
    public KW_LEVEL(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_LEVEL, 0);
    }
    public KW_LOAD(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_LOAD, 0);
    }
    public KW_LOCALTIMESTAMP(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_LOCALTIMESTAMP, 0);
    }
    public KW_MAP(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_MAP, 0);
    }
    public KW_MICROSECOND(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_MICROSECOND, 0);
    }
    public KW_MILLENNIUM(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_MILLENNIUM, 0);
    }
    public KW_MILLISECOND(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_MILLISECOND, 0);
    }
    public KW_MINUTES(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_MINUTES, 0);
    }
    public KW_MINVALUE(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_MINVALUE, 0);
    }
    public KW_MODIFY(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_MODIFY, 0);
    }
    public KW_MODULES(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_MODULES, 0);
    }
    public KW_MONTHS(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_MONTHS, 0);
    }
    public KW_NANOSECOND(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_NANOSECOND, 0);
    }
    public KW_NULLS(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_NULLS, 0);
    }
    public KW_NUMBER(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_NUMBER, 0);
    }
    public KW_OPTION(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_OPTION, 0);
    }
    public KW_OPTIONS(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_OPTIONS, 0);
    }
    public KW_ORDERING(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_ORDERING, 0);
    }
    public KW_OUTPUT(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_OUTPUT, 0);
    }
    public KW_OVERWRITE(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_OVERWRITE, 0);
    }
    public KW_OVERWRITING(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_OVERWRITING, 0);
    }
    public KW_PARTITIONED(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_PARTITIONED, 0);
    }
    public KW_PARTITIONS(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_PARTITIONS, 0);
    }
    public KW_PASSING(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_PASSING, 0);
    }
    public KW_PAST(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_PAST, 0);
    }
    public KW_PATH(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_PATH, 0);
    }
    public KW_PLACING(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_PLACING, 0);
    }
    public KW_PLAN(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_PLAN, 0);
    }
    public KW_PRECEDING(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_PRECEDING, 0);
    }
    public KW_PRESERVE(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_PRESERVE, 0);
    }
    public KW_PRIOR(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_PRIOR, 0);
    }
    public KW_PRIVILEGES(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_PRIVILEGES, 0);
    }
    public KW_PUBLIC(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_PUBLIC, 0);
    }
    public KW_PYTHON(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_PYTHON, 0);
    }
    public KW_PYTHON_FILES(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_PYTHON_FILES, 0);
    }
    public KW_PYTHON_REQUIREMENTS(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_PYTHON_REQUIREMENTS, 0);
    }
    public KW_PYTHON_DEPENDENCIES(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_PYTHON_DEPENDENCIES, 0);
    }
    public KW_PYTHON_JAR(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_PYTHON_JAR, 0);
    }
    public KW_PYTHON_ARCHIVES(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_PYTHON_ARCHIVES, 0);
    }
    public KW_PYTHON_PARAMETER(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_PYTHON_PARAMETER, 0);
    }
    public KW_QUARTER(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_QUARTER, 0);
    }
    public KW_RAW(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_RAW, 0);
    }
    public KW_READ(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_READ, 0);
    }
    public KW_RELATIVE(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_RELATIVE, 0);
    }
    public KW_REMOVE(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_REMOVE, 0);
    }
    public KW_RENAME(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_RENAME, 0);
    }
    public KW_REPLACE(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_REPLACE, 0);
    }
    public KW_RESPECT(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_RESPECT, 0);
    }
    public KW_RESTART(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_RESTART, 0);
    }
    public KW_RESTRICT(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_RESTRICT, 0);
    }
    public KW_ROLE(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_ROLE, 0);
    }
    public KW_ROW_COUNT(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_ROW_COUNT, 0);
    }
    public KW_SCALA(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_SCALA, 0);
    }
    public KW_SCALAR(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_SCALAR, 0);
    }
    public KW_SCALE(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_SCALE, 0);
    }
    public KW_SCHEMA(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_SCHEMA, 0);
    }
    public KW_SECONDS(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_SECONDS, 0);
    }
    public KW_SECTION(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_SECTION, 0);
    }
    public KW_SECURITY(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_SECURITY, 0);
    }
    public KW_SELF(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_SELF, 0);
    }
    public KW_SERVER(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_SERVER, 0);
    }
    public KW_SERVER_NAME(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_SERVER_NAME, 0);
    }
    public KW_SESSION(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_SESSION, 0);
    }
    public KW_SETS(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_SETS, 0);
    }
    public KW_SIMPLE(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_SIMPLE, 0);
    }
    public KW_SIZE(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_SIZE, 0);
    }
    public KW_SLIDE(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_SLIDE, 0);
    }
    public KW_SOURCE(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_SOURCE, 0);
    }
    public KW_SPACE(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_SPACE, 0);
    }
    public KW_STATE(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_STATE, 0);
    }
    public KW_STATEMENT(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_STATEMENT, 0);
    }
    public KW_STEP(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_STEP, 0);
    }
    public KW_STRING(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_STRING, 0);
    }
    public KW_STRUCTURE(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_STRUCTURE, 0);
    }
    public KW_STYLE(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_STYLE, 0);
    }
    public KW_TABLES(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_TABLES, 0);
    }
    public KW_TEMPORARY(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_TEMPORARY, 0);
    }
    public KW_TIMECOL(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_TIMECOL, 0);
    }
    public KW_FLOOR(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_FLOOR, 0);
    }
    public KW_TIMESTAMP_LTZ(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_TIMESTAMP_LTZ, 0);
    }
    public KW_TIMESTAMPADD(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_TIMESTAMPADD, 0);
    }
    public KW_TIMESTAMPDIFF(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_TIMESTAMPDIFF, 0);
    }
    public KW_TOTIMESTAMP(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_TOTIMESTAMP, 0);
    }
    public KW_TRANSFORM(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_TRANSFORM, 0);
    }
    public KW_TUMBLE(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_TUMBLE, 0);
    }
    public KW_TYPE(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_TYPE, 0);
    }
    public KW_UNDER(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_UNDER, 0);
    }
    public KW_UNLOAD(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_UNLOAD, 0);
    }
    public KW_USAGE(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_USAGE, 0);
    }
    public KW_USE(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_USE, 0);
    }
    public KW_UTF16(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_UTF16, 0);
    }
    public KW_UTF32(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_UTF32, 0);
    }
    public KW_UTF8(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_UTF8, 0);
    }
    public KW_VERSION(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_VERSION, 0);
    }
    public KW_VIEW(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_VIEW, 0);
    }
    public KW_VIEWS(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_VIEWS, 0);
    }
    public KW_VIRTUAL(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_VIRTUAL, 0);
    }
    public KW_WATERMARK(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_WATERMARK, 0);
    }
    public KW_WATERMARKS(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_WATERMARKS, 0);
    }
    public KW_WEEK(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_WEEK, 0);
    }
    public KW_WORK(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_WORK, 0);
    }
    public KW_WRAPPER(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_WRAPPER, 0);
    }
    public KW_YEARS(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_YEARS, 0);
    }
    public KW_ZONE(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_ZONE, 0);
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_nonReservedKeywords;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterNonReservedKeywords) {
             listener.enterNonReservedKeywords(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitNonReservedKeywords) {
             listener.exitNonReservedKeywords(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitNonReservedKeywords) {
            return visitor.visitNonReservedKeywords(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SqlStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SEMICOLON(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.SEMICOLON, 0)!;
    }
    public queryStatement(): QueryStatementContext | null {
        return this.getRuleContext(0, QueryStatementContext);
    }
    public insertStatement(): InsertStatementContext | null {
        return this.getRuleContext(0, InsertStatementContext);
    }
    public createStatement(): CreateStatementContext | null {
        return this.getRuleContext(0, CreateStatementContext);
    }
    public plusStatement(): PlusStatementContext | null {
        return this.getRuleContext(0, PlusStatementContext);
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_sqlStatement;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterSqlStatement) {
             listener.enterSqlStatement(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitSqlStatement) {
             listener.exitSqlStatement(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitSqlStatement) {
            return visitor.visitSqlStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SelectStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_selectStatement;
    }
    public override copyFrom(ctx: SelectStatementContext): void {
        super.copyFrom(ctx);
    }
}
export class TableSampleContext extends SelectStatementContext {
    public constructor(ctx: SelectStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public selectClause(): SelectClauseContext {
        return this.getRuleContext(0, SelectClauseContext)!;
    }
    public fromClause(): FromClauseContext {
        return this.getRuleContext(0, FromClauseContext)!;
    }
    public samplingQueries(): SamplingQueriesContext {
        return this.getRuleContext(0, SamplingQueriesContext)!;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterTableSample) {
             listener.enterTableSample(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitTableSample) {
             listener.exitTableSample(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitTableSample) {
            return visitor.visitTableSample(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SparkStyleSelectContext extends SelectStatementContext {
    public constructor(ctx: SelectStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public fromClause(): FromClauseContext {
        return this.getRuleContext(0, FromClauseContext)!;
    }
    public selectClause(): SelectClauseContext {
        return this.getRuleContext(0, SelectClauseContext)!;
    }
    public whereClause(): WhereClauseContext | null {
        return this.getRuleContext(0, WhereClauseContext);
    }
    public someByClause(): SomeByClauseContext | null {
        return this.getRuleContext(0, SomeByClauseContext);
    }
    public havingClause(): HavingClauseContext | null {
        return this.getRuleContext(0, HavingClauseContext);
    }
    public windowClause(): WindowClauseContext | null {
        return this.getRuleContext(0, WindowClauseContext);
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterSparkStyleSelect) {
             listener.enterSparkStyleSelect(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitSparkStyleSelect) {
             listener.exitSparkStyleSelect(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitSparkStyleSelect) {
            return visitor.visitSparkStyleSelect(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class MatchRecognizeSelectContext extends SelectStatementContext {
    public constructor(ctx: SelectStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public selectClause(): SelectClauseContext {
        return this.getRuleContext(0, SelectClauseContext)!;
    }
    public fromClause(): FromClauseContext {
        return this.getRuleContext(0, FromClauseContext)!;
    }
    public matchRecognizeClause(): MatchRecognizeClauseContext {
        return this.getRuleContext(0, MatchRecognizeClauseContext)!;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterMatchRecognizeSelect) {
             listener.enterMatchRecognizeSelect(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitMatchRecognizeSelect) {
             listener.exitMatchRecognizeSelect(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitMatchRecognizeSelect) {
            return visitor.visitMatchRecognizeSelect(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SelectPlusContext extends SelectStatementContext {
    public constructor(ctx: SelectStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public selectStatementPlus(): SelectStatementPlusContext {
        return this.getRuleContext(0, SelectStatementPlusContext)!;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterSelectPlus) {
             listener.enterSelectPlus(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitSelectPlus) {
             listener.exitSelectPlus(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitSelectPlus) {
            return visitor.visitSelectPlus(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class CommonSelectContext extends SelectStatementContext {
    public constructor(ctx: SelectStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public selectClause(): SelectClauseContext {
        return this.getRuleContext(0, SelectClauseContext)!;
    }
    public fromClause(): FromClauseContext {
        return this.getRuleContext(0, FromClauseContext)!;
    }
    public whereClause(): WhereClauseContext | null {
        return this.getRuleContext(0, WhereClauseContext);
    }
    public someByClause(): SomeByClauseContext | null {
        return this.getRuleContext(0, SomeByClauseContext);
    }
    public havingClause(): HavingClauseContext | null {
        return this.getRuleContext(0, HavingClauseContext);
    }
    public windowClause(): WindowClauseContext | null {
        return this.getRuleContext(0, WindowClauseContext);
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterCommonSelect) {
             listener.enterCommonSelect(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitCommonSelect) {
             listener.exitCommonSelect(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitCommonSelect) {
            return visitor.visitCommonSelect(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ProjectItemDefinitionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_projectItemDefinition;
    }
    public override copyFrom(ctx: ProjectItemDefinitionContext): void {
        super.copyFrom(ctx);
    }
}
export class HiveStyleProjectItemContext extends ProjectItemDefinitionContext {
    public constructor(ctx: ProjectItemDefinitionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public hiveOverWindowItem(): HiveOverWindowItemContext | null {
        return this.getRuleContext(0, HiveOverWindowItemContext);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public KW_AS(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_AS, 0);
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterHiveStyleProjectItem) {
             listener.enterHiveStyleProjectItem(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitHiveStyleProjectItem) {
             listener.exitHiveStyleProjectItem(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitHiveStyleProjectItem) {
            return visitor.visitHiveStyleProjectItem(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class WindowsProrjectItemContext extends ProjectItemDefinitionContext {
    public constructor(ctx: ProjectItemDefinitionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public overWindowItem(): OverWindowItemContext {
        return this.getRuleContext(0, OverWindowItemContext)!;
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public KW_AS(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_AS, 0);
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterWindowsProrjectItem) {
             listener.enterWindowsProrjectItem(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitWindowsProrjectItem) {
             listener.exitWindowsProrjectItem(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitWindowsProrjectItem) {
            return visitor.visitWindowsProrjectItem(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ExpressionProjectItemContext extends ProjectItemDefinitionContext {
    public constructor(ctx: ProjectItemDefinitionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public expression(): ExpressionContext[];
    public expression(i: number): ExpressionContext | null;
    public expression(i?: number): ExpressionContext[] | ExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }

        return this.getRuleContext(i, ExpressionContext);
    }
    public KW_AS(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_AS, 0);
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterExpressionProjectItem) {
             listener.enterExpressionProjectItem(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitExpressionProjectItem) {
             listener.exitExpressionProjectItem(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitExpressionProjectItem) {
            return visitor.visitExpressionProjectItem(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class HiveOverWindowItemContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public windowFunctioPart(): WindowFunctioPartContext {
        return this.getRuleContext(0, WindowFunctioPartContext)!;
    }
    public KW_OVER(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_OVER, 0)!;
    }
    public KW_NULLS(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_NULLS, 0);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public LR_BRACKET(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.LR_BRACKET, 0);
    }
    public orderByCaluse(): OrderByCaluseContext | null {
        return this.getRuleContext(0, OrderByCaluseContext);
    }
    public RR_BRACKET(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.RR_BRACKET, 0);
    }
    public KW_IGNORE(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_IGNORE, 0);
    }
    public KW_RESPECT(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_RESPECT, 0);
    }
    public overClause(): OverClauseContext | null {
        return this.getRuleContext(0, OverClauseContext);
    }
    public windowFrameForWindowsQuery(): WindowFrameForWindowsQueryContext | null {
        return this.getRuleContext(0, WindowFrameForWindowsQueryContext);
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_hiveOverWindowItem;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterHiveOverWindowItem) {
             listener.enterHiveOverWindowItem(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitHiveOverWindowItem) {
             listener.exitHiveOverWindowItem(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitHiveOverWindowItem) {
            return visitor.visitHiveOverWindowItem(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SelectStatementPlusContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_selectStatementPlus;
    }
    public override copyFrom(ctx: SelectStatementPlusContext): void {
        super.copyFrom(ctx);
    }
}
export class SelectTvfContext extends SelectStatementPlusContext {
    public constructor(ctx: SelectStatementPlusContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public selectClause(): SelectClauseContext | null {
        return this.getRuleContext(0, SelectClauseContext);
    }
    public tvfClause(): TvfClauseContext | null {
        return this.getRuleContext(0, TvfClauseContext);
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterSelectTvf) {
             listener.enterSelectTvf(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitSelectTvf) {
             listener.exitSelectTvf(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitSelectTvf) {
            return visitor.visitSelectTvf(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SelectInlineTableContext extends SelectStatementPlusContext {
    public constructor(ctx: SelectStatementPlusContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_SELECT(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_SELECT, 0);
    }
    public inlineTableClause(): InlineTableClauseContext | null {
        return this.getRuleContext(0, InlineTableClauseContext);
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterSelectInlineTable) {
             listener.enterSelectInlineTable(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitSelectInlineTable) {
             listener.exitSelectInlineTable(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitSelectInlineTable) {
            return visitor.visitSelectInlineTable(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SelectTransformContext extends SelectStatementPlusContext {
    public constructor(ctx: SelectStatementPlusContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_SELECT(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_SELECT, 0);
    }
    public transformClause(): TransformClauseContext | null {
        return this.getRuleContext(0, TransformClauseContext);
    }
    public fromClause(): FromClauseContext | null {
        return this.getRuleContext(0, FromClauseContext);
    }
    public whereClause(): WhereClauseContext | null {
        return this.getRuleContext(0, WhereClauseContext);
    }
    public someByClause(): SomeByClauseContext | null {
        return this.getRuleContext(0, SomeByClauseContext);
    }
    public havingClause(): HavingClauseContext | null {
        return this.getRuleContext(0, HavingClauseContext);
    }
    public windowClause(): WindowClauseContext | null {
        return this.getRuleContext(0, WindowClauseContext);
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterSelectTransform) {
             listener.enterSelectTransform(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitSelectTransform) {
             listener.exitSelectTransform(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitSelectTransform) {
            return visitor.visitSelectTransform(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SelectSemicolonContext extends SelectStatementPlusContext {
    public constructor(ctx: SelectStatementPlusContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SEMICOLON(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.SEMICOLON, 0)!;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterSelectSemicolon) {
             listener.enterSelectSemicolon(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitSelectSemicolon) {
             listener.exitSelectSemicolon(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitSelectSemicolon) {
            return visitor.visitSelectSemicolon(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PlusStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public describeStatement(): DescribeStatementContext | null {
        return this.getRuleContext(0, DescribeStatementContext);
    }
    public explainStatement(): ExplainStatementContext | null {
        return this.getRuleContext(0, ExplainStatementContext);
    }
    public useStatement(): UseStatementContext | null {
        return this.getRuleContext(0, UseStatementContext);
    }
    public showStatement(): ShowStatementContext | null {
        return this.getRuleContext(0, ShowStatementContext);
    }
    public loadStatement(): LoadStatementContext | null {
        return this.getRuleContext(0, LoadStatementContext);
    }
    public unloadStatement(): UnloadStatementContext | null {
        return this.getRuleContext(0, UnloadStatementContext);
    }
    public setStatement(): SetStatementContext | null {
        return this.getRuleContext(0, SetStatementContext);
    }
    public resetStatement(): ResetStatementContext | null {
        return this.getRuleContext(0, ResetStatementContext);
    }
    public fileStatement(): FileStatementContext | null {
        return this.getRuleContext(0, FileStatementContext);
    }
    public refreshStatement(): RefreshStatementContext | null {
        return this.getRuleContext(0, RefreshStatementContext);
    }
    public analyzeStatement(): AnalyzeStatementContext | null {
        return this.getRuleContext(0, AnalyzeStatementContext);
    }
    public cacheStatement(): CacheStatementContext | null {
        return this.getRuleContext(0, CacheStatementContext);
    }
    public replaceTable(): ReplaceTableContext | null {
        return this.getRuleContext(0, ReplaceTableContext);
    }
    public truncateTable(): TruncateTableContext | null {
        return this.getRuleContext(0, TruncateTableContext);
    }
    public repairTable(): RepairTableContext | null {
        return this.getRuleContext(0, RepairTableContext);
    }
    public alterTable(): AlterTableContext | null {
        return this.getRuleContext(0, AlterTableContext);
    }
    public alterMaterializedTable(): AlterMaterializedTableContext | null {
        return this.getRuleContext(0, AlterMaterializedTableContext);
    }
    public dropTable(): DropTableContext | null {
        return this.getRuleContext(0, DropTableContext);
    }
    public alterDatabase(): AlterDatabaseContext | null {
        return this.getRuleContext(0, AlterDatabaseContext);
    }
    public dropDatabase(): DropDatabaseContext | null {
        return this.getRuleContext(0, DropDatabaseContext);
    }
    public alertView(): AlertViewContext | null {
        return this.getRuleContext(0, AlertViewContext);
    }
    public dropView(): DropViewContext | null {
        return this.getRuleContext(0, DropViewContext);
    }
    public alterFunction(): AlterFunctionContext | null {
        return this.getRuleContext(0, AlterFunctionContext);
    }
    public dropFunction(): DropFunctionContext | null {
        return this.getRuleContext(0, DropFunctionContext);
    }
    public dropCatalog(): DropCatalogContext | null {
        return this.getRuleContext(0, DropCatalogContext);
    }
    public createDatabase(): CreateDatabaseContext | null {
        return this.getRuleContext(0, CreateDatabaseContext);
    }
    public createView(): CreateViewContext | null {
        return this.getRuleContext(0, CreateViewContext);
    }
    public createFunction(): CreateFunctionContext | null {
        return this.getRuleContext(0, CreateFunctionContext);
    }
    public createCatalog(): CreateCatalogContext | null {
        return this.getRuleContext(0, CreateCatalogContext);
    }
    public hiveFormatCreate(): HiveFormatCreateContext | null {
        return this.getRuleContext(0, HiveFormatCreateContext);
    }
    public createExternalTable(): CreateExternalTableContext | null {
        return this.getRuleContext(0, CreateExternalTableContext);
    }
    public insertSparkDirectoryStatement(): InsertSparkDirectoryStatementContext | null {
        return this.getRuleContext(0, InsertSparkDirectoryStatementContext);
    }
    public insertHiveDirectoryStatement(): InsertHiveDirectoryStatementContext | null {
        return this.getRuleContext(0, InsertHiveDirectoryStatementContext);
    }
    public insertFromTable(): InsertFromTableContext | null {
        return this.getRuleContext(0, InsertFromTableContext);
    }
    public KW_EXECUTE(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_EXECUTE, 0);
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_plusStatement;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterPlusStatement) {
             listener.enterPlusStatement(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitPlusStatement) {
             listener.exitPlusStatement(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitPlusStatement) {
            return visitor.visitPlusStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DescribeStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public tablePath(): TablePathContext | null {
        return this.getRuleContext(0, TablePathContext);
    }
    public KW_DESCRIBE(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_DESCRIBE, 0);
    }
    public KW_DESC(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_DESC, 0);
    }
    public KW_EXTENDED(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_EXTENDED, 0);
    }
    public tableAlias(): TableAliasContext | null {
        return this.getRuleContext(0, TableAliasContext);
    }
    public KW_DATABASE(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_DATABASE, 0);
    }
    public KW_TABLE(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_TABLE, 0);
    }
    public KW_FUNCTION(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_FUNCTION, 0);
    }
    public functionName(): FunctionNameContext | null {
        return this.getRuleContext(0, FunctionNameContext);
    }
    public KW_QUERY(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_QUERY, 0);
    }
    public KW_FROM(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_FROM, 0);
    }
    public KW_SELECT(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_SELECT, 0);
    }
    public columnName(): ColumnNameContext[];
    public columnName(i: number): ColumnNameContext | null;
    public columnName(i?: number): ColumnNameContext[] | ColumnNameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ColumnNameContext);
        }

        return this.getRuleContext(i, ColumnNameContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSQLParser.COMMA);
    	} else {
    		return this.getToken(SparkSQLParser.COMMA, i);
    	}
    }
    public queryStatement(): QueryStatementContext | null {
        return this.getRuleContext(0, QueryStatementContext);
    }
    public valuesCaluse(): ValuesCaluseContext | null {
        return this.getRuleContext(0, ValuesCaluseContext);
    }
    public KW_AS(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_AS, 0);
    }
    public LR_BRACKET(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.LR_BRACKET, 0);
    }
    public RR_BRACKET(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.RR_BRACKET, 0);
    }
    public propertyName(): PropertyNameContext[];
    public propertyName(i: number): PropertyNameContext | null;
    public propertyName(i?: number): PropertyNameContext[] | PropertyNameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(PropertyNameContext);
        }

        return this.getRuleContext(i, PropertyNameContext);
    }
    public DOT(): antlr.TerminalNode[];
    public DOT(i: number): antlr.TerminalNode | null;
    public DOT(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSQLParser.DOT);
    	} else {
    		return this.getToken(SparkSQLParser.DOT, i);
    	}
    }
    public KW_PARTITION(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_PARTITION, 0);
    }
    public tableProperty(): TablePropertyContext | null {
        return this.getRuleContext(0, TablePropertyContext);
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_describeStatement;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterDescribeStatement) {
             listener.enterDescribeStatement(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitDescribeStatement) {
             listener.exitDescribeStatement(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitDescribeStatement) {
            return visitor.visitDescribeStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ExplainStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_EXPLAIN(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_EXPLAIN, 0)!;
    }
    public queryStatement(): QueryStatementContext | null {
        return this.getRuleContext(0, QueryStatementContext);
    }
    public insertSimpleStatement(): InsertSimpleStatementContext | null {
        return this.getRuleContext(0, InsertSimpleStatementContext);
    }
    public insertMulStatement(): InsertMulStatementContext | null {
        return this.getRuleContext(0, InsertMulStatementContext);
    }
    public valuesDefinition(): ValuesDefinitionContext | null {
        return this.getRuleContext(0, ValuesDefinitionContext);
    }
    public KW_EXTENDED(): antlr.TerminalNode[];
    public KW_EXTENDED(i: number): antlr.TerminalNode | null;
    public KW_EXTENDED(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSQLParser.KW_EXTENDED);
    	} else {
    		return this.getToken(SparkSQLParser.KW_EXTENDED, i);
    	}
    }
    public explainDetails(): ExplainDetailsContext | null {
        return this.getRuleContext(0, ExplainDetailsContext);
    }
    public KW_PLAN(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_PLAN, 0);
    }
    public KW_FOR(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_FOR, 0);
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_explainStatement;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterExplainStatement) {
             listener.enterExplainStatement(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitExplainStatement) {
             listener.exitExplainStatement(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitExplainStatement) {
            return visitor.visitExplainStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ExplainDetailsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public explainDetail(): ExplainDetailContext[];
    public explainDetail(i: number): ExplainDetailContext | null;
    public explainDetail(i?: number): ExplainDetailContext[] | ExplainDetailContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExplainDetailContext);
        }

        return this.getRuleContext(i, ExplainDetailContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSQLParser.COMMA);
    	} else {
    		return this.getToken(SparkSQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_explainDetails;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterExplainDetails) {
             listener.enterExplainDetails(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitExplainDetails) {
             listener.exitExplainDetails(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitExplainDetails) {
            return visitor.visitExplainDetails(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ExplainDetailContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_CHANGELOG_MODE(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_CHANGELOG_MODE, 0);
    }
    public KW_JSON_EXECUTION_PLAN(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_JSON_EXECUTION_PLAN, 0);
    }
    public KW_ESTIMATED_COST(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_ESTIMATED_COST, 0);
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_explainDetail;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterExplainDetail) {
             listener.enterExplainDetail(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitExplainDetail) {
             listener.exitExplainDetail(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitExplainDetail) {
            return visitor.visitExplainDetail(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class UseStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_USE(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_USE, 0);
    }
    public KW_CATALOG(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_CATALOG, 0);
    }
    public catalogPath(): CatalogPathContext | null {
        return this.getRuleContext(0, CatalogPathContext);
    }
    public databasePath(): DatabasePathContext | null {
        return this.getRuleContext(0, DatabasePathContext);
    }
    public useModuleStatement(): UseModuleStatementContext | null {
        return this.getRuleContext(0, UseModuleStatementContext);
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_useStatement;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterUseStatement) {
             listener.enterUseStatement(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitUseStatement) {
             listener.exitUseStatement(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitUseStatement) {
            return visitor.visitUseStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class UseModuleStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_USE(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_USE, 0)!;
    }
    public KW_MODULES(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_MODULES, 0)!;
    }
    public uid(): UidContext[];
    public uid(i: number): UidContext | null;
    public uid(i?: number): UidContext[] | UidContext | null {
        if (i === undefined) {
            return this.getRuleContexts(UidContext);
        }

        return this.getRuleContext(i, UidContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSQLParser.COMMA);
    	} else {
    		return this.getToken(SparkSQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_useModuleStatement;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterUseModuleStatement) {
             listener.enterUseModuleStatement(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitUseModuleStatement) {
             listener.exitUseModuleStatement(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitUseModuleStatement) {
            return visitor.visitUseModuleStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ShowStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_SHOW(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_SHOW, 0)!;
    }
    public KW_CATALOGS(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_CATALOGS, 0);
    }
    public KW_SCHEMA(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_SCHEMA, 0);
    }
    public KW_SCHEMAS(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_SCHEMAS, 0);
    }
    public KW_JARS(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_JARS, 0);
    }
    public KW_CURRENT(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_CURRENT, 0);
    }
    public KW_CATALOG(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_CATALOG, 0);
    }
    public KW_DATABASE(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_DATABASE, 0);
    }
    public KW_TABLES(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_TABLES, 0);
    }
    public KW_VIEWS(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_VIEWS, 0);
    }
    public likePredicate(): LikePredicateContext | null {
        return this.getRuleContext(0, LikePredicateContext);
    }
    public KW_FROM(): antlr.TerminalNode[];
    public KW_FROM(i: number): antlr.TerminalNode | null;
    public KW_FROM(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSQLParser.KW_FROM);
    	} else {
    		return this.getToken(SparkSQLParser.KW_FROM, i);
    	}
    }
    public KW_IN(): antlr.TerminalNode[];
    public KW_IN(i: number): antlr.TerminalNode | null;
    public KW_IN(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSQLParser.KW_IN);
    	} else {
    		return this.getToken(SparkSQLParser.KW_IN, i);
    	}
    }
    public KW_DEFAULT(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_DEFAULT, 0);
    }
    public tablePath(): TablePathContext[];
    public tablePath(i: number): TablePathContext | null;
    public tablePath(i?: number): TablePathContext[] | TablePathContext | null {
        if (i === undefined) {
            return this.getRuleContexts(TablePathContext);
        }

        return this.getRuleContext(i, TablePathContext);
    }
    public KW_COLUMNS(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_COLUMNS, 0);
    }
    public uid(): UidContext[];
    public uid(i: number): UidContext | null;
    public uid(i?: number): UidContext[] | UidContext | null {
        if (i === undefined) {
            return this.getRuleContexts(UidContext);
        }

        return this.getRuleContext(i, UidContext);
    }
    public KW_CREATE(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_CREATE, 0);
    }
    public KW_VIEW(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_VIEW, 0);
    }
    public KW_FUNCTIONS(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_FUNCTIONS, 0);
    }
    public showFunctionStatementBody(): ShowFunctionStatementBodyContext | null {
        return this.getRuleContext(0, ShowFunctionStatementBodyContext);
    }
    public KW_USER(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_USER, 0);
    }
    public KW_SYSTEM(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_SYSTEM, 0);
    }
    public KW_MODULES(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_MODULES, 0);
    }
    public KW_FULL(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_FULL, 0);
    }
    public KW_DATABASES(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_DATABASES, 0);
    }
    public likeDefinition(): LikeDefinitionContext | null {
        return this.getRuleContext(0, LikeDefinitionContext);
    }
    public KW_TBLPROPERTIES(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_TBLPROPERTIES, 0);
    }
    public LR_BRACKET(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.LR_BRACKET, 0);
    }
    public RR_BRACKET(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.RR_BRACKET, 0);
    }
    public constant(): ConstantContext[];
    public constant(i: number): ConstantContext | null;
    public constant(i?: number): ConstantContext[] | ConstantContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ConstantContext);
        }

        return this.getRuleContext(i, ConstantContext);
    }
    public DOT(): antlr.TerminalNode[];
    public DOT(i: number): antlr.TerminalNode | null;
    public DOT(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSQLParser.DOT);
    	} else {
    		return this.getToken(SparkSQLParser.DOT, i);
    	}
    }
    public KW_PARTITIONS(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_PARTITIONS, 0);
    }
    public KW_PARTITION(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_PARTITION, 0);
    }
    public tablePropertyList(): TablePropertyListContext | null {
        return this.getRuleContext(0, TablePropertyListContext);
    }
    public KW_TABLE(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_TABLE, 0);
    }
    public tableExpression(): TableExpressionContext | null {
        return this.getRuleContext(0, TableExpressionContext);
    }
    public KW_AS(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_AS, 0);
    }
    public KW_SERDE(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_SERDE, 0);
    }
    public showTableStatementBody(): ShowTableStatementBodyContext | null {
        return this.getRuleContext(0, ShowTableStatementBodyContext);
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_showStatement;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterShowStatement) {
             listener.enterShowStatement(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitShowStatement) {
             listener.exitShowStatement(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitShowStatement) {
            return visitor.visitShowStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class LoadStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_LOAD(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_LOAD, 0)!;
    }
    public KW_MODULE(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_MODULE, 0);
    }
    public uid(): UidContext | null {
        return this.getRuleContext(0, UidContext);
    }
    public KW_WITH(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_WITH, 0);
    }
    public tablePropertyList(): TablePropertyListContext | null {
        return this.getRuleContext(0, TablePropertyListContext);
    }
    public KW_DATA(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_DATA, 0);
    }
    public KW_LOCAL(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_LOCAL, 0);
    }
    public KW_INPATH(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_INPATH, 0);
    }
    public jarFileName(): JarFileNameContext | null {
        return this.getRuleContext(0, JarFileNameContext);
    }
    public KW_OVERWRITE(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_OVERWRITE, 0);
    }
    public KW_INTO(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_INTO, 0);
    }
    public KW_TABLE(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_TABLE, 0);
    }
    public tablePath(): TablePathContext | null {
        return this.getRuleContext(0, TablePathContext);
    }
    public KW_PARTITION(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_PARTITION, 0);
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_loadStatement;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterLoadStatement) {
             listener.enterLoadStatement(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitLoadStatement) {
             listener.exitLoadStatement(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitLoadStatement) {
            return visitor.visitLoadStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class UnloadStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_UNLOAD(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_UNLOAD, 0)!;
    }
    public KW_MODULE(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_MODULE, 0)!;
    }
    public uid(): UidContext {
        return this.getRuleContext(0, UidContext)!;
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_unloadStatement;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterUnloadStatement) {
             listener.enterUnloadStatement(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitUnloadStatement) {
             listener.exitUnloadStatement(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitUnloadStatement) {
            return visitor.visitUnloadStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SetStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_SET(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_SET, 0)!;
    }
    public tableProperty(): TablePropertyContext | null {
        return this.getRuleContext(0, TablePropertyContext);
    }
    public tablePropertyKey(): TablePropertyKeyContext | null {
        return this.getRuleContext(0, TablePropertyKeyContext);
    }
    public HYPNEN_SIGN(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.HYPNEN_SIGN, 0);
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_setStatement;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterSetStatement) {
             listener.enterSetStatement(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitSetStatement) {
             listener.exitSetStatement(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitSetStatement) {
            return visitor.visitSetStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ResetStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_RESET(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_RESET, 0)!;
    }
    public tablePropertyKey(): TablePropertyKeyContext | null {
        return this.getRuleContext(0, TablePropertyKeyContext);
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_resetStatement;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterResetStatement) {
             listener.enterResetStatement(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitResetStatement) {
             listener.exitResetStatement(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitResetStatement) {
            return visitor.visitResetStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FileStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_JAR(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_JAR, 0);
    }
    public jarFileName(): JarFileNameContext[];
    public jarFileName(i: number): JarFileNameContext | null;
    public jarFileName(i?: number): JarFileNameContext[] | JarFileNameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(JarFileNameContext);
        }

        return this.getRuleContext(i, JarFileNameContext);
    }
    public KW_ADD(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_ADD, 0);
    }
    public KW_REMOVE(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_REMOVE, 0);
    }
    public KW_FILE(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_FILE, 0);
    }
    public filePath(): FilePathContext[];
    public filePath(i: number): FilePathContext | null;
    public filePath(i?: number): FilePathContext[] | FilePathContext | null {
        if (i === undefined) {
            return this.getRuleContexts(FilePathContext);
        }

        return this.getRuleContext(i, FilePathContext);
    }
    public KW_LIST(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_LIST, 0);
    }
    public KW_FILES(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_FILES, 0);
    }
    public KW_JARS(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_JARS, 0);
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_fileStatement;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterFileStatement) {
             listener.enterFileStatement(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitFileStatement) {
             listener.exitFileStatement(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitFileStatement) {
            return visitor.visitFileStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RefreshStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_REFRESH(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_REFRESH, 0)!;
    }
    public uid(): UidContext | null {
        return this.getRuleContext(0, UidContext);
    }
    public KW_TABLE(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_TABLE, 0);
    }
    public KW_FUNCTION(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_FUNCTION, 0);
    }
    public jarFileName(): JarFileNameContext[];
    public jarFileName(i: number): JarFileNameContext | null;
    public jarFileName(i?: number): JarFileNameContext[] | JarFileNameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(JarFileNameContext);
        }

        return this.getRuleContext(i, JarFileNameContext);
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_refreshStatement;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterRefreshStatement) {
             listener.enterRefreshStatement(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitRefreshStatement) {
             listener.exitRefreshStatement(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitRefreshStatement) {
            return visitor.visitRefreshStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AnalyzeStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ANALYZE(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_ANALYZE, 0)!;
    }
    public KW_TABLE(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_TABLE, 0);
    }
    public KW_COMPUTE(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_COMPUTE, 0)!;
    }
    public KW_STATISTICS(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_STATISTICS, 0)!;
    }
    public tablePath(): TablePathContext | null {
        return this.getRuleContext(0, TablePathContext);
    }
    public analyzePartitionDefinition(): AnalyzePartitionDefinitionContext | null {
        return this.getRuleContext(0, AnalyzePartitionDefinitionContext);
    }
    public KW_FOR(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_FOR, 0);
    }
    public KW_COLUMNS(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_COLUMNS, 0);
    }
    public columnName(): ColumnNameContext[];
    public columnName(i: number): ColumnNameContext | null;
    public columnName(i?: number): ColumnNameContext[] | ColumnNameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ColumnNameContext);
        }

        return this.getRuleContext(i, ColumnNameContext);
    }
    public KW_ALL(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_ALL, 0);
    }
    public KW_NOSCAN(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_NOSCAN, 0);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSQLParser.COMMA);
    	} else {
    		return this.getToken(SparkSQLParser.COMMA, i);
    	}
    }
    public KW_TABLES(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_TABLES, 0);
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_analyzeStatement;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterAnalyzeStatement) {
             listener.enterAnalyzeStatement(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitAnalyzeStatement) {
             listener.exitAnalyzeStatement(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitAnalyzeStatement) {
            return visitor.visitAnalyzeStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AnalyzePartitionDefinitionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_PARTITION(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_PARTITION, 0)!;
    }
    public tableCanHasKeyPropertyList(): TableCanHasKeyPropertyListContext {
        return this.getRuleContext(0, TableCanHasKeyPropertyListContext)!;
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_analyzePartitionDefinition;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterAnalyzePartitionDefinition) {
             listener.enterAnalyzePartitionDefinition(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitAnalyzePartitionDefinition) {
             listener.exitAnalyzePartitionDefinition(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitAnalyzePartitionDefinition) {
            return visitor.visitAnalyzePartitionDefinition(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateCatalogContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_CREATE(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_CREATE, 0)!;
    }
    public KW_CATALOG(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_CATALOG, 0)!;
    }
    public uid(): UidContext {
        return this.getRuleContext(0, UidContext)!;
    }
    public withOption(): WithOptionContext {
        return this.getRuleContext(0, WithOptionContext)!;
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_createCatalog;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterCreateCatalog) {
             listener.enterCreateCatalog(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitCreateCatalog) {
             listener.exitCreateCatalog(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitCreateCatalog) {
            return visitor.visitCreateCatalog(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateDatabaseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_CREATE(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_CREATE, 0)!;
    }
    public KW_DATABASE(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_DATABASE, 0)!;
    }
    public databasePathCreate(): DatabasePathCreateContext {
        return this.getRuleContext(0, DatabasePathCreateContext)!;
    }
    public ifNotExists(): IfNotExistsContext | null {
        return this.getRuleContext(0, IfNotExistsContext);
    }
    public commentSpec(): CommentSpecContext | null {
        return this.getRuleContext(0, CommentSpecContext);
    }
    public KW_LOCATION(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_LOCATION, 0);
    }
    public STRING_LITERAL(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.STRING_LITERAL, 0);
    }
    public withOption(): WithOptionContext | null {
        return this.getRuleContext(0, WithOptionContext);
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_createDatabase;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterCreateDatabase) {
             listener.enterCreateDatabase(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitCreateDatabase) {
             listener.exitCreateDatabase(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitCreateDatabase) {
            return visitor.visitCreateDatabase(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateViewContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_CREATE(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_CREATE, 0)!;
    }
    public KW_VIEW(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_VIEW, 0)!;
    }
    public uid(): UidContext {
        return this.getRuleContext(0, UidContext)!;
    }
    public KW_AS(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_AS, 0)!;
    }
    public queryStatement(): QueryStatementContext {
        return this.getRuleContext(0, QueryStatementContext)!;
    }
    public KW_OR(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_OR, 0);
    }
    public KW_REPLACE(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_REPLACE, 0);
    }
    public KW_TEMPORARY(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_TEMPORARY, 0);
    }
    public ifNotExists(): IfNotExistsContext | null {
        return this.getRuleContext(0, IfNotExistsContext);
    }
    public columnNameList(): ColumnNameListContext | null {
        return this.getRuleContext(0, ColumnNameListContext);
    }
    public commentSpec(): CommentSpecContext | null {
        return this.getRuleContext(0, CommentSpecContext);
    }
    public KW_GLOBAL(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_GLOBAL, 0);
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_createView;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterCreateView) {
             listener.enterCreateView(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitCreateView) {
             listener.exitCreateView(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitCreateView) {
            return visitor.visitCreateView(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateFunctionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_CREATE(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_CREATE, 0)!;
    }
    public KW_FUNCTION(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_FUNCTION, 0)!;
    }
    public functionName(): FunctionNameContext {
        return this.getRuleContext(0, FunctionNameContext)!;
    }
    public KW_AS(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_AS, 0)!;
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public KW_OR(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_OR, 0);
    }
    public KW_REPLACE(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_REPLACE, 0);
    }
    public KW_TEMPORARY(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_TEMPORARY, 0);
    }
    public KW_SYSTEM(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_SYSTEM, 0);
    }
    public ifNotExists(): IfNotExistsContext | null {
        return this.getRuleContext(0, IfNotExistsContext);
    }
    public KW_USING(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_USING, 0);
    }
    public KW_JAR(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_JAR, 0);
    }
    public jarFileName(): JarFileNameContext | null {
        return this.getRuleContext(0, JarFileNameContext);
    }
    public usingClause(): UsingClauseContext | null {
        return this.getRuleContext(0, UsingClauseContext);
    }
    public KW_LANGUAGE(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_LANGUAGE, 0);
    }
    public KW_JAVA(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_JAVA, 0);
    }
    public KW_SCALA(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_SCALA, 0);
    }
    public KW_PYTHON(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_PYTHON, 0);
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_createFunction;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterCreateFunction) {
             listener.enterCreateFunction(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitCreateFunction) {
             listener.exitCreateFunction(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitCreateFunction) {
            return visitor.visitCreateFunction(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ReplaceTableContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_REPLACE(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_REPLACE, 0)!;
    }
    public KW_TABLE(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_TABLE, 0)!;
    }
    public tablePathCreate(): TablePathCreateContext {
        return this.getRuleContext(0, TablePathCreateContext)!;
    }
    public withOption(): WithOptionContext {
        return this.getRuleContext(0, WithOptionContext)!;
    }
    public KW_AS(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_AS, 0);
    }
    public queryStatement(): QueryStatementContext | null {
        return this.getRuleContext(0, QueryStatementContext);
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_replaceTable;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterReplaceTable) {
             listener.enterReplaceTable(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitReplaceTable) {
             listener.exitReplaceTable(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitReplaceTable) {
            return visitor.visitReplaceTable(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CacheStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_CACHE(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_CACHE, 0);
    }
    public KW_TABLE(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_TABLE, 0);
    }
    public uid(): UidContext[];
    public uid(i: number): UidContext | null;
    public uid(i?: number): UidContext[] | UidContext | null {
        if (i === undefined) {
            return this.getRuleContexts(UidContext);
        }

        return this.getRuleContext(i, UidContext);
    }
    public KW_OPTIONS(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_OPTIONS, 0);
    }
    public LR_BRACKET(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.LR_BRACKET, 0);
    }
    public RR_BRACKET(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.RR_BRACKET, 0);
    }
    public queryStatement(): QueryStatementContext | null {
        return this.getRuleContext(0, QueryStatementContext);
    }
    public KW_CLEAR(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_CLEAR, 0);
    }
    public KW_UNCACHE(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_UNCACHE, 0);
    }
    public tablePath(): TablePathContext | null {
        return this.getRuleContext(0, TablePathContext);
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_cacheStatement;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterCacheStatement) {
             listener.enterCacheStatement(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitCacheStatement) {
             listener.exitCacheStatement(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitCacheStatement) {
            return visitor.visitCacheStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterMaterializedTableContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ALTER(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_ALTER, 0)!;
    }
    public KW_MATERIALIZED(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_MATERIALIZED, 0)!;
    }
    public KW_TABLE(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_TABLE, 0)!;
    }
    public tablePath(): TablePathContext {
        return this.getRuleContext(0, TablePathContext)!;
    }
    public KW_SUSPEND(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_SUSPEND, 0);
    }
    public KW_RESUME(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_RESUME, 0);
    }
    public KW_REFRESH(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_REFRESH, 0);
    }
    public KW_PARTITION(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_PARTITION, 0);
    }
    public LR_BRACKET(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.LR_BRACKET, 0);
    }
    public identifier(): IdentifierContext[];
    public identifier(i: number): IdentifierContext | null;
    public identifier(i?: number): IdentifierContext[] | IdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IdentifierContext);
        }

        return this.getRuleContext(i, IdentifierContext);
    }
    public EQUAL_SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.EQUAL_SYMBOL, 0);
    }
    public RR_BRACKET(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.RR_BRACKET, 0);
    }
    public withOption(): WithOptionContext | null {
        return this.getRuleContext(0, WithOptionContext);
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_alterMaterializedTable;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterAlterMaterializedTable) {
             listener.enterAlterMaterializedTable(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitAlterMaterializedTable) {
             listener.exitAlterMaterializedTable(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitAlterMaterializedTable) {
            return visitor.visitAlterMaterializedTable(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterTableContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ALTER(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_ALTER, 0)!;
    }
    public KW_TABLE(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_TABLE, 0)!;
    }
    public tablePath(): TablePathContext {
        return this.getRuleContext(0, TablePathContext)!;
    }
    public alterTableBody(): AlterTableBodyContext {
        return this.getRuleContext(0, AlterTableBodyContext)!;
    }
    public ifExists(): IfExistsContext | null {
        return this.getRuleContext(0, IfExistsContext);
    }
    public KW_DEFAULT(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_DEFAULT, 0);
    }
    public DOT(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.DOT, 0);
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_alterTable;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterAlterTable) {
             listener.enterAlterTable(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitAlterTable) {
             listener.exitAlterTable(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitAlterTable) {
            return visitor.visitAlterTable(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterTableBodyContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_alterTableBody;
    }
    public override copyFrom(ctx: AlterTableBodyContext): void {
        super.copyFrom(ctx);
    }
}
export class AddNewPartitionsContext extends AlterTableBodyContext {
    public constructor(ctx: AlterTableBodyContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_ADD(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_ADD, 0)!;
    }
    public ifExistsPart(): IfExistsPartContext | null {
        return this.getRuleContext(0, IfExistsPartContext);
    }
    public KW_PARTITION(): antlr.TerminalNode[];
    public KW_PARTITION(i: number): antlr.TerminalNode | null;
    public KW_PARTITION(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSQLParser.KW_PARTITION);
    	} else {
    		return this.getToken(SparkSQLParser.KW_PARTITION, i);
    	}
    }
    public tablePropertyList(): TablePropertyListContext[];
    public tablePropertyList(i: number): TablePropertyListContext | null;
    public tablePropertyList(i?: number): TablePropertyListContext[] | TablePropertyListContext | null {
        if (i === undefined) {
            return this.getRuleContexts(TablePropertyListContext);
        }

        return this.getRuleContext(i, TablePropertyListContext);
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterAddNewPartitions) {
             listener.enterAddNewPartitions(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitAddNewPartitions) {
             listener.exitAddNewPartitions(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitAddNewPartitions) {
            return visitor.visitAddNewPartitions(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class DropcolumnContext extends AlterTableBodyContext {
    public constructor(ctx: AlterTableBodyContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_DROP(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_DROP, 0)!;
    }
    public KW_COLUMNS(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_COLUMNS, 0)!;
    }
    public LR_BRACKET(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.LR_BRACKET, 0)!;
    }
    public uid(): UidContext[];
    public uid(i: number): UidContext | null;
    public uid(i?: number): UidContext[] | UidContext | null {
        if (i === undefined) {
            return this.getRuleContexts(UidContext);
        }

        return this.getRuleContext(i, UidContext);
    }
    public RR_BRACKET(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.RR_BRACKET, 0)!;
    }
    public ifExistsPart(): IfExistsPartContext | null {
        return this.getRuleContext(0, IfExistsPartContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSQLParser.COMMA);
    	} else {
    		return this.getToken(SparkSQLParser.COMMA, i);
    	}
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterDropcolumn) {
             listener.enterDropcolumn(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitDropcolumn) {
             listener.exitDropcolumn(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitDropcolumn) {
            return visitor.visitDropcolumn(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ResetPropertiyContext extends AlterTableBodyContext {
    public constructor(ctx: AlterTableBodyContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_RESET(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_RESET, 0)!;
    }
    public transformList(): TransformListContext {
        return this.getRuleContext(0, TransformListContext)!;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterResetPropertiy) {
             listener.enterResetPropertiy(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitResetPropertiy) {
             listener.exitResetPropertiy(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitResetPropertiy) {
            return visitor.visitResetPropertiy(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class DropPrimaryKeyContext extends AlterTableBodyContext {
    public constructor(ctx: AlterTableBodyContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_DROP(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_DROP, 0)!;
    }
    public KW_PRIMARY(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_PRIMARY, 0)!;
    }
    public KW_KEY(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_KEY, 0)!;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterDropPrimaryKey) {
             listener.enterDropPrimaryKey(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitDropPrimaryKey) {
             listener.exitDropPrimaryKey(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitDropPrimaryKey) {
            return visitor.visitDropPrimaryKey(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class RenameTableContext extends AlterTableBodyContext {
    public constructor(ctx: AlterTableBodyContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_RENAME(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_RENAME, 0)!;
    }
    public tablePath(): TablePathContext {
        return this.getRuleContext(0, TablePathContext)!;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterRenameTable) {
             listener.enterRenameTable(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitRenameTable) {
             listener.exitRenameTable(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitRenameTable) {
            return visitor.visitRenameTable(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class AlterColumnCommentContext extends AlterTableBodyContext {
    public constructor(ctx: AlterTableBodyContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_ALTER(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_ALTER, 0)!;
    }
    public KW_COLUMN(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_COLUMN, 0)!;
    }
    public uid(): UidContext {
        return this.getRuleContext(0, UidContext)!;
    }
    public commentSpec(): CommentSpecContext {
        return this.getRuleContext(0, CommentSpecContext)!;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterAlterColumnComment) {
             listener.enterAlterColumnComment(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitAlterColumnComment) {
             listener.exitAlterColumnComment(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitAlterColumnComment) {
            return visitor.visitAlterColumnComment(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class UnsetContext extends AlterTableBodyContext {
    public constructor(ctx: AlterTableBodyContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_UNSET(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_UNSET, 0);
    }
    public KW_TBLPROPERTIES(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_TBLPROPERTIES, 0);
    }
    public tablePropertyList(): TablePropertyListContext | null {
        return this.getRuleContext(0, TablePropertyListContext);
    }
    public LR_BRACKET(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.LR_BRACKET, 0);
    }
    public tablePropertyKey(): TablePropertyKeyContext | null {
        return this.getRuleContext(0, TablePropertyKeyContext);
    }
    public RR_BRACKET(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.RR_BRACKET, 0);
    }
    public KW_RECOVER(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_RECOVER, 0);
    }
    public KW_PARTITIONS(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_PARTITIONS, 0);
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterUnset) {
             listener.enterUnset(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitUnset) {
             listener.exitUnset(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitUnset) {
            return visitor.visitUnset(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class AddOrModifyNewColumnsContext extends AlterTableBodyContext {
    public constructor(ctx: AlterTableBodyContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public LR_BRACKET(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.LR_BRACKET, 0)!;
    }
    public columnOptionDefinition(): ColumnOptionDefinitionContext[];
    public columnOptionDefinition(i: number): ColumnOptionDefinitionContext | null;
    public columnOptionDefinition(i?: number): ColumnOptionDefinitionContext[] | ColumnOptionDefinitionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ColumnOptionDefinitionContext);
        }

        return this.getRuleContext(i, ColumnOptionDefinitionContext);
    }
    public RR_BRACKET(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.RR_BRACKET, 0)!;
    }
    public KW_MODIFY(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_MODIFY, 0);
    }
    public KW_ADD(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_ADD, 0);
    }
    public columnPosition(): ColumnPositionContext[];
    public columnPosition(i: number): ColumnPositionContext | null;
    public columnPosition(i?: number): ColumnPositionContext[] | ColumnPositionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ColumnPositionContext);
        }

        return this.getRuleContext(i, ColumnPositionContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSQLParser.COMMA);
    	} else {
    		return this.getToken(SparkSQLParser.COMMA, i);
    	}
    }
    public commentSpec(): CommentSpecContext | null {
        return this.getRuleContext(0, CommentSpecContext);
    }
    public ifExistsPart(): IfExistsPartContext | null {
        return this.getRuleContext(0, IfExistsPartContext);
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterAddOrModifyNewColumns) {
             listener.enterAddOrModifyNewColumns(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitAddOrModifyNewColumns) {
             listener.exitAddOrModifyNewColumns(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitAddOrModifyNewColumns) {
            return visitor.visitAddOrModifyNewColumns(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class DropPartitionsContext extends AlterTableBodyContext {
    public constructor(ctx: AlterTableBodyContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_DROP(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_DROP, 0)!;
    }
    public KW_PARTITION(): antlr.TerminalNode[];
    public KW_PARTITION(i: number): antlr.TerminalNode | null;
    public KW_PARTITION(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSQLParser.KW_PARTITION);
    	} else {
    		return this.getToken(SparkSQLParser.KW_PARTITION, i);
    	}
    }
    public tablePropertyList(): TablePropertyListContext[];
    public tablePropertyList(i: number): TablePropertyListContext | null;
    public tablePropertyList(i?: number): TablePropertyListContext[] | TablePropertyListContext | null {
        if (i === undefined) {
            return this.getRuleContexts(TablePropertyListContext);
        }

        return this.getRuleContext(i, TablePropertyListContext);
    }
    public ifExistsPart(): IfExistsPartContext | null {
        return this.getRuleContext(0, IfExistsPartContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSQLParser.COMMA);
    	} else {
    		return this.getToken(SparkSQLParser.COMMA, i);
    	}
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterDropPartitions) {
             listener.enterDropPartitions(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitDropPartitions) {
             listener.exitDropPartitions(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitDropPartitions) {
            return visitor.visitDropPartitions(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ReplaceColumnsContext extends AlterTableBodyContext {
    public constructor(ctx: AlterTableBodyContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_REPLACE(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_REPLACE, 0)!;
    }
    public KW_COLUMNS(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_COLUMNS, 0)!;
    }
    public columnsBody(): ColumnsBodyContext {
        return this.getRuleContext(0, ColumnsBodyContext)!;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterReplaceColumns) {
             listener.enterReplaceColumns(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitReplaceColumns) {
             listener.exitReplaceColumns(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitReplaceColumns) {
            return visitor.visitReplaceColumns(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class RenameColumnContext extends AlterTableBodyContext {
    public constructor(ctx: AlterTableBodyContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_RENAME(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_RENAME, 0)!;
    }
    public KW_COLUMN(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_COLUMN, 0)!;
    }
    public uid(): UidContext[];
    public uid(i: number): UidContext | null;
    public uid(i?: number): UidContext[] | UidContext | null {
        if (i === undefined) {
            return this.getRuleContexts(UidContext);
        }

        return this.getRuleContext(i, UidContext);
    }
    public KW_TO(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_TO, 0)!;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterRenameColumn) {
             listener.enterRenameColumn(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitRenameColumn) {
             listener.exitRenameColumn(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitRenameColumn) {
            return visitor.visitRenameColumn(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class AddOrModifyNewColumnContext extends AlterTableBodyContext {
    public constructor(ctx: AlterTableBodyContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public columnsBody(): ColumnsBodyContext {
        return this.getRuleContext(0, ColumnsBodyContext)!;
    }
    public KW_MODIFY(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_MODIFY, 0);
    }
    public KW_ADD(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_ADD, 0);
    }
    public KW_COLUMNS(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_COLUMNS, 0);
    }
    public commentSpec(): CommentSpecContext | null {
        return this.getRuleContext(0, CommentSpecContext);
    }
    public partitionDefinition(): PartitionDefinitionContext | null {
        return this.getRuleContext(0, PartitionDefinitionContext);
    }
    public withOption(): WithOptionContext | null {
        return this.getRuleContext(0, WithOptionContext);
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterAddOrModifyNewColumn) {
             listener.enterAddOrModifyNewColumn(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitAddOrModifyNewColumn) {
             listener.exitAddOrModifyNewColumn(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitAddOrModifyNewColumn) {
            return visitor.visitAddOrModifyNewColumn(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SetPartitionPropertyContext extends AlterTableBodyContext {
    public constructor(ctx: AlterTableBodyContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_PARTITION(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_PARTITION, 0)!;
    }
    public KW_SET(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_SET, 0)!;
    }
    public setPart(): SetPartContext {
        return this.getRuleContext(0, SetPartContext)!;
    }
    public tablePropertyList(): TablePropertyListContext[];
    public tablePropertyList(i: number): TablePropertyListContext | null;
    public tablePropertyList(i?: number): TablePropertyListContext[] | TablePropertyListContext | null {
        if (i === undefined) {
            return this.getRuleContexts(TablePropertyListContext);
        }

        return this.getRuleContext(i, TablePropertyListContext);
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterSetPartitionProperty) {
             listener.enterSetPartitionProperty(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitSetPartitionProperty) {
             listener.exitSetPartitionProperty(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitSetPartitionProperty) {
            return visitor.visitSetPartitionProperty(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class DropWatermarkContext extends AlterTableBodyContext {
    public constructor(ctx: AlterTableBodyContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_DROP(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_DROP, 0)!;
    }
    public KW_WATERMARK(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_WATERMARK, 0)!;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterDropWatermark) {
             listener.enterDropWatermark(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitDropWatermark) {
             listener.exitDropWatermark(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitDropWatermark) {
            return visitor.visitDropWatermark(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class DropColumnListContext extends AlterTableBodyContext {
    public constructor(ctx: AlterTableBodyContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_DROP(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_DROP, 0)!;
    }
    public LR_BRACKET(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.LR_BRACKET, 0)!;
    }
    public uid(): UidContext[];
    public uid(i: number): UidContext | null;
    public uid(i?: number): UidContext[] | UidContext | null {
        if (i === undefined) {
            return this.getRuleContexts(UidContext);
        }

        return this.getRuleContext(i, UidContext);
    }
    public RR_BRACKET(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.RR_BRACKET, 0)!;
    }
    public ifExistsPart(): IfExistsPartContext | null {
        return this.getRuleContext(0, IfExistsPartContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSQLParser.COMMA);
    	} else {
    		return this.getToken(SparkSQLParser.COMMA, i);
    	}
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterDropColumnList) {
             listener.enterDropColumnList(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitDropColumnList) {
             listener.exitDropColumnList(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitDropColumnList) {
            return visitor.visitDropColumnList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class RenamePartitionColumnContext extends AlterTableBodyContext {
    public constructor(ctx: AlterTableBodyContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_PARTITION(): antlr.TerminalNode[];
    public KW_PARTITION(i: number): antlr.TerminalNode | null;
    public KW_PARTITION(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSQLParser.KW_PARTITION);
    	} else {
    		return this.getToken(SparkSQLParser.KW_PARTITION, i);
    	}
    }
    public tablePropertyList(): TablePropertyListContext[];
    public tablePropertyList(i: number): TablePropertyListContext | null;
    public tablePropertyList(i?: number): TablePropertyListContext[] | TablePropertyListContext | null {
        if (i === undefined) {
            return this.getRuleContexts(TablePropertyListContext);
        }

        return this.getRuleContext(i, TablePropertyListContext);
    }
    public KW_RENAME(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_RENAME, 0)!;
    }
    public KW_TO(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_TO, 0)!;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterRenamePartitionColumn) {
             listener.enterRenamePartitionColumn(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitRenamePartitionColumn) {
             listener.exitRenamePartitionColumn(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitRenamePartitionColumn) {
            return visitor.visitRenamePartitionColumn(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SetPropertiyContext extends AlterTableBodyContext {
    public constructor(ctx: AlterTableBodyContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_SET(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_SET, 0)!;
    }
    public setPart(): SetPartContext {
        return this.getRuleContext(0, SetPartContext)!;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterSetPropertiy) {
             listener.enterSetPropertiy(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitSetPropertiy) {
             listener.exitSetPropertiy(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitSetPropertiy) {
            return visitor.visitSetPropertiy(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class AlterContext extends AlterTableBodyContext {
    public constructor(ctx: AlterTableBodyContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public renameDefinition(): RenameDefinitionContext | null {
        return this.getRuleContext(0, RenameDefinitionContext);
    }
    public setKeyValueDefinition(): SetKeyValueDefinitionContext | null {
        return this.getRuleContext(0, SetKeyValueDefinitionContext);
    }
    public addConstraint(): AddConstraintContext | null {
        return this.getRuleContext(0, AddConstraintContext);
    }
    public dropConstraint(): DropConstraintContext | null {
        return this.getRuleContext(0, DropConstraintContext);
    }
    public addUnique(): AddUniqueContext | null {
        return this.getRuleContext(0, AddUniqueContext);
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterAlter) {
             listener.enterAlter(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitAlter) {
             listener.exitAlter(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitAlter) {
            return visitor.visitAlter(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SetPartContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_setPart;
    }
    public override copyFrom(ctx: SetPartContext): void {
        super.copyFrom(ctx);
    }
}
export class SetSerdeContext extends SetPartContext {
    public constructor(ctx: SetPartContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_SERDE(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_SERDE, 0);
    }
    public stringLiteral(): StringLiteralContext | null {
        return this.getRuleContext(0, StringLiteralContext);
    }
    public KW_WITH(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_WITH, 0);
    }
    public KW_SERDEPROPERTIES(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_SERDEPROPERTIES, 0);
    }
    public tablePropertyList(): TablePropertyListContext | null {
        return this.getRuleContext(0, TablePropertyListContext);
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterSetSerde) {
             listener.enterSetSerde(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitSetSerde) {
             listener.exitSetSerde(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitSetSerde) {
            return visitor.visitSetSerde(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SetTblProContext extends SetPartContext {
    public constructor(ctx: SetPartContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public tblProperties(): TblPropertiesContext {
        return this.getRuleContext(0, TblPropertiesContext)!;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterSetTblPro) {
             listener.enterSetTblPro(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitSetTblPro) {
             listener.exitSetTblPro(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitSetTblPro) {
            return visitor.visitSetTblPro(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SetLocationContext extends SetPartContext {
    public constructor(ctx: SetPartContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_LOCATION(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_LOCATION, 0);
    }
    public stringLiteral(): StringLiteralContext | null {
        return this.getRuleContext(0, StringLiteralContext);
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterSetLocation) {
             listener.enterSetLocation(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitSetLocation) {
             listener.exitSetLocation(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitSetLocation) {
            return visitor.visitSetLocation(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class CommonSetContext extends SetPartContext {
    public constructor(ctx: SetPartContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public partitionDefinition(): PartitionDefinitionContext | null {
        return this.getRuleContext(0, PartitionDefinitionContext);
    }
    public identifier(): IdentifierContext[];
    public identifier(i: number): IdentifierContext | null;
    public identifier(i?: number): IdentifierContext[] | IdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IdentifierContext);
        }

        return this.getRuleContext(i, IdentifierContext);
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterCommonSet) {
             listener.enterCommonSet(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitCommonSet) {
             listener.exitCommonSet(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitCommonSet) {
            return visitor.visitCommonSet(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DropCatalogContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_DROP(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_DROP, 0)!;
    }
    public KW_CATALOG(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_CATALOG, 0)!;
    }
    public catalogPath(): CatalogPathContext {
        return this.getRuleContext(0, CatalogPathContext)!;
    }
    public ifExists(): IfExistsContext | null {
        return this.getRuleContext(0, IfExistsContext);
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_dropCatalog;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterDropCatalog) {
             listener.enterDropCatalog(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitDropCatalog) {
             listener.exitDropCatalog(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitDropCatalog) {
            return visitor.visitDropCatalog(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DropTableContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_DROP(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_DROP, 0)!;
    }
    public KW_TABLE(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_TABLE, 0)!;
    }
    public tablePath(): TablePathContext {
        return this.getRuleContext(0, TablePathContext)!;
    }
    public KW_TEMPORARY(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_TEMPORARY, 0);
    }
    public ifExists(): IfExistsContext | null {
        return this.getRuleContext(0, IfExistsContext);
    }
    public KW_PURGE(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_PURGE, 0);
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_dropTable;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterDropTable) {
             listener.enterDropTable(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitDropTable) {
             listener.exitDropTable(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitDropTable) {
            return visitor.visitDropTable(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DropDatabaseContext extends antlr.ParserRuleContext {
    public _dropType?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_DROP(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_DROP, 0)!;
    }
    public KW_DATABASE(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_DATABASE, 0)!;
    }
    public databasePath(): DatabasePathContext {
        return this.getRuleContext(0, DatabasePathContext)!;
    }
    public ifExists(): IfExistsContext | null {
        return this.getRuleContext(0, IfExistsContext);
    }
    public KW_RESTRICT(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_RESTRICT, 0);
    }
    public KW_CASCADE(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_CASCADE, 0);
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_dropDatabase;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterDropDatabase) {
             listener.enterDropDatabase(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitDropDatabase) {
             listener.exitDropDatabase(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitDropDatabase) {
            return visitor.visitDropDatabase(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DropViewContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_DROP(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_DROP, 0)!;
    }
    public KW_VIEW(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_VIEW, 0)!;
    }
    public uid(): UidContext {
        return this.getRuleContext(0, UidContext)!;
    }
    public KW_TEMPORARY(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_TEMPORARY, 0);
    }
    public ifExists(): IfExistsContext | null {
        return this.getRuleContext(0, IfExistsContext);
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_dropView;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterDropView) {
             listener.enterDropView(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitDropView) {
             listener.exitDropView(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitDropView) {
            return visitor.visitDropView(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DropFunctionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_DROP(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_DROP, 0)!;
    }
    public KW_FUNCTION(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_FUNCTION, 0)!;
    }
    public functionName(): FunctionNameContext {
        return this.getRuleContext(0, FunctionNameContext)!;
    }
    public KW_TEMPORARY(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_TEMPORARY, 0);
    }
    public KW_SYSTEM(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_SYSTEM, 0);
    }
    public ifExists(): IfExistsContext | null {
        return this.getRuleContext(0, IfExistsContext);
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_dropFunction;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterDropFunction) {
             listener.enterDropFunction(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitDropFunction) {
             listener.exitDropFunction(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitDropFunction) {
            return visitor.visitDropFunction(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TruncateTableContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_TRUNCATE(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_TRUNCATE, 0)!;
    }
    public KW_TABLE(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_TABLE, 0)!;
    }
    public tablePathCreate(): TablePathCreateContext {
        return this.getRuleContext(0, TablePathCreateContext)!;
    }
    public KW_PARTITION(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_PARTITION, 0);
    }
    public tablePropertyList(): TablePropertyListContext | null {
        return this.getRuleContext(0, TablePropertyListContext);
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_truncateTable;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterTruncateTable) {
             listener.enterTruncateTable(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitTruncateTable) {
             listener.exitTruncateTable(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitTruncateTable) {
            return visitor.visitTruncateTable(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RepairTableContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_REPAIR(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_REPAIR, 0)!;
    }
    public KW_TABLE(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_TABLE, 0)!;
    }
    public tablePath(): TablePathContext {
        return this.getRuleContext(0, TablePathContext)!;
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_repairTable;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterRepairTable) {
             listener.enterRepairTable(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitRepairTable) {
             listener.exitRepairTable(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitRepairTable) {
            return visitor.visitRepairTable(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlertViewContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ALTER(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_ALTER, 0);
    }
    public KW_VIEW(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_VIEW, 0);
    }
    public tablePath(): TablePathContext | null {
        return this.getRuleContext(0, TablePathContext);
    }
    public renameDefinition(): RenameDefinitionContext | null {
        return this.getRuleContext(0, RenameDefinitionContext);
    }
    public KW_AS(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_AS, 0);
    }
    public queryStatement(): QueryStatementContext | null {
        return this.getRuleContext(0, QueryStatementContext);
    }
    public KW_SET(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_SET, 0);
    }
    public KW_TBLPROPERTIES(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_TBLPROPERTIES, 0);
    }
    public tableCanHasKeyPropertyList(): TableCanHasKeyPropertyListContext | null {
        return this.getRuleContext(0, TableCanHasKeyPropertyListContext);
    }
    public KW_UNSET(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_UNSET, 0);
    }
    public LR_BRACKET(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.LR_BRACKET, 0);
    }
    public tablePropertyKey(): TablePropertyKeyContext[];
    public tablePropertyKey(i: number): TablePropertyKeyContext | null;
    public tablePropertyKey(i?: number): TablePropertyKeyContext[] | TablePropertyKeyContext | null {
        if (i === undefined) {
            return this.getRuleContexts(TablePropertyKeyContext);
        }

        return this.getRuleContext(i, TablePropertyKeyContext);
    }
    public RR_BRACKET(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.RR_BRACKET, 0);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSQLParser.COMMA);
    	} else {
    		return this.getToken(SparkSQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_alertView;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterAlertView) {
             listener.enterAlertView(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitAlertView) {
             listener.exitAlertView(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitAlertView) {
            return visitor.visitAlertView(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterDatabaseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ALTER(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_ALTER, 0)!;
    }
    public KW_DATABASE(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_DATABASE, 0)!;
    }
    public databasePath(): DatabasePathContext {
        return this.getRuleContext(0, DatabasePathContext)!;
    }
    public setKeyValueDefinition(): SetKeyValueDefinitionContext | null {
        return this.getRuleContext(0, SetKeyValueDefinitionContext);
    }
    public KW_SET(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_SET, 0);
    }
    public KW_LOCATION(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_LOCATION, 0);
    }
    public filePath(): FilePathContext | null {
        return this.getRuleContext(0, FilePathContext);
    }
    public KW_DBPROPERTIES(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_DBPROPERTIES, 0);
    }
    public tablePropertyList(): TablePropertyListContext | null {
        return this.getRuleContext(0, TablePropertyListContext);
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_alterDatabase;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterAlterDatabase) {
             listener.enterAlterDatabase(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitAlterDatabase) {
             listener.exitAlterDatabase(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitAlterDatabase) {
            return visitor.visitAlterDatabase(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterFunctionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ALTER(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_ALTER, 0)!;
    }
    public KW_FUNCTION(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_FUNCTION, 0)!;
    }
    public uid(): UidContext {
        return this.getRuleContext(0, UidContext)!;
    }
    public KW_AS(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_AS, 0)!;
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public KW_TEMPORARY(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_TEMPORARY, 0);
    }
    public KW_SYSTEM(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_SYSTEM, 0);
    }
    public ifExists(): IfExistsContext | null {
        return this.getRuleContext(0, IfExistsContext);
    }
    public KW_LANGUAGE(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_LANGUAGE, 0);
    }
    public KW_JAVA(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_JAVA, 0);
    }
    public KW_SCALA(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_SCALA, 0);
    }
    public KW_PYTHON(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_PYTHON, 0);
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_alterFunction;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterAlterFunction) {
             listener.enterAlterFunction(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitAlterFunction) {
             listener.exitAlterFunction(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitAlterFunction) {
            return visitor.visitAlterFunction(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class InlineTableClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_inlineTableClause;
    }
    public override copyFrom(ctx: InlineTableClauseContext): void {
        super.copyFrom(ctx);
    }
}
export class Parse_urlContext extends InlineTableClauseContext {
    public constructor(ctx: InlineTableClauseContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_PARSE_URL(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_PARSE_URL, 0);
    }
    public LR_BRACKET(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.LR_BRACKET, 0);
    }
    public stringLiteral(): StringLiteralContext[];
    public stringLiteral(i: number): StringLiteralContext | null;
    public stringLiteral(i?: number): StringLiteralContext[] | StringLiteralContext | null {
        if (i === undefined) {
            return this.getRuleContexts(StringLiteralContext);
        }

        return this.getRuleContext(i, StringLiteralContext);
    }
    public COMMA(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.COMMA, 0);
    }
    public RR_BRACKET(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.RR_BRACKET, 0);
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterParse_url) {
             listener.enterParse_url(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitParse_url) {
             listener.exitParse_url(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitParse_url) {
            return visitor.visitParse_url(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class StackContext extends InlineTableClauseContext {
    public constructor(ctx: InlineTableClauseContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_STACK(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_STACK, 0);
    }
    public LR_BRACKET(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.LR_BRACKET, 0);
    }
    public constant(): ConstantContext | null {
        return this.getRuleContext(0, ConstantContext);
    }
    public RR_BRACKET(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.RR_BRACKET, 0);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSQLParser.COMMA);
    	} else {
    		return this.getToken(SparkSQLParser.COMMA, i);
    	}
    }
    public expression(): ExpressionContext[];
    public expression(i: number): ExpressionContext | null;
    public expression(i?: number): ExpressionContext[] | ExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }

        return this.getRuleContext(i, ExpressionContext);
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterStack) {
             listener.enterStack(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitStack) {
             listener.exitStack(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitStack) {
            return visitor.visitStack(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class OneExpresionContext extends InlineTableClauseContext {
    public constructor(ctx: InlineTableClauseContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public LR_BRACKET(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.LR_BRACKET, 0);
    }
    public expression(): ExpressionContext | null {
        return this.getRuleContext(0, ExpressionContext);
    }
    public RR_BRACKET(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.RR_BRACKET, 0);
    }
    public KW_EXPLODE(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_EXPLODE, 0);
    }
    public KW_EXPLODE_OUTER(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_EXPLODE_OUTER, 0);
    }
    public KW_INLINE(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_INLINE, 0);
    }
    public KW_INLINE_OUTER(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_INLINE_OUTER, 0);
    }
    public KW_POSEXPLODE(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_POSEXPLODE, 0);
    }
    public KW_POSEXPLODE_OUTER(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_POSEXPLODE_OUTER, 0);
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterOneExpresion) {
             listener.enterOneExpresion(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitOneExpresion) {
             listener.exitOneExpresion(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitOneExpresion) {
            return visitor.visitOneExpresion(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class Json_tupleContext extends InlineTableClauseContext {
    public constructor(ctx: InlineTableClauseContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_JSON_TUPLE(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_JSON_TUPLE, 0);
    }
    public LR_BRACKET(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.LR_BRACKET, 0);
    }
    public stringLiteral(): StringLiteralContext | null {
        return this.getRuleContext(0, StringLiteralContext);
    }
    public RR_BRACKET(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.RR_BRACKET, 0);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSQLParser.COMMA);
    	} else {
    		return this.getToken(SparkSQLParser.COMMA, i);
    	}
    }
    public expression(): ExpressionContext[];
    public expression(i: number): ExpressionContext | null;
    public expression(i?: number): ExpressionContext[] | ExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }

        return this.getRuleContext(i, ExpressionContext);
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterJson_tuple) {
             listener.enterJson_tuple(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitJson_tuple) {
             listener.exitJson_tuple(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitJson_tuple) {
            return visitor.visitJson_tuple(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ShowTableStatementBodyContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_EXTENDED(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_EXTENDED, 0);
    }
    public KW_IN(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_IN, 0);
    }
    public KW_DEFAULT(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_DEFAULT, 0);
    }
    public likeDefinition(): LikeDefinitionContext | null {
        return this.getRuleContext(0, LikeDefinitionContext);
    }
    public KW_PARTITION(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_PARTITION, 0);
    }
    public LR_BRACKET(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.LR_BRACKET, 0);
    }
    public tableProperty(): TablePropertyContext | null {
        return this.getRuleContext(0, TablePropertyContext);
    }
    public RR_BRACKET(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.RR_BRACKET, 0);
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_showTableStatementBody;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterShowTableStatementBody) {
             listener.enterShowTableStatementBody(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitShowTableStatementBody) {
             listener.exitShowTableStatementBody(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitShowTableStatementBody) {
            return visitor.visitShowTableStatementBody(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ShowFunctionStatementBodyContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public uid(): UidContext | null {
        return this.getRuleContext(0, UidContext);
    }
    public KW_LIKE(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_LIKE, 0);
    }
    public expression(): ExpressionContext | null {
        return this.getRuleContext(0, ExpressionContext);
    }
    public KW_FROM(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_FROM, 0);
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_showFunctionStatementBody;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterShowFunctionStatementBody) {
             listener.enterShowFunctionStatementBody(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitShowFunctionStatementBody) {
             listener.exitShowFunctionStatementBody(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitShowFunctionStatementBody) {
            return visitor.visitShowFunctionStatementBody(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TransformClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_TRANSFORM(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_TRANSFORM, 0)!;
    }
    public columnNameList(): ColumnNameListContext[];
    public columnNameList(i: number): ColumnNameListContext | null;
    public columnNameList(i?: number): ColumnNameListContext[] | ColumnNameListContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ColumnNameListContext);
        }

        return this.getRuleContext(i, ColumnNameListContext);
    }
    public rowFormatDelimited(): RowFormatDelimitedContext | null {
        return this.getRuleContext(0, RowFormatDelimitedContext);
    }
    public hiveSerde(): HiveSerdeContext | null {
        return this.getRuleContext(0, HiveSerdeContext);
    }
    public KW_USING(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_USING, 0);
    }
    public stringLiteral(): StringLiteralContext | null {
        return this.getRuleContext(0, StringLiteralContext);
    }
    public KW_AS(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_AS, 0);
    }
    public physicalColumnDefinitionList(): PhysicalColumnDefinitionListContext | null {
        return this.getRuleContext(0, PhysicalColumnDefinitionListContext);
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_transformClause;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterTransformClause) {
             listener.enterTransformClause(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitTransformClause) {
             listener.exitTransformClause(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitTransformClause) {
            return visitor.visitTransformClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class InsertSparkDirectoryStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_INSERT(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_INSERT, 0)!;
    }
    public KW_OVERWRITE(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_OVERWRITE, 0)!;
    }
    public KW_DIRECTORY(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_DIRECTORY, 0)!;
    }
    public insertSparkDirectoryBody(): InsertSparkDirectoryBodyContext {
        return this.getRuleContext(0, InsertSparkDirectoryBodyContext)!;
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_insertSparkDirectoryStatement;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterInsertSparkDirectoryStatement) {
             listener.enterInsertSparkDirectoryStatement(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitInsertSparkDirectoryStatement) {
             listener.exitInsertSparkDirectoryStatement(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitInsertSparkDirectoryStatement) {
            return visitor.visitInsertSparkDirectoryStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class InsertSparkDirectoryBodyContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_USING(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_USING, 0);
    }
    public ID_LITERAL(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.ID_LITERAL, 0);
    }
    public KW_OPTIONS(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_OPTIONS, 0);
    }
    public LR_BRACKET(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.LR_BRACKET, 0);
    }
    public columnName(): ColumnNameContext[];
    public columnName(i: number): ColumnNameContext | null;
    public columnName(i?: number): ColumnNameContext[] | ColumnNameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ColumnNameContext);
        }

        return this.getRuleContext(i, ColumnNameContext);
    }
    public RR_BRACKET(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.RR_BRACKET, 0);
    }
    public queryStatement(): QueryStatementContext | null {
        return this.getRuleContext(0, QueryStatementContext);
    }
    public filePath(): FilePathContext | null {
        return this.getRuleContext(0, FilePathContext);
    }
    public constant(): ConstantContext[];
    public constant(i: number): ConstantContext | null;
    public constant(i?: number): ConstantContext[] | ConstantContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ConstantContext);
        }

        return this.getRuleContext(i, ConstantContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSQLParser.COMMA);
    	} else {
    		return this.getToken(SparkSQLParser.COMMA, i);
    	}
    }
    public STRING_LITERAL(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.STRING_LITERAL, 0);
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_insertSparkDirectoryBody;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterInsertSparkDirectoryBody) {
             listener.enterInsertSparkDirectoryBody(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitInsertSparkDirectoryBody) {
             listener.exitInsertSparkDirectoryBody(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitInsertSparkDirectoryBody) {
            return visitor.visitInsertSparkDirectoryBody(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class InsertHiveDirectoryStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_INSERT(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_INSERT, 0)!;
    }
    public KW_OVERWRITE(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_OVERWRITE, 0)!;
    }
    public KW_LOCAL(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_LOCAL, 0)!;
    }
    public KW_DIRECTORY(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_DIRECTORY, 0)!;
    }
    public filePath(): FilePathContext {
        return this.getRuleContext(0, FilePathContext)!;
    }
    public queryStatement(): QueryStatementContext {
        return this.getRuleContext(0, QueryStatementContext)!;
    }
    public storedAs(): StoredAsContext | null {
        return this.getRuleContext(0, StoredAsContext);
    }
    public hiveRowFormatPart(): HiveRowFormatPartContext | null {
        return this.getRuleContext(0, HiveRowFormatPartContext);
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_insertHiveDirectoryStatement;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterInsertHiveDirectoryStatement) {
             listener.enterInsertHiveDirectoryStatement(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitInsertHiveDirectoryStatement) {
             listener.exitInsertHiveDirectoryStatement(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitInsertHiveDirectoryStatement) {
            return visitor.visitInsertHiveDirectoryStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class HiveRowFormatPartContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public rowFormatDelimted(): RowFormatDelimtedContext {
        return this.getRuleContext(0, RowFormatDelimtedContext)!;
    }
    public fieldsTerminatedBy(): FieldsTerminatedByContext {
        return this.getRuleContext(0, FieldsTerminatedByContext)!;
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_hiveRowFormatPart;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterHiveRowFormatPart) {
             listener.enterHiveRowFormatPart(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitHiveRowFormatPart) {
             listener.exitHiveRowFormatPart(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitHiveRowFormatPart) {
            return visitor.visitHiveRowFormatPart(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class InsertMulStatementCompatibilityContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_BEGIN(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_BEGIN, 0)!;
    }
    public KW_STATEMENT(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_STATEMENT, 0)!;
    }
    public KW_SET(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_SET, 0)!;
    }
    public SEMICOLON(): antlr.TerminalNode[];
    public SEMICOLON(i: number): antlr.TerminalNode | null;
    public SEMICOLON(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSQLParser.SEMICOLON);
    	} else {
    		return this.getToken(SparkSQLParser.SEMICOLON, i);
    	}
    }
    public KW_END(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_END, 0)!;
    }
    public insertSimpleStatement(): InsertSimpleStatementContext[];
    public insertSimpleStatement(i: number): InsertSimpleStatementContext | null;
    public insertSimpleStatement(i?: number): InsertSimpleStatementContext[] | InsertSimpleStatementContext | null {
        if (i === undefined) {
            return this.getRuleContexts(InsertSimpleStatementContext);
        }

        return this.getRuleContext(i, InsertSimpleStatementContext);
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_insertMulStatementCompatibility;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterInsertMulStatementCompatibility) {
             listener.enterInsertMulStatementCompatibility(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitInsertMulStatementCompatibility) {
             listener.exitInsertMulStatementCompatibility(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitInsertMulStatementCompatibility) {
            return visitor.visitInsertMulStatementCompatibility(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class InsertMulStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_STATEMENT(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_STATEMENT, 0)!;
    }
    public KW_SET(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_SET, 0)!;
    }
    public KW_BEGIN(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_BEGIN, 0)!;
    }
    public KW_END(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_END, 0)!;
    }
    public insertSimpleStatement(): InsertSimpleStatementContext[];
    public insertSimpleStatement(i: number): InsertSimpleStatementContext | null;
    public insertSimpleStatement(i?: number): InsertSimpleStatementContext[] | InsertSimpleStatementContext | null {
        if (i === undefined) {
            return this.getRuleContexts(InsertSimpleStatementContext);
        }

        return this.getRuleContext(i, InsertSimpleStatementContext);
    }
    public SEMICOLON(): antlr.TerminalNode[];
    public SEMICOLON(i: number): antlr.TerminalNode | null;
    public SEMICOLON(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSQLParser.SEMICOLON);
    	} else {
    		return this.getToken(SparkSQLParser.SEMICOLON, i);
    	}
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_insertMulStatement;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterInsertMulStatement) {
             listener.enterInsertMulStatement(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitInsertMulStatement) {
             listener.exitInsertMulStatement(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitInsertMulStatement) {
            return visitor.visitInsertMulStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class InsertFromTableContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_INSERT(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_INSERT, 0)!;
    }
    public tablePath(): TablePathContext[];
    public tablePath(i: number): TablePathContext | null;
    public tablePath(i?: number): TablePathContext[] | TablePathContext | null {
        if (i === undefined) {
            return this.getRuleContexts(TablePathContext);
        }

        return this.getRuleContext(i, TablePathContext);
    }
    public KW_TABLE(): antlr.TerminalNode[];
    public KW_TABLE(i: number): antlr.TerminalNode | null;
    public KW_TABLE(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSQLParser.KW_TABLE);
    	} else {
    		return this.getToken(SparkSQLParser.KW_TABLE, i);
    	}
    }
    public KW_INTO(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_INTO, 0);
    }
    public KW_OVERWRITE(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_OVERWRITE, 0);
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_insertFromTable;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterInsertFromTable) {
             listener.enterInsertFromTable(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitInsertFromTable) {
             listener.exitInsertFromTable(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitInsertFromTable) {
            return visitor.visitInsertFromTable(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateExternalTableContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_CREATE(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_CREATE, 0)!;
    }
    public KW_EXTERNAL(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_EXTERNAL, 0)!;
    }
    public KW_TABLE(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_TABLE, 0)!;
    }
    public tablePathCreate(): TablePathCreateContext {
        return this.getRuleContext(0, TablePathCreateContext)!;
    }
    public columnsBody(): ColumnsBodyContext {
        return this.getRuleContext(0, ColumnsBodyContext)!;
    }
    public ifNotExists(): IfNotExistsContext | null {
        return this.getRuleContext(0, IfNotExistsContext);
    }
    public createExternalTableNoSortElement(): CreateExternalTableNoSortElementContext[];
    public createExternalTableNoSortElement(i: number): CreateExternalTableNoSortElementContext | null;
    public createExternalTableNoSortElement(i?: number): CreateExternalTableNoSortElementContext[] | CreateExternalTableNoSortElementContext | null {
        if (i === undefined) {
            return this.getRuleContexts(CreateExternalTableNoSortElementContext);
        }

        return this.getRuleContext(i, CreateExternalTableNoSortElementContext);
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_createExternalTable;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterCreateExternalTable) {
             listener.enterCreateExternalTable(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitCreateExternalTable) {
             listener.exitCreateExternalTable(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitCreateExternalTable) {
            return visitor.visitCreateExternalTable(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateExternalTableNoSortElementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public rowFormatDelimted(): RowFormatDelimtedContext | null {
        return this.getRuleContext(0, RowFormatDelimtedContext);
    }
    public fieldsTerminatedBy(): FieldsTerminatedByContext | null {
        return this.getRuleContext(0, FieldsTerminatedByContext);
    }
    public KW_ROW(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_ROW, 0);
    }
    public KW_FORMAT(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_FORMAT, 0);
    }
    public KW_SERDE(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_SERDE, 0);
    }
    public stringLiteral(): StringLiteralContext | null {
        return this.getRuleContext(0, StringLiteralContext);
    }
    public KW_LINES(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_LINES, 0);
    }
    public KW_TERMINATED(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_TERMINATED, 0);
    }
    public KW_BY(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_BY, 0);
    }
    public KW_NULL(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_NULL, 0);
    }
    public KW_DEFINED(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_DEFINED, 0);
    }
    public KW_AS(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_AS, 0);
    }
    public KW_ESCAPED(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_ESCAPED, 0);
    }
    public KW_COLLECTION(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_COLLECTION, 0);
    }
    public KW_ITEMS(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_ITEMS, 0);
    }
    public storedAs(): StoredAsContext | null {
        return this.getRuleContext(0, StoredAsContext);
    }
    public storedAsInputformat(): StoredAsInputformatContext | null {
        return this.getRuleContext(0, StoredAsInputformatContext);
    }
    public outputformat(): OutputformatContext | null {
        return this.getRuleContext(0, OutputformatContext);
    }
    public location(): LocationContext | null {
        return this.getRuleContext(0, LocationContext);
    }
    public KW_MAP(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_MAP, 0);
    }
    public KW_KEYS(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_KEYS, 0);
    }
    public rowFormatSerde(): RowFormatSerdeContext | null {
        return this.getRuleContext(0, RowFormatSerdeContext);
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_createExternalTableNoSortElement;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterCreateExternalTableNoSortElement) {
             listener.enterCreateExternalTableNoSortElement(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitCreateExternalTableNoSortElement) {
             listener.exitCreateExternalTableNoSortElement(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitCreateExternalTableNoSortElement) {
            return visitor.visitCreateExternalTableNoSortElement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class HiveFormatCreateContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_CREATE(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_CREATE, 0)!;
    }
    public KW_TABLE(): antlr.TerminalNode {
        return this.getToken(SparkSQLParser.KW_TABLE, 0)!;
    }
    public tablePathCreate(): TablePathCreateContext {
        return this.getRuleContext(0, TablePathCreateContext)!;
    }
    public KW_TEMPORARY(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_TEMPORARY, 0);
    }
    public ifNotExists(): IfNotExistsContext | null {
        return this.getRuleContext(0, IfNotExistsContext);
    }
    public hiveFormatCreateNoSortElement(): HiveFormatCreateNoSortElementContext[];
    public hiveFormatCreateNoSortElement(i: number): HiveFormatCreateNoSortElementContext | null;
    public hiveFormatCreateNoSortElement(i?: number): HiveFormatCreateNoSortElementContext[] | HiveFormatCreateNoSortElementContext | null {
        if (i === undefined) {
            return this.getRuleContexts(HiveFormatCreateNoSortElementContext);
        }

        return this.getRuleContext(i, HiveFormatCreateNoSortElementContext);
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_hiveFormatCreate;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterHiveFormatCreate) {
             listener.enterHiveFormatCreate(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitHiveFormatCreate) {
             listener.exitHiveFormatCreate(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitHiveFormatCreate) {
            return visitor.visitHiveFormatCreate(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class HiveFormatCreateNoSortElementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public storedAs(): StoredAsContext | null {
        return this.getRuleContext(0, StoredAsContext);
    }
    public KW_AS(): antlr.TerminalNode | null {
        return this.getToken(SparkSQLParser.KW_AS, 0);
    }
    public queryStatement(): QueryStatementContext | null {
        return this.getRuleContext(0, QueryStatementContext);
    }
    public columnsBody(): ColumnsBodyContext | null {
        return this.getRuleContext(0, ColumnsBodyContext);
    }
    public hiveFormatpartitionDefinition(): HiveFormatpartitionDefinitionContext | null {
        return this.getRuleContext(0, HiveFormatpartitionDefinitionContext);
    }
    public withOption(): WithOptionContext | null {
        return this.getRuleContext(0, WithOptionContext);
    }
    public likeDefinition(): LikeDefinitionContext | null {
        return this.getRuleContext(0, LikeDefinitionContext);
    }
    public someByClause(): SomeByClauseContext | null {
        return this.getRuleContext(0, SomeByClauseContext);
    }
    public commentSpec(): CommentSpecContext | null {
        return this.getRuleContext(0, CommentSpecContext);
    }
    public rowFormatDelimted(): RowFormatDelimtedContext | null {
        return this.getRuleContext(0, RowFormatDelimtedContext);
    }
    public fieldsTerminatedBy(): FieldsTerminatedByContext | null {
        return this.getRuleContext(0, FieldsTerminatedByContext);
    }
    public tblProperties(): TblPropertiesContext | null {
        return this.getRuleContext(0, TblPropertiesContext);
    }
    public storedAsInputformat(): StoredAsInputformatContext | null {
        return this.getRuleContext(0, StoredAsInputformatContext);
    }
    public outputformat(): OutputformatContext | null {
        return this.getRuleContext(0, OutputformatContext);
    }
    public rowFormatSerde(): RowFormatSerdeContext | null {
        return this.getRuleContext(0, RowFormatSerdeContext);
    }
    public override get ruleIndex(): number {
        return SparkSQLParser.RULE_hiveFormatCreateNoSortElement;
    }
    public override enterRule(listener: SparkSQLListener): void {
        if(listener.enterHiveFormatCreateNoSortElement) {
             listener.enterHiveFormatCreateNoSortElement(this);
        }
    }
    public override exitRule(listener: SparkSQLListener): void {
        if(listener.exitHiveFormatCreateNoSortElement) {
             listener.exitHiveFormatCreateNoSortElement(this);
        }
    }
    public override accept<Result>(visitor: SparkSQLVisitor<Result>): Result | null {
        if (visitor.visitHiveFormatCreateNoSortElement) {
            return visitor.visitHiveFormatCreateNoSortElement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
